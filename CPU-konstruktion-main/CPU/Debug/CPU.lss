
CPU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000028c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000284e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000004d7  00800100  00800100  000028c2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000028c2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000028f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  00002934  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f2a  00000000  00000000  00002a74  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a68  00000000  00000000  0000399e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dbe  00000000  00000000  00004406  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000430  00000000  00000000  000051c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005c2  00000000  00000000  000055f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000859  00000000  00000000  00005bb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  0000640f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
       4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
       8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
       c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      68:	86 09       	sbc	r24, r6
      6a:	ae 03       	fmulsu	r18, r22
      6c:	c8 03       	fmulsu	r20, r16
      6e:	ef 03       	fmulsu	r22, r23
      70:	4a 04       	cpc	r4, r10
      72:	70 04       	cpc	r7, r0
      74:	9a 04       	cpc	r9, r10
      76:	ca 04       	cpc	r12, r10
      78:	db 04       	cpc	r13, r11
      7a:	01 05       	cpc	r16, r1
      7c:	27 05       	cpc	r18, r7
      7e:	62 05       	cpc	r22, r2
      80:	9d 05       	cpc	r25, r13
      82:	d8 05       	cpc	r29, r8
      84:	20 06       	cpc	r2, r16
      86:	68 06       	cpc	r6, r24
      88:	b0 06       	cpc	r11, r16
      8a:	eb 06       	cpc	r14, r27
      8c:	26 07       	cpc	r18, r22
      8e:	6e 07       	cpc	r22, r30
      90:	b6 07       	cpc	r27, r22
      92:	eb 07       	cpc	r30, r27
      94:	20 08       	sbc	r2, r0
      96:	47 08       	sbc	r4, r7
      98:	9b 08       	sbc	r9, r11
      9a:	b0 08       	sbc	r11, r0
      9c:	7b 08       	sbc	r7, r11
      9e:	8f 08       	sbc	r8, r15
      a0:	98 08       	sbc	r9, r8
      a2:	c7 08       	sbc	r12, r7
      a4:	d0 08       	sbc	r13, r0
      a6:	e6 08       	sbc	r14, r6
      a8:	ff 08       	sbc	r15, r15
      aa:	18 09       	sbc	r17, r8
      ac:	41 09       	sbc	r20, r1
      ae:	62 09       	sbc	r22, r2
      b0:	77 09       	sbc	r23, r7
      b2:	7d 09       	sbc	r23, r13

000000b4 <__ctors_end>:
      b4:	11 24       	eor	r1, r1
      b6:	1f be       	out	0x3f, r1	; 63
      b8:	cf ef       	ldi	r28, 0xFF	; 255
      ba:	d8 e0       	ldi	r29, 0x08	; 8
      bc:	de bf       	out	0x3e, r29	; 62
      be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
      c0:	25 e0       	ldi	r18, 0x05	; 5
      c2:	a0 e0       	ldi	r26, 0x00	; 0
      c4:	b1 e0       	ldi	r27, 0x01	; 1
      c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
      c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
      ca:	a7 3d       	cpi	r26, 0xD7	; 215
      cc:	b2 07       	cpc	r27, r18
      ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
      d0:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <main>
      d4:	0c 94 25 14 	jmp	0x284a	; 0x284a <_exit>

000000d8 <__bad_interrupt>:
      d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <read>:
*
*       - reg: Reference to the register.
*       - bit: The bit to be read in the referenced register.
********************************************************************************/
static inline bool read(const uint16_t reg, const uint32_t bit)
{
      dc:	cf 93       	push	r28
      de:	df 93       	push	r29
      e0:	00 d0       	rcall	.+0      	; 0xe2 <read+0x6>
      e2:	00 d0       	rcall	.+0      	; 0xe4 <read+0x8>
      e4:	00 d0       	rcall	.+0      	; 0xe6 <read+0xa>
      e6:	cd b7       	in	r28, 0x3d	; 61
      e8:	de b7       	in	r29, 0x3e	; 62
      ea:	9a 83       	std	Y+2, r25	; 0x02
      ec:	89 83       	std	Y+1, r24	; 0x01
      ee:	4b 83       	std	Y+3, r20	; 0x03
      f0:	5c 83       	std	Y+4, r21	; 0x04
      f2:	6d 83       	std	Y+5, r22	; 0x05
      f4:	7e 83       	std	Y+6, r23	; 0x06
	return (bool)(reg & (1 << bit));
      f6:	2b 81       	ldd	r18, Y+3	; 0x03
      f8:	3c 81       	ldd	r19, Y+4	; 0x04
      fa:	81 e0       	ldi	r24, 0x01	; 1
      fc:	90 e0       	ldi	r25, 0x00	; 0
      fe:	02 c0       	rjmp	.+4      	; 0x104 <read+0x28>
     100:	88 0f       	add	r24, r24
     102:	99 1f       	adc	r25, r25
     104:	2a 95       	dec	r18
     106:	e2 f7       	brpl	.-8      	; 0x100 <read+0x24>
     108:	9c 01       	movw	r18, r24
     10a:	89 81       	ldd	r24, Y+1	; 0x01
     10c:	9a 81       	ldd	r25, Y+2	; 0x02
     10e:	82 23       	and	r24, r18
     110:	93 23       	and	r25, r19
     112:	21 e0       	ldi	r18, 0x01	; 1
     114:	89 2b       	or	r24, r25
     116:	09 f4       	brne	.+2      	; 0x11a <read+0x3e>
     118:	20 e0       	ldi	r18, 0x00	; 0
     11a:	82 2f       	mov	r24, r18
}
     11c:	26 96       	adiw	r28, 0x06	; 6
     11e:	0f b6       	in	r0, 0x3f	; 63
     120:	f8 94       	cli
     122:	de bf       	out	0x3e, r29	; 62
     124:	0f be       	out	0x3f, r0	; 63
     126:	cd bf       	out	0x3d, r28	; 61
     128:	df 91       	pop	r29
     12a:	cf 91       	pop	r28
     12c:	08 95       	ret

0000012e <alu>:

uint32_t alu(const uint16_t op,
			 const uint32_t a,
			 const uint32_t b,
			 uint8_t* sr)
{
     12e:	af 92       	push	r10
     130:	bf 92       	push	r11
     132:	cf 92       	push	r12
     134:	df 92       	push	r13
     136:	ef 92       	push	r14
     138:	ff 92       	push	r15
     13a:	0f 93       	push	r16
     13c:	1f 93       	push	r17
     13e:	cf 93       	push	r28
     140:	df 93       	push	r29
     142:	cd b7       	in	r28, 0x3d	; 61
     144:	de b7       	in	r29, 0x3e	; 62
     146:	64 97       	sbiw	r28, 0x14	; 20
     148:	0f b6       	in	r0, 0x3f	; 63
     14a:	f8 94       	cli
     14c:	de bf       	out	0x3e, r29	; 62
     14e:	0f be       	out	0x3f, r0	; 63
     150:	cd bf       	out	0x3d, r28	; 61
     152:	9a 87       	std	Y+10, r25	; 0x0a
     154:	89 87       	std	Y+9, r24	; 0x09
     156:	4b 87       	std	Y+11, r20	; 0x0b
     158:	5c 87       	std	Y+12, r21	; 0x0c
     15a:	6d 87       	std	Y+13, r22	; 0x0d
     15c:	7e 87       	std	Y+14, r23	; 0x0e
     15e:	0f 87       	std	Y+15, r16	; 0x0f
     160:	18 8b       	std	Y+16, r17	; 0x10
     162:	29 8b       	std	Y+17, r18	; 0x11
     164:	3a 8b       	std	Y+18, r19	; 0x12
     166:	fc 8a       	std	Y+20, r15	; 0x14
     168:	eb 8a       	std	Y+19, r14	; 0x13
	uint64_t result = 0x00;
     16a:	19 82       	std	Y+1, r1	; 0x01
     16c:	1a 82       	std	Y+2, r1	; 0x02
     16e:	1b 82       	std	Y+3, r1	; 0x03
     170:	1c 82       	std	Y+4, r1	; 0x04
     172:	1d 82       	std	Y+5, r1	; 0x05
     174:	1e 82       	std	Y+6, r1	; 0x06
     176:	1f 82       	std	Y+7, r1	; 0x07
     178:	18 86       	std	Y+8, r1	; 0x08
	*sr &= ~((1 << S) | (1 << N) | (1 << Z) | (1 << V) | (1 << C));
     17a:	8b 89       	ldd	r24, Y+19	; 0x13
     17c:	9c 89       	ldd	r25, Y+20	; 0x14
     17e:	fc 01       	movw	r30, r24
     180:	80 81       	ld	r24, Z
     182:	28 2f       	mov	r18, r24
     184:	20 7e       	andi	r18, 0xE0	; 224
     186:	8b 89       	ldd	r24, Y+19	; 0x13
     188:	9c 89       	ldd	r25, Y+20	; 0x14
     18a:	fc 01       	movw	r30, r24
     18c:	20 83       	st	Z, r18

	switch(op)
     18e:	89 85       	ldd	r24, Y+9	; 0x09
     190:	9a 85       	ldd	r25, Y+10	; 0x0a
     192:	8f 30       	cpi	r24, 0x0F	; 15
     194:	91 05       	cpc	r25, r1
     196:	09 f4       	brne	.+2      	; 0x19a <alu+0x6c>
     198:	45 c0       	rjmp	.+138    	; 0x224 <alu+0xf6>
     19a:	80 31       	cpi	r24, 0x10	; 16
     19c:	91 05       	cpc	r25, r1
     19e:	30 f4       	brcc	.+12     	; 0x1ac <alu+0x7e>
     1a0:	8d 30       	cpi	r24, 0x0D	; 13
     1a2:	91 05       	cpc	r25, r1
     1a4:	59 f0       	breq	.+22     	; 0x1bc <alu+0x8e>
     1a6:	0e 97       	sbiw	r24, 0x0e	; 14
     1a8:	19 f1       	breq	.+70     	; 0x1f0 <alu+0xc2>
     1aa:	0c c1       	rjmp	.+536    	; 0x3c4 <alu+0x296>
     1ac:	82 31       	cpi	r24, 0x12	; 18
     1ae:	91 05       	cpc	r25, r1
     1b0:	09 f4       	brne	.+2      	; 0x1b4 <alu+0x86>
     1b2:	52 c0       	rjmp	.+164    	; 0x258 <alu+0x12a>
     1b4:	43 97       	sbiw	r24, 0x13	; 19
     1b6:	09 f4       	brne	.+2      	; 0x1ba <alu+0x8c>
     1b8:	9b c0       	rjmp	.+310    	; 0x2f0 <alu+0x1c2>
     1ba:	04 c1       	rjmp	.+520    	; 0x3c4 <alu+0x296>
	{
		case OR:
		{
			result = a | b;
     1bc:	2b 85       	ldd	r18, Y+11	; 0x0b
     1be:	3c 85       	ldd	r19, Y+12	; 0x0c
     1c0:	4d 85       	ldd	r20, Y+13	; 0x0d
     1c2:	5e 85       	ldd	r21, Y+14	; 0x0e
     1c4:	8f 85       	ldd	r24, Y+15	; 0x0f
     1c6:	98 89       	ldd	r25, Y+16	; 0x10
     1c8:	a9 89       	ldd	r26, Y+17	; 0x11
     1ca:	ba 89       	ldd	r27, Y+18	; 0x12
     1cc:	82 2b       	or	r24, r18
     1ce:	93 2b       	or	r25, r19
     1d0:	a4 2b       	or	r26, r20
     1d2:	b5 2b       	or	r27, r21
     1d4:	9c 01       	movw	r18, r24
     1d6:	ad 01       	movw	r20, r26
     1d8:	60 e0       	ldi	r22, 0x00	; 0
     1da:	70 e0       	ldi	r23, 0x00	; 0
     1dc:	cb 01       	movw	r24, r22
     1de:	29 83       	std	Y+1, r18	; 0x01
     1e0:	3a 83       	std	Y+2, r19	; 0x02
     1e2:	4b 83       	std	Y+3, r20	; 0x03
     1e4:	5c 83       	std	Y+4, r21	; 0x04
     1e6:	6d 83       	std	Y+5, r22	; 0x05
     1e8:	7e 83       	std	Y+6, r23	; 0x06
     1ea:	8f 83       	std	Y+7, r24	; 0x07
     1ec:	98 87       	std	Y+8, r25	; 0x08
			break;
     1ee:	ea c0       	rjmp	.+468    	; 0x3c4 <alu+0x296>
		}
		case AND:
		{
			result = a & b;
     1f0:	2b 85       	ldd	r18, Y+11	; 0x0b
     1f2:	3c 85       	ldd	r19, Y+12	; 0x0c
     1f4:	4d 85       	ldd	r20, Y+13	; 0x0d
     1f6:	5e 85       	ldd	r21, Y+14	; 0x0e
     1f8:	8f 85       	ldd	r24, Y+15	; 0x0f
     1fa:	98 89       	ldd	r25, Y+16	; 0x10
     1fc:	a9 89       	ldd	r26, Y+17	; 0x11
     1fe:	ba 89       	ldd	r27, Y+18	; 0x12
     200:	82 23       	and	r24, r18
     202:	93 23       	and	r25, r19
     204:	a4 23       	and	r26, r20
     206:	b5 23       	and	r27, r21
     208:	9c 01       	movw	r18, r24
     20a:	ad 01       	movw	r20, r26
     20c:	60 e0       	ldi	r22, 0x00	; 0
     20e:	70 e0       	ldi	r23, 0x00	; 0
     210:	cb 01       	movw	r24, r22
     212:	29 83       	std	Y+1, r18	; 0x01
     214:	3a 83       	std	Y+2, r19	; 0x02
     216:	4b 83       	std	Y+3, r20	; 0x03
     218:	5c 83       	std	Y+4, r21	; 0x04
     21a:	6d 83       	std	Y+5, r22	; 0x05
     21c:	7e 83       	std	Y+6, r23	; 0x06
     21e:	8f 83       	std	Y+7, r24	; 0x07
     220:	98 87       	std	Y+8, r25	; 0x08
			break;
     222:	d0 c0       	rjmp	.+416    	; 0x3c4 <alu+0x296>
		}
		case XOR:
		{
			result = a ^ b;
     224:	2b 85       	ldd	r18, Y+11	; 0x0b
     226:	3c 85       	ldd	r19, Y+12	; 0x0c
     228:	4d 85       	ldd	r20, Y+13	; 0x0d
     22a:	5e 85       	ldd	r21, Y+14	; 0x0e
     22c:	8f 85       	ldd	r24, Y+15	; 0x0f
     22e:	98 89       	ldd	r25, Y+16	; 0x10
     230:	a9 89       	ldd	r26, Y+17	; 0x11
     232:	ba 89       	ldd	r27, Y+18	; 0x12
     234:	82 27       	eor	r24, r18
     236:	93 27       	eor	r25, r19
     238:	a4 27       	eor	r26, r20
     23a:	b5 27       	eor	r27, r21
     23c:	9c 01       	movw	r18, r24
     23e:	ad 01       	movw	r20, r26
     240:	60 e0       	ldi	r22, 0x00	; 0
     242:	70 e0       	ldi	r23, 0x00	; 0
     244:	cb 01       	movw	r24, r22
     246:	29 83       	std	Y+1, r18	; 0x01
     248:	3a 83       	std	Y+2, r19	; 0x02
     24a:	4b 83       	std	Y+3, r20	; 0x03
     24c:	5c 83       	std	Y+4, r21	; 0x04
     24e:	6d 83       	std	Y+5, r22	; 0x05
     250:	7e 83       	std	Y+6, r23	; 0x06
     252:	8f 83       	std	Y+7, r24	; 0x07
     254:	98 87       	std	Y+8, r25	; 0x08
			break;
     256:	b6 c0       	rjmp	.+364    	; 0x3c4 <alu+0x296>
		}
		case ADD:
		{
			result = a + b;
     258:	2b 85       	ldd	r18, Y+11	; 0x0b
     25a:	3c 85       	ldd	r19, Y+12	; 0x0c
     25c:	4d 85       	ldd	r20, Y+13	; 0x0d
     25e:	5e 85       	ldd	r21, Y+14	; 0x0e
     260:	8f 85       	ldd	r24, Y+15	; 0x0f
     262:	98 89       	ldd	r25, Y+16	; 0x10
     264:	a9 89       	ldd	r26, Y+17	; 0x11
     266:	ba 89       	ldd	r27, Y+18	; 0x12
     268:	82 0f       	add	r24, r18
     26a:	93 1f       	adc	r25, r19
     26c:	a4 1f       	adc	r26, r20
     26e:	b5 1f       	adc	r27, r21
     270:	9c 01       	movw	r18, r24
     272:	ad 01       	movw	r20, r26
     274:	60 e0       	ldi	r22, 0x00	; 0
     276:	70 e0       	ldi	r23, 0x00	; 0
     278:	cb 01       	movw	r24, r22
     27a:	29 83       	std	Y+1, r18	; 0x01
     27c:	3a 83       	std	Y+2, r19	; 0x02
     27e:	4b 83       	std	Y+3, r20	; 0x03
     280:	5c 83       	std	Y+4, r21	; 0x04
     282:	6d 83       	std	Y+5, r22	; 0x05
     284:	7e 83       	std	Y+6, r23	; 0x06
     286:	8f 83       	std	Y+7, r24	; 0x07
     288:	98 87       	std	Y+8, r25	; 0x08

			if ((read(a, 31) == read(b, 31)) && (read(result, 31) != read(a, 31)))
     28a:	8b 85       	ldd	r24, Y+11	; 0x0b
     28c:	9c 85       	ldd	r25, Y+12	; 0x0c
     28e:	4f e1       	ldi	r20, 0x1F	; 31
     290:	50 e0       	ldi	r21, 0x00	; 0
     292:	60 e0       	ldi	r22, 0x00	; 0
     294:	70 e0       	ldi	r23, 0x00	; 0
     296:	0e 94 6e 00 	call	0xdc	; 0xdc <read>
     29a:	18 2f       	mov	r17, r24
     29c:	8f 85       	ldd	r24, Y+15	; 0x0f
     29e:	98 89       	ldd	r25, Y+16	; 0x10
     2a0:	4f e1       	ldi	r20, 0x1F	; 31
     2a2:	50 e0       	ldi	r21, 0x00	; 0
     2a4:	60 e0       	ldi	r22, 0x00	; 0
     2a6:	70 e0       	ldi	r23, 0x00	; 0
     2a8:	0e 94 6e 00 	call	0xdc	; 0xdc <read>
     2ac:	18 17       	cp	r17, r24
     2ae:	09 f0       	breq	.+2      	; 0x2b2 <alu+0x184>
     2b0:	86 c0       	rjmp	.+268    	; 0x3be <alu+0x290>
     2b2:	89 81       	ldd	r24, Y+1	; 0x01
     2b4:	9a 81       	ldd	r25, Y+2	; 0x02
     2b6:	4f e1       	ldi	r20, 0x1F	; 31
     2b8:	50 e0       	ldi	r21, 0x00	; 0
     2ba:	60 e0       	ldi	r22, 0x00	; 0
     2bc:	70 e0       	ldi	r23, 0x00	; 0
     2be:	0e 94 6e 00 	call	0xdc	; 0xdc <read>
     2c2:	18 2f       	mov	r17, r24
     2c4:	8b 85       	ldd	r24, Y+11	; 0x0b
     2c6:	9c 85       	ldd	r25, Y+12	; 0x0c
     2c8:	4f e1       	ldi	r20, 0x1F	; 31
     2ca:	50 e0       	ldi	r21, 0x00	; 0
     2cc:	60 e0       	ldi	r22, 0x00	; 0
     2ce:	70 e0       	ldi	r23, 0x00	; 0
     2d0:	0e 94 6e 00 	call	0xdc	; 0xdc <read>
     2d4:	18 17       	cp	r17, r24
     2d6:	09 f4       	brne	.+2      	; 0x2da <alu+0x1ac>
     2d8:	72 c0       	rjmp	.+228    	; 0x3be <alu+0x290>
			{
				set(*sr, V);
     2da:	8b 89       	ldd	r24, Y+19	; 0x13
     2dc:	9c 89       	ldd	r25, Y+20	; 0x14
     2de:	fc 01       	movw	r30, r24
     2e0:	80 81       	ld	r24, Z
     2e2:	28 2f       	mov	r18, r24
     2e4:	22 60       	ori	r18, 0x02	; 2
     2e6:	8b 89       	ldd	r24, Y+19	; 0x13
     2e8:	9c 89       	ldd	r25, Y+20	; 0x14
     2ea:	fc 01       	movw	r30, r24
     2ec:	20 83       	st	Z, r18
			}

			break;
     2ee:	67 c0       	rjmp	.+206    	; 0x3be <alu+0x290>
		}
		case SUB:
		{
			result = a + (pow(2, 32) - b);
     2f0:	6b 85       	ldd	r22, Y+11	; 0x0b
     2f2:	7c 85       	ldd	r23, Y+12	; 0x0c
     2f4:	8d 85       	ldd	r24, Y+13	; 0x0d
     2f6:	9e 85       	ldd	r25, Y+14	; 0x0e
     2f8:	0e 94 4a 13 	call	0x2694	; 0x2694 <__floatunsisf>
     2fc:	6b 01       	movw	r12, r22
     2fe:	7c 01       	movw	r14, r24
     300:	6f 85       	ldd	r22, Y+15	; 0x0f
     302:	78 89       	ldd	r23, Y+16	; 0x10
     304:	89 89       	ldd	r24, Y+17	; 0x11
     306:	9a 89       	ldd	r25, Y+18	; 0x12
     308:	0e 94 4a 13 	call	0x2694	; 0x2694 <__floatunsisf>
     30c:	dc 01       	movw	r26, r24
     30e:	cb 01       	movw	r24, r22
     310:	9c 01       	movw	r18, r24
     312:	ad 01       	movw	r20, r26
     314:	60 e0       	ldi	r22, 0x00	; 0
     316:	70 e0       	ldi	r23, 0x00	; 0
     318:	80 e8       	ldi	r24, 0x80	; 128
     31a:	9f e4       	ldi	r25, 0x4F	; 79
     31c:	0e 94 a1 12 	call	0x2542	; 0x2542 <__subsf3>
     320:	dc 01       	movw	r26, r24
     322:	cb 01       	movw	r24, r22
     324:	9c 01       	movw	r18, r24
     326:	ad 01       	movw	r20, r26
     328:	c7 01       	movw	r24, r14
     32a:	b6 01       	movw	r22, r12
     32c:	0e 94 a2 12 	call	0x2544	; 0x2544 <__addsf3>
     330:	dc 01       	movw	r26, r24
     332:	cb 01       	movw	r24, r22
     334:	bc 01       	movw	r22, r24
     336:	cd 01       	movw	r24, r26
     338:	0e 94 13 13 	call	0x2626	; 0x2626 <__fixunssfdi>
     33c:	a2 2e       	mov	r10, r18
     33e:	b3 2e       	mov	r11, r19
     340:	c4 2e       	mov	r12, r20
     342:	d5 2e       	mov	r13, r21
     344:	e6 2e       	mov	r14, r22
     346:	f7 2e       	mov	r15, r23
     348:	08 2f       	mov	r16, r24
     34a:	19 2f       	mov	r17, r25
     34c:	a9 82       	std	Y+1, r10	; 0x01
     34e:	ba 82       	std	Y+2, r11	; 0x02
     350:	cb 82       	std	Y+3, r12	; 0x03
     352:	dc 82       	std	Y+4, r13	; 0x04
     354:	ed 82       	std	Y+5, r14	; 0x05
     356:	fe 82       	std	Y+6, r15	; 0x06
     358:	0f 83       	std	Y+7, r16	; 0x07
     35a:	18 87       	std	Y+8, r17	; 0x08

			if ((read(a, 31) == read(b, 31)) && (read(result, 31) != read(a, 31)))
     35c:	8b 85       	ldd	r24, Y+11	; 0x0b
     35e:	9c 85       	ldd	r25, Y+12	; 0x0c
     360:	4f e1       	ldi	r20, 0x1F	; 31
     362:	50 e0       	ldi	r21, 0x00	; 0
     364:	60 e0       	ldi	r22, 0x00	; 0
     366:	70 e0       	ldi	r23, 0x00	; 0
     368:	0e 94 6e 00 	call	0xdc	; 0xdc <read>
     36c:	18 2f       	mov	r17, r24
     36e:	8f 85       	ldd	r24, Y+15	; 0x0f
     370:	98 89       	ldd	r25, Y+16	; 0x10
     372:	4f e1       	ldi	r20, 0x1F	; 31
     374:	50 e0       	ldi	r21, 0x00	; 0
     376:	60 e0       	ldi	r22, 0x00	; 0
     378:	70 e0       	ldi	r23, 0x00	; 0
     37a:	0e 94 6e 00 	call	0xdc	; 0xdc <read>
     37e:	18 17       	cp	r17, r24
     380:	01 f5       	brne	.+64     	; 0x3c2 <alu+0x294>
     382:	89 81       	ldd	r24, Y+1	; 0x01
     384:	9a 81       	ldd	r25, Y+2	; 0x02
     386:	4f e1       	ldi	r20, 0x1F	; 31
     388:	50 e0       	ldi	r21, 0x00	; 0
     38a:	60 e0       	ldi	r22, 0x00	; 0
     38c:	70 e0       	ldi	r23, 0x00	; 0
     38e:	0e 94 6e 00 	call	0xdc	; 0xdc <read>
     392:	18 2f       	mov	r17, r24
     394:	8b 85       	ldd	r24, Y+11	; 0x0b
     396:	9c 85       	ldd	r25, Y+12	; 0x0c
     398:	4f e1       	ldi	r20, 0x1F	; 31
     39a:	50 e0       	ldi	r21, 0x00	; 0
     39c:	60 e0       	ldi	r22, 0x00	; 0
     39e:	70 e0       	ldi	r23, 0x00	; 0
     3a0:	0e 94 6e 00 	call	0xdc	; 0xdc <read>
     3a4:	18 17       	cp	r17, r24
     3a6:	69 f0       	breq	.+26     	; 0x3c2 <alu+0x294>
			{
				set(*sr, V);
     3a8:	8b 89       	ldd	r24, Y+19	; 0x13
     3aa:	9c 89       	ldd	r25, Y+20	; 0x14
     3ac:	fc 01       	movw	r30, r24
     3ae:	80 81       	ld	r24, Z
     3b0:	28 2f       	mov	r18, r24
     3b2:	22 60       	ori	r18, 0x02	; 2
     3b4:	8b 89       	ldd	r24, Y+19	; 0x13
     3b6:	9c 89       	ldd	r25, Y+20	; 0x14
     3b8:	fc 01       	movw	r30, r24
     3ba:	20 83       	st	Z, r18
			}

			break;
     3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <alu+0x294>
			if ((read(a, 31) == read(b, 31)) && (read(result, 31) != read(a, 31)))
			{
				set(*sr, V);
			}

			break;
     3be:	00 00       	nop
     3c0:	01 c0       	rjmp	.+2      	; 0x3c4 <alu+0x296>
			if ((read(a, 31) == read(b, 31)) && (read(result, 31) != read(a, 31)))
			{
				set(*sr, V);
			}

			break;
     3c2:	00 00       	nop
		}
	}

	if (read(result, 32))           set(*sr, C);
     3c4:	89 81       	ldd	r24, Y+1	; 0x01
     3c6:	9a 81       	ldd	r25, Y+2	; 0x02
     3c8:	40 e2       	ldi	r20, 0x20	; 32
     3ca:	50 e0       	ldi	r21, 0x00	; 0
     3cc:	60 e0       	ldi	r22, 0x00	; 0
     3ce:	70 e0       	ldi	r23, 0x00	; 0
     3d0:	0e 94 6e 00 	call	0xdc	; 0xdc <read>
     3d4:	88 23       	and	r24, r24
     3d6:	51 f0       	breq	.+20     	; 0x3ec <alu+0x2be>
     3d8:	8b 89       	ldd	r24, Y+19	; 0x13
     3da:	9c 89       	ldd	r25, Y+20	; 0x14
     3dc:	fc 01       	movw	r30, r24
     3de:	80 81       	ld	r24, Z
     3e0:	28 2f       	mov	r18, r24
     3e2:	21 60       	ori	r18, 0x01	; 1
     3e4:	8b 89       	ldd	r24, Y+19	; 0x13
     3e6:	9c 89       	ldd	r25, Y+20	; 0x14
     3e8:	fc 01       	movw	r30, r24
     3ea:	20 83       	st	Z, r18
	if (read(result, 31))           set(*sr, N);
     3ec:	89 81       	ldd	r24, Y+1	; 0x01
     3ee:	9a 81       	ldd	r25, Y+2	; 0x02
     3f0:	4f e1       	ldi	r20, 0x1F	; 31
     3f2:	50 e0       	ldi	r21, 0x00	; 0
     3f4:	60 e0       	ldi	r22, 0x00	; 0
     3f6:	70 e0       	ldi	r23, 0x00	; 0
     3f8:	0e 94 6e 00 	call	0xdc	; 0xdc <read>
     3fc:	88 23       	and	r24, r24
     3fe:	51 f0       	breq	.+20     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
     400:	8b 89       	ldd	r24, Y+19	; 0x13
     402:	9c 89       	ldd	r25, Y+20	; 0x14
     404:	fc 01       	movw	r30, r24
     406:	80 81       	ld	r24, Z
     408:	28 2f       	mov	r18, r24
     40a:	28 60       	ori	r18, 0x08	; 8
     40c:	8b 89       	ldd	r24, Y+19	; 0x13
     40e:	9c 89       	ldd	r25, Y+20	; 0x14
     410:	fc 01       	movw	r30, r24
     412:	20 83       	st	Z, r18
	if ((uint32_t)(result) == 0)      set(*sr, Z);
     414:	89 81       	ldd	r24, Y+1	; 0x01
     416:	9a 81       	ldd	r25, Y+2	; 0x02
     418:	ab 81       	ldd	r26, Y+3	; 0x03
     41a:	bc 81       	ldd	r27, Y+4	; 0x04
     41c:	89 2b       	or	r24, r25
     41e:	8a 2b       	or	r24, r26
     420:	8b 2b       	or	r24, r27
     422:	51 f4       	brne	.+20     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
     424:	8b 89       	ldd	r24, Y+19	; 0x13
     426:	9c 89       	ldd	r25, Y+20	; 0x14
     428:	fc 01       	movw	r30, r24
     42a:	80 81       	ld	r24, Z
     42c:	28 2f       	mov	r18, r24
     42e:	24 60       	ori	r18, 0x04	; 4
     430:	8b 89       	ldd	r24, Y+19	; 0x13
     432:	9c 89       	ldd	r25, Y+20	; 0x14
     434:	fc 01       	movw	r30, r24
     436:	20 83       	st	Z, r18
	if (read(*sr, N) != read(*sr, V)) set(*sr, S);
     438:	8b 89       	ldd	r24, Y+19	; 0x13
     43a:	9c 89       	ldd	r25, Y+20	; 0x14
     43c:	fc 01       	movw	r30, r24
     43e:	80 81       	ld	r24, Z
     440:	88 2f       	mov	r24, r24
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	43 e0       	ldi	r20, 0x03	; 3
     446:	50 e0       	ldi	r21, 0x00	; 0
     448:	60 e0       	ldi	r22, 0x00	; 0
     44a:	70 e0       	ldi	r23, 0x00	; 0
     44c:	0e 94 6e 00 	call	0xdc	; 0xdc <read>
     450:	18 2f       	mov	r17, r24
     452:	8b 89       	ldd	r24, Y+19	; 0x13
     454:	9c 89       	ldd	r25, Y+20	; 0x14
     456:	fc 01       	movw	r30, r24
     458:	80 81       	ld	r24, Z
     45a:	88 2f       	mov	r24, r24
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	41 e0       	ldi	r20, 0x01	; 1
     460:	50 e0       	ldi	r21, 0x00	; 0
     462:	60 e0       	ldi	r22, 0x00	; 0
     464:	70 e0       	ldi	r23, 0x00	; 0
     466:	0e 94 6e 00 	call	0xdc	; 0xdc <read>
     46a:	18 17       	cp	r17, r24
     46c:	51 f0       	breq	.+20     	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
     46e:	8b 89       	ldd	r24, Y+19	; 0x13
     470:	9c 89       	ldd	r25, Y+20	; 0x14
     472:	fc 01       	movw	r30, r24
     474:	80 81       	ld	r24, Z
     476:	28 2f       	mov	r18, r24
     478:	20 61       	ori	r18, 0x10	; 16
     47a:	8b 89       	ldd	r24, Y+19	; 0x13
     47c:	9c 89       	ldd	r25, Y+20	; 0x14
     47e:	fc 01       	movw	r30, r24
     480:	20 83       	st	Z, r18

	return result;
     482:	89 81       	ldd	r24, Y+1	; 0x01
     484:	9a 81       	ldd	r25, Y+2	; 0x02
     486:	ab 81       	ldd	r26, Y+3	; 0x03
     488:	bc 81       	ldd	r27, Y+4	; 0x04
     48a:	bc 01       	movw	r22, r24
     48c:	cd 01       	movw	r24, r26
     48e:	64 96       	adiw	r28, 0x14	; 20
     490:	0f b6       	in	r0, 0x3f	; 63
     492:	f8 94       	cli
     494:	de bf       	out	0x3e, r29	; 62
     496:	0f be       	out	0x3f, r0	; 63
     498:	cd bf       	out	0x3d, r28	; 61
     49a:	df 91       	pop	r29
     49c:	cf 91       	pop	r28
     49e:	1f 91       	pop	r17
     4a0:	0f 91       	pop	r16
     4a2:	ff 90       	pop	r15
     4a4:	ef 90       	pop	r14
     4a6:	df 90       	pop	r13
     4a8:	cf 90       	pop	r12
     4aa:	bf 90       	pop	r11
     4ac:	af 90       	pop	r10
     4ae:	08 95       	ret

000004b0 <read>:
*
*       - reg: Reference to the register.
*       - bit: The bit to be read in the referenced register.
********************************************************************************/
static inline bool read(const uint16_t reg, const uint32_t bit)
{
     4b0:	cf 93       	push	r28
     4b2:	df 93       	push	r29
     4b4:	00 d0       	rcall	.+0      	; 0x4b6 <read+0x6>
     4b6:	00 d0       	rcall	.+0      	; 0x4b8 <read+0x8>
     4b8:	00 d0       	rcall	.+0      	; 0x4ba <read+0xa>
     4ba:	cd b7       	in	r28, 0x3d	; 61
     4bc:	de b7       	in	r29, 0x3e	; 62
     4be:	9a 83       	std	Y+2, r25	; 0x02
     4c0:	89 83       	std	Y+1, r24	; 0x01
     4c2:	4b 83       	std	Y+3, r20	; 0x03
     4c4:	5c 83       	std	Y+4, r21	; 0x04
     4c6:	6d 83       	std	Y+5, r22	; 0x05
     4c8:	7e 83       	std	Y+6, r23	; 0x06
	return (bool)(reg & (1 << bit));
     4ca:	2b 81       	ldd	r18, Y+3	; 0x03
     4cc:	3c 81       	ldd	r19, Y+4	; 0x04
     4ce:	81 e0       	ldi	r24, 0x01	; 1
     4d0:	90 e0       	ldi	r25, 0x00	; 0
     4d2:	02 c0       	rjmp	.+4      	; 0x4d8 <read+0x28>
     4d4:	88 0f       	add	r24, r24
     4d6:	99 1f       	adc	r25, r25
     4d8:	2a 95       	dec	r18
     4da:	e2 f7       	brpl	.-8      	; 0x4d4 <read+0x24>
     4dc:	9c 01       	movw	r18, r24
     4de:	89 81       	ldd	r24, Y+1	; 0x01
     4e0:	9a 81       	ldd	r25, Y+2	; 0x02
     4e2:	82 23       	and	r24, r18
     4e4:	93 23       	and	r25, r19
     4e6:	21 e0       	ldi	r18, 0x01	; 1
     4e8:	89 2b       	or	r24, r25
     4ea:	09 f4       	brne	.+2      	; 0x4ee <read+0x3e>
     4ec:	20 e0       	ldi	r18, 0x00	; 0
     4ee:	82 2f       	mov	r24, r18
}
     4f0:	26 96       	adiw	r28, 0x06	; 6
     4f2:	0f b6       	in	r0, 0x3f	; 63
     4f4:	f8 94       	cli
     4f6:	de bf       	out	0x3e, r29	; 62
     4f8:	0f be       	out	0x3f, r0	; 63
     4fa:	cd bf       	out	0x3d, r28	; 61
     4fc:	df 91       	pop	r29
     4fe:	cf 91       	pop	r28
     500:	08 95       	ret

00000502 <control_unit_reset>:
static uint32_t current_state;
static volatile uint32_t pina_last_value;
static uint32_t reg[CPU_REGISTER_ADDRESS_WIDTH];

void control_unit_reset(void)
{
     502:	cf 93       	push	r28
     504:	df 93       	push	r29
     506:	cd b7       	in	r28, 0x3d	; 61
     508:	de b7       	in	r29, 0x3e	; 62
	pc = 0x00;
     50a:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     50e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	ir = 0x00;
     512:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <ir>
     516:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <ir+0x1>
     51a:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <ir+0x2>
     51e:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <ir+0x3>
     522:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <ir+0x4>
     526:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <ir+0x5>
     52a:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <ir+0x6>
     52e:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <ir+0x7>
	sr = 0x00;
     532:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <sr>

	op_code = 0x00;
     536:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <op_code+0x1>
     53a:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <op_code>
	op1 = 0x00;
     53e:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <op1+0x1>
     542:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <op1>
	op2 = 0x00;
     546:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <op2>
     54a:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <op2+0x1>
     54e:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <op2+0x2>
     552:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <op2+0x3>

	current_state = CPU_STATE_FETCH;
     556:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <current_state>
     55a:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <current_state+0x1>
     55e:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <current_state+0x2>
     562:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <current_state+0x3>
	pina_last_value = 0x00;
     566:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <pina_last_value>
     56a:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <pina_last_value+0x1>
     56e:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <pina_last_value+0x2>
     572:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <pina_last_value+0x3>

	cpu_registers_clear();
     576:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <cpu_registers_clear>
	program_memory_write();
     57a:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <program_memory_write>
	data_memory_reset();
     57e:	0e 94 c8 0b 	call	0x1790	; 0x1790 <data_memory_reset>
	stack_reset();
     582:	0e 94 de 11 	call	0x23bc	; 0x23bc <stack_reset>
	io_reset();
     586:	0e 94 b5 09 	call	0x136a	; 0x136a <io_reset>
	return;
     58a:	00 00       	nop
}
     58c:	df 91       	pop	r29
     58e:	cf 91       	pop	r28
     590:	08 95       	ret

00000592 <control_unit_run>:

void control_unit_run(void)
{
     592:	af 92       	push	r10
     594:	bf 92       	push	r11
     596:	cf 92       	push	r12
     598:	df 92       	push	r13
     59a:	ef 92       	push	r14
     59c:	ff 92       	push	r15
     59e:	0f 93       	push	r16
     5a0:	1f 93       	push	r17
     5a2:	cf 93       	push	r28
     5a4:	df 93       	push	r29
     5a6:	00 d0       	rcall	.+0      	; 0x5a8 <control_unit_run+0x16>
     5a8:	00 d0       	rcall	.+0      	; 0x5aa <control_unit_run+0x18>
     5aa:	cd b7       	in	r28, 0x3d	; 61
     5ac:	de b7       	in	r29, 0x3e	; 62
	switch(current_state)
     5ae:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <current_state>
     5b2:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <current_state+0x1>
     5b6:	a0 91 15 01 	lds	r26, 0x0115	; 0x800115 <current_state+0x2>
     5ba:	b0 91 16 01 	lds	r27, 0x0116	; 0x800116 <current_state+0x3>
     5be:	81 30       	cpi	r24, 0x01	; 1
     5c0:	91 05       	cpc	r25, r1
     5c2:	a1 05       	cpc	r26, r1
     5c4:	b1 05       	cpc	r27, r1
     5c6:	e9 f1       	breq	.+122    	; 0x642 <control_unit_run+0xb0>
     5c8:	81 30       	cpi	r24, 0x01	; 1
     5ca:	91 05       	cpc	r25, r1
     5cc:	a1 05       	cpc	r26, r1
     5ce:	b1 05       	cpc	r27, r1
     5d0:	30 f0       	brcs	.+12     	; 0x5de <control_unit_run+0x4c>
     5d2:	02 97       	sbiw	r24, 0x02	; 2
     5d4:	a1 05       	cpc	r26, r1
     5d6:	b1 05       	cpc	r27, r1
     5d8:	09 f4       	brne	.+2      	; 0x5dc <control_unit_run+0x4a>
     5da:	aa c0       	rjmp	.+340    	; 0x730 <control_unit_run+0x19e>
     5dc:	af c6       	rjmp	.+3422   	; 0x133c <__stack+0xa3d>
	{
	   case CPU_STATE_FETCH:
	   {
		  ir = program_memory_read(pc++);
     5de:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     5e2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     5e6:	9c 01       	movw	r18, r24
     5e8:	2f 5f       	subi	r18, 0xFF	; 255
     5ea:	3f 4f       	sbci	r19, 0xFF	; 255
     5ec:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     5f0:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__DATA_REGION_ORIGIN__>
     5f4:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <program_memory_read>
     5f8:	a2 2e       	mov	r10, r18
     5fa:	b3 2e       	mov	r11, r19
     5fc:	c4 2e       	mov	r12, r20
     5fe:	d5 2e       	mov	r13, r21
     600:	e6 2e       	mov	r14, r22
     602:	f7 2e       	mov	r15, r23
     604:	08 2f       	mov	r16, r24
     606:	19 2f       	mov	r17, r25
     608:	a0 92 02 01 	sts	0x0102, r10	; 0x800102 <ir>
     60c:	b0 92 03 01 	sts	0x0103, r11	; 0x800103 <ir+0x1>
     610:	c0 92 04 01 	sts	0x0104, r12	; 0x800104 <ir+0x2>
     614:	d0 92 05 01 	sts	0x0105, r13	; 0x800105 <ir+0x3>
     618:	e0 92 06 01 	sts	0x0106, r14	; 0x800106 <ir+0x4>
     61c:	f0 92 07 01 	sts	0x0107, r15	; 0x800107 <ir+0x5>
     620:	00 93 08 01 	sts	0x0108, r16	; 0x800108 <ir+0x6>
     624:	10 93 09 01 	sts	0x0109, r17	; 0x800109 <ir+0x7>
		  current_state = CPU_STATE_DECODE;
     628:	81 e0       	ldi	r24, 0x01	; 1
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	a0 e0       	ldi	r26, 0x00	; 0
     62e:	b0 e0       	ldi	r27, 0x00	; 0
     630:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <current_state>
     634:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <current_state+0x1>
     638:	a0 93 15 01 	sts	0x0115, r26	; 0x800115 <current_state+0x2>
     63c:	b0 93 16 01 	sts	0x0116, r27	; 0x800116 <current_state+0x3>
		  break;
     640:	80 c6       	rjmp	.+3328   	; 0x1342 <__stack+0xa43>
	   }	
	   case CPU_STATE_DECODE:
	   {
		   op_code = (uint16_t)(ir >> 48);
     642:	a0 90 02 01 	lds	r10, 0x0102	; 0x800102 <ir>
     646:	b0 90 03 01 	lds	r11, 0x0103	; 0x800103 <ir+0x1>
     64a:	c0 90 04 01 	lds	r12, 0x0104	; 0x800104 <ir+0x2>
     64e:	d0 90 05 01 	lds	r13, 0x0105	; 0x800105 <ir+0x3>
     652:	e0 90 06 01 	lds	r14, 0x0106	; 0x800106 <ir+0x4>
     656:	f0 90 07 01 	lds	r15, 0x0107	; 0x800107 <ir+0x5>
     65a:	00 91 08 01 	lds	r16, 0x0108	; 0x800108 <ir+0x6>
     65e:	10 91 09 01 	lds	r17, 0x0109	; 0x800109 <ir+0x7>
     662:	2a 2d       	mov	r18, r10
     664:	3b 2d       	mov	r19, r11
     666:	4c 2d       	mov	r20, r12
     668:	5d 2d       	mov	r21, r13
     66a:	6e 2d       	mov	r22, r14
     66c:	7f 2d       	mov	r23, r15
     66e:	80 2f       	mov	r24, r16
     670:	91 2f       	mov	r25, r17
     672:	00 e3       	ldi	r16, 0x30	; 48
     674:	0e 94 09 14 	call	0x2812	; 0x2812 <__lshrdi3>
     678:	a2 2e       	mov	r10, r18
     67a:	b3 2e       	mov	r11, r19
     67c:	c4 2e       	mov	r12, r20
     67e:	d5 2e       	mov	r13, r21
     680:	e6 2e       	mov	r14, r22
     682:	f7 2e       	mov	r15, r23
     684:	08 2f       	mov	r16, r24
     686:	19 2f       	mov	r17, r25
     688:	c5 01       	movw	r24, r10
     68a:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <op_code+0x1>
     68e:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <op_code>
		   op1     = (uint16_t)(ir >> 32);
     692:	a0 90 02 01 	lds	r10, 0x0102	; 0x800102 <ir>
     696:	b0 90 03 01 	lds	r11, 0x0103	; 0x800103 <ir+0x1>
     69a:	c0 90 04 01 	lds	r12, 0x0104	; 0x800104 <ir+0x2>
     69e:	d0 90 05 01 	lds	r13, 0x0105	; 0x800105 <ir+0x3>
     6a2:	e0 90 06 01 	lds	r14, 0x0106	; 0x800106 <ir+0x4>
     6a6:	f0 90 07 01 	lds	r15, 0x0107	; 0x800107 <ir+0x5>
     6aa:	00 91 08 01 	lds	r16, 0x0108	; 0x800108 <ir+0x6>
     6ae:	10 91 09 01 	lds	r17, 0x0109	; 0x800109 <ir+0x7>
     6b2:	2a 2d       	mov	r18, r10
     6b4:	3b 2d       	mov	r19, r11
     6b6:	4c 2d       	mov	r20, r12
     6b8:	5d 2d       	mov	r21, r13
     6ba:	6e 2d       	mov	r22, r14
     6bc:	7f 2d       	mov	r23, r15
     6be:	80 2f       	mov	r24, r16
     6c0:	91 2f       	mov	r25, r17
     6c2:	00 e2       	ldi	r16, 0x20	; 32
     6c4:	0e 94 09 14 	call	0x2812	; 0x2812 <__lshrdi3>
     6c8:	a2 2e       	mov	r10, r18
     6ca:	b3 2e       	mov	r11, r19
     6cc:	c4 2e       	mov	r12, r20
     6ce:	d5 2e       	mov	r13, r21
     6d0:	e6 2e       	mov	r14, r22
     6d2:	f7 2e       	mov	r15, r23
     6d4:	08 2f       	mov	r16, r24
     6d6:	19 2f       	mov	r17, r25
     6d8:	c5 01       	movw	r24, r10
     6da:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <op1+0x1>
     6de:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <op1>
		   op2     = (uint32_t)(ir);
     6e2:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <ir>
     6e6:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <ir+0x1>
     6ea:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <ir+0x2>
     6ee:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <ir+0x3>
     6f2:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <ir+0x4>
     6f6:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <ir+0x5>
     6fa:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <ir+0x6>
     6fe:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <ir+0x7>
     702:	da 01       	movw	r26, r20
     704:	c9 01       	movw	r24, r18
     706:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <op2>
     70a:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <op2+0x1>
     70e:	a0 93 11 01 	sts	0x0111, r26	; 0x800111 <op2+0x2>
     712:	b0 93 12 01 	sts	0x0112, r27	; 0x800112 <op2+0x3>
		   current_state = CPU_STATE_EXECUTE;
     716:	82 e0       	ldi	r24, 0x02	; 2
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	a0 e0       	ldi	r26, 0x00	; 0
     71c:	b0 e0       	ldi	r27, 0x00	; 0
     71e:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <current_state>
     722:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <current_state+0x1>
     726:	a0 93 15 01 	sts	0x0115, r26	; 0x800115 <current_state+0x2>
     72a:	b0 93 16 01 	sts	0x0116, r27	; 0x800116 <current_state+0x3>
		   break;
     72e:	09 c6       	rjmp	.+3090   	; 0x1342 <__stack+0xa43>
	   }
	   case CPU_STATE_EXECUTE:
	   {
		   switch (op_code)
     730:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <op_code>
     734:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <op_code+0x1>
     738:	cc 01       	movw	r24, r24
     73a:	a0 e0       	ldi	r26, 0x00	; 0
     73c:	b0 e0       	ldi	r27, 0x00	; 0
     73e:	40 e0       	ldi	r20, 0x00	; 0
     740:	50 e0       	ldi	r21, 0x00	; 0
     742:	25 e2       	ldi	r18, 0x25	; 37
     744:	30 e0       	ldi	r19, 0x00	; 0
     746:	84 1b       	sub	r24, r20
     748:	95 0b       	sbc	r25, r21
     74a:	28 17       	cp	r18, r24
     74c:	39 07       	cpc	r19, r25
     74e:	08 f4       	brcc	.+2      	; 0x752 <control_unit_run+0x1c0>
     750:	da c5       	rjmp	.+2996   	; 0x1306 <__stack+0xa07>
     752:	8c 5c       	subi	r24, 0xCC	; 204
     754:	9f 4f       	sbci	r25, 0xFF	; 255
     756:	fc 01       	movw	r30, r24
     758:	0c 94 e8 13 	jmp	0x27d0	; 0x27d0 <__tablejump2__>
			   {
				   break;
			   }
			   case LDI:
			   {
				   reg[(uint8_t)(op1)] = op2;
     75c:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <op1>
     760:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <op1+0x1>
     764:	9c 01       	movw	r18, r24
     766:	33 27       	eor	r19, r19
     768:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <op2>
     76c:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <op2+0x1>
     770:	a0 91 11 01 	lds	r26, 0x0111	; 0x800111 <op2+0x2>
     774:	b0 91 12 01 	lds	r27, 0x0112	; 0x800112 <op2+0x3>
     778:	22 0f       	add	r18, r18
     77a:	33 1f       	adc	r19, r19
     77c:	22 0f       	add	r18, r18
     77e:	33 1f       	adc	r19, r19
     780:	25 5e       	subi	r18, 0xE5	; 229
     782:	3e 4f       	sbci	r19, 0xFE	; 254
     784:	f9 01       	movw	r30, r18
     786:	80 83       	st	Z, r24
     788:	91 83       	std	Z+1, r25	; 0x01
     78a:	a2 83       	std	Z+2, r26	; 0x02
     78c:	b3 83       	std	Z+3, r27	; 0x03
				   break;
     78e:	cb c5       	rjmp	.+2966   	; 0x1326 <__stack+0xa27>
			   }
			   case MOV:
			   {
				   reg[(uint8_t)(op1)] = reg[(uint8_t)(op2)];
     790:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <op1>
     794:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <op1+0x1>
     798:	9c 01       	movw	r18, r24
     79a:	33 27       	eor	r19, r19
     79c:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <op2>
     7a0:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <op2+0x1>
     7a4:	a0 91 11 01 	lds	r26, 0x0111	; 0x800111 <op2+0x2>
     7a8:	b0 91 12 01 	lds	r27, 0x0112	; 0x800112 <op2+0x3>
     7ac:	88 2f       	mov	r24, r24
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	88 0f       	add	r24, r24
     7b2:	99 1f       	adc	r25, r25
     7b4:	88 0f       	add	r24, r24
     7b6:	99 1f       	adc	r25, r25
     7b8:	85 5e       	subi	r24, 0xE5	; 229
     7ba:	9e 4f       	sbci	r25, 0xFE	; 254
     7bc:	fc 01       	movw	r30, r24
     7be:	80 81       	ld	r24, Z
     7c0:	91 81       	ldd	r25, Z+1	; 0x01
     7c2:	a2 81       	ldd	r26, Z+2	; 0x02
     7c4:	b3 81       	ldd	r27, Z+3	; 0x03
     7c6:	22 0f       	add	r18, r18
     7c8:	33 1f       	adc	r19, r19
     7ca:	22 0f       	add	r18, r18
     7cc:	33 1f       	adc	r19, r19
     7ce:	25 5e       	subi	r18, 0xE5	; 229
     7d0:	3e 4f       	sbci	r19, 0xFE	; 254
     7d2:	f9 01       	movw	r30, r18
     7d4:	80 83       	st	Z, r24
     7d6:	91 83       	std	Z+1, r25	; 0x01
     7d8:	a2 83       	std	Z+2, r26	; 0x02
     7da:	b3 83       	std	Z+3, r27	; 0x03
				   break;
     7dc:	a4 c5       	rjmp	.+2888   	; 0x1326 <__stack+0xa27>
			   }
			   case OUT:
			   {
				   if (op1 == PINA)
     7de:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <op1>
     7e2:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <op1+0x1>
     7e6:	02 97       	sbiw	r24, 0x02	; 2
     7e8:	a1 f5       	brne	.+104    	; 0x852 <__DATA_REGION_LENGTH__+0x52>
				   {
					   const uint32_t porta = data_memory_read(PORTA) ^ reg[(uint8_t)(op2)];
     7ea:	61 e0       	ldi	r22, 0x01	; 1
     7ec:	70 e0       	ldi	r23, 0x00	; 0
     7ee:	80 e0       	ldi	r24, 0x00	; 0
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	0e 94 37 0c 	call	0x186e	; 0x186e <data_memory_read>
     7f6:	9c 01       	movw	r18, r24
     7f8:	99 0f       	add	r25, r25
     7fa:	44 0b       	sbc	r20, r20
     7fc:	55 0b       	sbc	r21, r21
     7fe:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <op2>
     802:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <op2+0x1>
     806:	a0 91 11 01 	lds	r26, 0x0111	; 0x800111 <op2+0x2>
     80a:	b0 91 12 01 	lds	r27, 0x0112	; 0x800112 <op2+0x3>
     80e:	88 2f       	mov	r24, r24
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	88 0f       	add	r24, r24
     814:	99 1f       	adc	r25, r25
     816:	88 0f       	add	r24, r24
     818:	99 1f       	adc	r25, r25
     81a:	85 5e       	subi	r24, 0xE5	; 229
     81c:	9e 4f       	sbci	r25, 0xFE	; 254
     81e:	fc 01       	movw	r30, r24
     820:	80 81       	ld	r24, Z
     822:	91 81       	ldd	r25, Z+1	; 0x01
     824:	a2 81       	ldd	r26, Z+2	; 0x02
     826:	b3 81       	ldd	r27, Z+3	; 0x03
     828:	82 27       	eor	r24, r18
     82a:	93 27       	eor	r25, r19
     82c:	a4 27       	eor	r26, r20
     82e:	b5 27       	eor	r27, r21
     830:	89 83       	std	Y+1, r24	; 0x01
     832:	9a 83       	std	Y+2, r25	; 0x02
     834:	ab 83       	std	Y+3, r26	; 0x03
     836:	bc 83       	std	Y+4, r27	; 0x04
					   data_memory_write(PORTA, porta);
     838:	89 81       	ldd	r24, Y+1	; 0x01
     83a:	9a 81       	ldd	r25, Y+2	; 0x02
     83c:	ab 81       	ldd	r26, Y+3	; 0x03
     83e:	bc 81       	ldd	r27, Y+4	; 0x04
     840:	9c 01       	movw	r18, r24
     842:	ad 01       	movw	r20, r26
     844:	61 e0       	ldi	r22, 0x01	; 1
     846:	70 e0       	ldi	r23, 0x00	; 0
     848:	80 e0       	ldi	r24, 0x00	; 0
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <data_memory_write>
				   }
				   else
				   {
					   data_memory_write(op1, reg[(uint8_t)(op2)]);
				   }
				   break;
     850:	6a c5       	rjmp	.+2772   	; 0x1326 <__stack+0xa27>
					   const uint32_t porta = data_memory_read(PORTA) ^ reg[(uint8_t)(op2)];
					   data_memory_write(PORTA, porta);
				   }
				   else
				   {
					   data_memory_write(op1, reg[(uint8_t)(op2)]);
     852:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <op2>
     856:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <op2+0x1>
     85a:	a0 91 11 01 	lds	r26, 0x0111	; 0x800111 <op2+0x2>
     85e:	b0 91 12 01 	lds	r27, 0x0112	; 0x800112 <op2+0x3>
     862:	88 2f       	mov	r24, r24
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	88 0f       	add	r24, r24
     868:	99 1f       	adc	r25, r25
     86a:	88 0f       	add	r24, r24
     86c:	99 1f       	adc	r25, r25
     86e:	85 5e       	subi	r24, 0xE5	; 229
     870:	9e 4f       	sbci	r25, 0xFE	; 254
     872:	fc 01       	movw	r30, r24
     874:	20 81       	ld	r18, Z
     876:	31 81       	ldd	r19, Z+1	; 0x01
     878:	42 81       	ldd	r20, Z+2	; 0x02
     87a:	53 81       	ldd	r21, Z+3	; 0x03
     87c:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <op1>
     880:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <op1+0x1>
     884:	cc 01       	movw	r24, r24
     886:	a0 e0       	ldi	r26, 0x00	; 0
     888:	b0 e0       	ldi	r27, 0x00	; 0
     88a:	bc 01       	movw	r22, r24
     88c:	cd 01       	movw	r24, r26
     88e:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <data_memory_write>
				   }
				   break;
     892:	49 c5       	rjmp	.+2706   	; 0x1326 <__stack+0xa27>
			   }
			   case IN:
			   {
				   reg[(uint8_t)(op1)] = data_memory_read((uint8_t)(op2));
     894:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <op1>
     898:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <op1+0x1>
     89c:	8c 01       	movw	r16, r24
     89e:	11 27       	eor	r17, r17
     8a0:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <op2>
     8a4:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <op2+0x1>
     8a8:	a0 91 11 01 	lds	r26, 0x0111	; 0x800111 <op2+0x2>
     8ac:	b0 91 12 01 	lds	r27, 0x0112	; 0x800112 <op2+0x3>
     8b0:	99 27       	eor	r25, r25
     8b2:	aa 27       	eor	r26, r26
     8b4:	bb 27       	eor	r27, r27
     8b6:	bc 01       	movw	r22, r24
     8b8:	cd 01       	movw	r24, r26
     8ba:	0e 94 37 0c 	call	0x186e	; 0x186e <data_memory_read>
     8be:	09 2e       	mov	r0, r25
     8c0:	00 0c       	add	r0, r0
     8c2:	aa 0b       	sbc	r26, r26
     8c4:	bb 0b       	sbc	r27, r27
     8c6:	98 01       	movw	r18, r16
     8c8:	22 0f       	add	r18, r18
     8ca:	33 1f       	adc	r19, r19
     8cc:	22 0f       	add	r18, r18
     8ce:	33 1f       	adc	r19, r19
     8d0:	25 5e       	subi	r18, 0xE5	; 229
     8d2:	3e 4f       	sbci	r19, 0xFE	; 254
     8d4:	f9 01       	movw	r30, r18
     8d6:	80 83       	st	Z, r24
     8d8:	91 83       	std	Z+1, r25	; 0x01
     8da:	a2 83       	std	Z+2, r26	; 0x02
     8dc:	b3 83       	std	Z+3, r27	; 0x03
				   break;
     8de:	23 c5       	rjmp	.+2630   	; 0x1326 <__stack+0xa27>
			   }
			   case ST:
			   {
				   data_memory_write(reg[(uint8_t)(op1)], reg[(uint8_t)(op2)]);
     8e0:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <op2>
     8e4:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <op2+0x1>
     8e8:	a0 91 11 01 	lds	r26, 0x0111	; 0x800111 <op2+0x2>
     8ec:	b0 91 12 01 	lds	r27, 0x0112	; 0x800112 <op2+0x3>
     8f0:	88 2f       	mov	r24, r24
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	88 0f       	add	r24, r24
     8f6:	99 1f       	adc	r25, r25
     8f8:	88 0f       	add	r24, r24
     8fa:	99 1f       	adc	r25, r25
     8fc:	85 5e       	subi	r24, 0xE5	; 229
     8fe:	9e 4f       	sbci	r25, 0xFE	; 254
     900:	fc 01       	movw	r30, r24
     902:	20 81       	ld	r18, Z
     904:	31 81       	ldd	r19, Z+1	; 0x01
     906:	42 81       	ldd	r20, Z+2	; 0x02
     908:	53 81       	ldd	r21, Z+3	; 0x03
     90a:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <op1>
     90e:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <op1+0x1>
     912:	99 27       	eor	r25, r25
     914:	88 0f       	add	r24, r24
     916:	99 1f       	adc	r25, r25
     918:	88 0f       	add	r24, r24
     91a:	99 1f       	adc	r25, r25
     91c:	85 5e       	subi	r24, 0xE5	; 229
     91e:	9e 4f       	sbci	r25, 0xFE	; 254
     920:	fc 01       	movw	r30, r24
     922:	80 81       	ld	r24, Z
     924:	91 81       	ldd	r25, Z+1	; 0x01
     926:	a2 81       	ldd	r26, Z+2	; 0x02
     928:	b3 81       	ldd	r27, Z+3	; 0x03
     92a:	bc 01       	movw	r22, r24
     92c:	cd 01       	movw	r24, r26
     92e:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <data_memory_write>
				   break;
     932:	f9 c4       	rjmp	.+2546   	; 0x1326 <__stack+0xa27>
			   }
			   case LD:
			   {
				   reg[(uint8_t)(op1)] = data_memory_read(reg[(uint8_t)(op2)]);
     934:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <op1>
     938:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <op1+0x1>
     93c:	8c 01       	movw	r16, r24
     93e:	11 27       	eor	r17, r17
     940:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <op2>
     944:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <op2+0x1>
     948:	a0 91 11 01 	lds	r26, 0x0111	; 0x800111 <op2+0x2>
     94c:	b0 91 12 01 	lds	r27, 0x0112	; 0x800112 <op2+0x3>
     950:	88 2f       	mov	r24, r24
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	88 0f       	add	r24, r24
     956:	99 1f       	adc	r25, r25
     958:	88 0f       	add	r24, r24
     95a:	99 1f       	adc	r25, r25
     95c:	85 5e       	subi	r24, 0xE5	; 229
     95e:	9e 4f       	sbci	r25, 0xFE	; 254
     960:	fc 01       	movw	r30, r24
     962:	80 81       	ld	r24, Z
     964:	91 81       	ldd	r25, Z+1	; 0x01
     966:	a2 81       	ldd	r26, Z+2	; 0x02
     968:	b3 81       	ldd	r27, Z+3	; 0x03
     96a:	bc 01       	movw	r22, r24
     96c:	cd 01       	movw	r24, r26
     96e:	0e 94 37 0c 	call	0x186e	; 0x186e <data_memory_read>
     972:	09 2e       	mov	r0, r25
     974:	00 0c       	add	r0, r0
     976:	aa 0b       	sbc	r26, r26
     978:	bb 0b       	sbc	r27, r27
     97a:	98 01       	movw	r18, r16
     97c:	22 0f       	add	r18, r18
     97e:	33 1f       	adc	r19, r19
     980:	22 0f       	add	r18, r18
     982:	33 1f       	adc	r19, r19
     984:	25 5e       	subi	r18, 0xE5	; 229
     986:	3e 4f       	sbci	r19, 0xFE	; 254
     988:	f9 01       	movw	r30, r18
     98a:	80 83       	st	Z, r24
     98c:	91 83       	std	Z+1, r25	; 0x01
     98e:	a2 83       	std	Z+2, r26	; 0x02
     990:	b3 83       	std	Z+3, r27	; 0x03
				   break;
     992:	c9 c4       	rjmp	.+2450   	; 0x1326 <__stack+0xa27>
			   }
			   case CLR:
			   {
				   reg[(uint8_t)(op1)] = 0x00;
     994:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <op1>
     998:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <op1+0x1>
     99c:	99 27       	eor	r25, r25
     99e:	88 0f       	add	r24, r24
     9a0:	99 1f       	adc	r25, r25
     9a2:	88 0f       	add	r24, r24
     9a4:	99 1f       	adc	r25, r25
     9a6:	85 5e       	subi	r24, 0xE5	; 229
     9a8:	9e 4f       	sbci	r25, 0xFE	; 254
     9aa:	fc 01       	movw	r30, r24
     9ac:	10 82       	st	Z, r1
     9ae:	11 82       	std	Z+1, r1	; 0x01
     9b0:	12 82       	std	Z+2, r1	; 0x02
     9b2:	13 82       	std	Z+3, r1	; 0x03
				   break;
     9b4:	b8 c4       	rjmp	.+2416   	; 0x1326 <__stack+0xa27>
			   }
			   case LSL:
			   {
				   reg[(uint8_t)(op1)] = reg[(uint8_t)(op1)] << 1;
     9b6:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <op1>
     9ba:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <op1+0x1>
     9be:	9c 01       	movw	r18, r24
     9c0:	33 27       	eor	r19, r19
     9c2:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <op1>
     9c6:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <op1+0x1>
     9ca:	99 27       	eor	r25, r25
     9cc:	88 0f       	add	r24, r24
     9ce:	99 1f       	adc	r25, r25
     9d0:	88 0f       	add	r24, r24
     9d2:	99 1f       	adc	r25, r25
     9d4:	85 5e       	subi	r24, 0xE5	; 229
     9d6:	9e 4f       	sbci	r25, 0xFE	; 254
     9d8:	fc 01       	movw	r30, r24
     9da:	80 81       	ld	r24, Z
     9dc:	91 81       	ldd	r25, Z+1	; 0x01
     9de:	a2 81       	ldd	r26, Z+2	; 0x02
     9e0:	b3 81       	ldd	r27, Z+3	; 0x03
     9e2:	88 0f       	add	r24, r24
     9e4:	99 1f       	adc	r25, r25
     9e6:	aa 1f       	adc	r26, r26
     9e8:	bb 1f       	adc	r27, r27
     9ea:	22 0f       	add	r18, r18
     9ec:	33 1f       	adc	r19, r19
     9ee:	22 0f       	add	r18, r18
     9f0:	33 1f       	adc	r19, r19
     9f2:	25 5e       	subi	r18, 0xE5	; 229
     9f4:	3e 4f       	sbci	r19, 0xFE	; 254
     9f6:	f9 01       	movw	r30, r18
     9f8:	80 83       	st	Z, r24
     9fa:	91 83       	std	Z+1, r25	; 0x01
     9fc:	a2 83       	std	Z+2, r26	; 0x02
     9fe:	b3 83       	std	Z+3, r27	; 0x03
				   break;
     a00:	92 c4       	rjmp	.+2340   	; 0x1326 <__stack+0xa27>
			   }
			   case LSR:
			   {
				   reg[(uint8_t)(op1)] = reg[(uint8_t)(op1)] >> 1;
     a02:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <op1>
     a06:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <op1+0x1>
     a0a:	9c 01       	movw	r18, r24
     a0c:	33 27       	eor	r19, r19
     a0e:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <op1>
     a12:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <op1+0x1>
     a16:	99 27       	eor	r25, r25
     a18:	88 0f       	add	r24, r24
     a1a:	99 1f       	adc	r25, r25
     a1c:	88 0f       	add	r24, r24
     a1e:	99 1f       	adc	r25, r25
     a20:	85 5e       	subi	r24, 0xE5	; 229
     a22:	9e 4f       	sbci	r25, 0xFE	; 254
     a24:	fc 01       	movw	r30, r24
     a26:	80 81       	ld	r24, Z
     a28:	91 81       	ldd	r25, Z+1	; 0x01
     a2a:	a2 81       	ldd	r26, Z+2	; 0x02
     a2c:	b3 81       	ldd	r27, Z+3	; 0x03
     a2e:	b6 95       	lsr	r27
     a30:	a7 95       	ror	r26
     a32:	97 95       	ror	r25
     a34:	87 95       	ror	r24
     a36:	22 0f       	add	r18, r18
     a38:	33 1f       	adc	r19, r19
     a3a:	22 0f       	add	r18, r18
     a3c:	33 1f       	adc	r19, r19
     a3e:	25 5e       	subi	r18, 0xE5	; 229
     a40:	3e 4f       	sbci	r19, 0xFE	; 254
     a42:	f9 01       	movw	r30, r18
     a44:	80 83       	st	Z, r24
     a46:	91 83       	std	Z+1, r25	; 0x01
     a48:	a2 83       	std	Z+2, r26	; 0x02
     a4a:	b3 83       	std	Z+3, r27	; 0x03
				   break;
     a4c:	6c c4       	rjmp	.+2264   	; 0x1326 <__stack+0xa27>
			   }
			   case ORI:
			   {
				   reg[(uint8_t)(op1)] = alu(OR, reg[(uint8_t)(op1)], op2, &sr);
     a4e:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <op1>
     a52:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <op1+0x1>
     a56:	6c 01       	movw	r12, r24
     a58:	dd 24       	eor	r13, r13
     a5a:	20 91 0f 01 	lds	r18, 0x010F	; 0x80010f <op2>
     a5e:	30 91 10 01 	lds	r19, 0x0110	; 0x800110 <op2+0x1>
     a62:	40 91 11 01 	lds	r20, 0x0111	; 0x800111 <op2+0x2>
     a66:	50 91 12 01 	lds	r21, 0x0112	; 0x800112 <op2+0x3>
     a6a:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <op1>
     a6e:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <op1+0x1>
     a72:	99 27       	eor	r25, r25
     a74:	88 0f       	add	r24, r24
     a76:	99 1f       	adc	r25, r25
     a78:	88 0f       	add	r24, r24
     a7a:	99 1f       	adc	r25, r25
     a7c:	85 5e       	subi	r24, 0xE5	; 229
     a7e:	9e 4f       	sbci	r25, 0xFE	; 254
     a80:	fc 01       	movw	r30, r24
     a82:	80 81       	ld	r24, Z
     a84:	91 81       	ldd	r25, Z+1	; 0x01
     a86:	a2 81       	ldd	r26, Z+2	; 0x02
     a88:	b3 81       	ldd	r27, Z+3	; 0x03
     a8a:	0f 2e       	mov	r0, r31
     a8c:	fa e0       	ldi	r31, 0x0A	; 10
     a8e:	ef 2e       	mov	r14, r31
     a90:	f1 e0       	ldi	r31, 0x01	; 1
     a92:	ff 2e       	mov	r15, r31
     a94:	f0 2d       	mov	r31, r0
     a96:	89 01       	movw	r16, r18
     a98:	9a 01       	movw	r18, r20
     a9a:	ac 01       	movw	r20, r24
     a9c:	bd 01       	movw	r22, r26
     a9e:	8d e0       	ldi	r24, 0x0D	; 13
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	0e 94 97 00 	call	0x12e	; 0x12e <alu>
     aa6:	dc 01       	movw	r26, r24
     aa8:	cb 01       	movw	r24, r22
     aaa:	96 01       	movw	r18, r12
     aac:	22 0f       	add	r18, r18
     aae:	33 1f       	adc	r19, r19
     ab0:	22 0f       	add	r18, r18
     ab2:	33 1f       	adc	r19, r19
     ab4:	25 5e       	subi	r18, 0xE5	; 229
     ab6:	3e 4f       	sbci	r19, 0xFE	; 254
     ab8:	f9 01       	movw	r30, r18
     aba:	80 83       	st	Z, r24
     abc:	91 83       	std	Z+1, r25	; 0x01
     abe:	a2 83       	std	Z+2, r26	; 0x02
     ac0:	b3 83       	std	Z+3, r27	; 0x03
				   break;
     ac2:	31 c4       	rjmp	.+2146   	; 0x1326 <__stack+0xa27>
			   }
			   case ANDI:
			   {
				   reg[(uint8_t)(op1)] = alu(AND, reg[(uint8_t)(op1)], op2, &sr);
     ac4:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <op1>
     ac8:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <op1+0x1>
     acc:	6c 01       	movw	r12, r24
     ace:	dd 24       	eor	r13, r13
     ad0:	20 91 0f 01 	lds	r18, 0x010F	; 0x80010f <op2>
     ad4:	30 91 10 01 	lds	r19, 0x0110	; 0x800110 <op2+0x1>
     ad8:	40 91 11 01 	lds	r20, 0x0111	; 0x800111 <op2+0x2>
     adc:	50 91 12 01 	lds	r21, 0x0112	; 0x800112 <op2+0x3>
     ae0:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <op1>
     ae4:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <op1+0x1>
     ae8:	99 27       	eor	r25, r25
     aea:	88 0f       	add	r24, r24
     aec:	99 1f       	adc	r25, r25
     aee:	88 0f       	add	r24, r24
     af0:	99 1f       	adc	r25, r25
     af2:	85 5e       	subi	r24, 0xE5	; 229
     af4:	9e 4f       	sbci	r25, 0xFE	; 254
     af6:	fc 01       	movw	r30, r24
     af8:	80 81       	ld	r24, Z
     afa:	91 81       	ldd	r25, Z+1	; 0x01
     afc:	a2 81       	ldd	r26, Z+2	; 0x02
     afe:	b3 81       	ldd	r27, Z+3	; 0x03
     b00:	0f 2e       	mov	r0, r31
     b02:	fa e0       	ldi	r31, 0x0A	; 10
     b04:	ef 2e       	mov	r14, r31
     b06:	f1 e0       	ldi	r31, 0x01	; 1
     b08:	ff 2e       	mov	r15, r31
     b0a:	f0 2d       	mov	r31, r0
     b0c:	89 01       	movw	r16, r18
     b0e:	9a 01       	movw	r18, r20
     b10:	ac 01       	movw	r20, r24
     b12:	bd 01       	movw	r22, r26
     b14:	8e e0       	ldi	r24, 0x0E	; 14
     b16:	90 e0       	ldi	r25, 0x00	; 0
     b18:	0e 94 97 00 	call	0x12e	; 0x12e <alu>
     b1c:	dc 01       	movw	r26, r24
     b1e:	cb 01       	movw	r24, r22
     b20:	96 01       	movw	r18, r12
     b22:	22 0f       	add	r18, r18
     b24:	33 1f       	adc	r19, r19
     b26:	22 0f       	add	r18, r18
     b28:	33 1f       	adc	r19, r19
     b2a:	25 5e       	subi	r18, 0xE5	; 229
     b2c:	3e 4f       	sbci	r19, 0xFE	; 254
     b2e:	f9 01       	movw	r30, r18
     b30:	80 83       	st	Z, r24
     b32:	91 83       	std	Z+1, r25	; 0x01
     b34:	a2 83       	std	Z+2, r26	; 0x02
     b36:	b3 83       	std	Z+3, r27	; 0x03
				   break;
     b38:	f6 c3       	rjmp	.+2028   	; 0x1326 <__stack+0xa27>
			   }
			   case XORI:
			   {
				   reg[(uint8_t)(op1)] = alu(XOR, reg[(uint8_t)(op1)], op2, &sr);
     b3a:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <op1>
     b3e:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <op1+0x1>
     b42:	6c 01       	movw	r12, r24
     b44:	dd 24       	eor	r13, r13
     b46:	20 91 0f 01 	lds	r18, 0x010F	; 0x80010f <op2>
     b4a:	30 91 10 01 	lds	r19, 0x0110	; 0x800110 <op2+0x1>
     b4e:	40 91 11 01 	lds	r20, 0x0111	; 0x800111 <op2+0x2>
     b52:	50 91 12 01 	lds	r21, 0x0112	; 0x800112 <op2+0x3>
     b56:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <op1>
     b5a:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <op1+0x1>
     b5e:	99 27       	eor	r25, r25
     b60:	88 0f       	add	r24, r24
     b62:	99 1f       	adc	r25, r25
     b64:	88 0f       	add	r24, r24
     b66:	99 1f       	adc	r25, r25
     b68:	85 5e       	subi	r24, 0xE5	; 229
     b6a:	9e 4f       	sbci	r25, 0xFE	; 254
     b6c:	fc 01       	movw	r30, r24
     b6e:	80 81       	ld	r24, Z
     b70:	91 81       	ldd	r25, Z+1	; 0x01
     b72:	a2 81       	ldd	r26, Z+2	; 0x02
     b74:	b3 81       	ldd	r27, Z+3	; 0x03
     b76:	0f 2e       	mov	r0, r31
     b78:	fa e0       	ldi	r31, 0x0A	; 10
     b7a:	ef 2e       	mov	r14, r31
     b7c:	f1 e0       	ldi	r31, 0x01	; 1
     b7e:	ff 2e       	mov	r15, r31
     b80:	f0 2d       	mov	r31, r0
     b82:	89 01       	movw	r16, r18
     b84:	9a 01       	movw	r18, r20
     b86:	ac 01       	movw	r20, r24
     b88:	bd 01       	movw	r22, r26
     b8a:	8f e0       	ldi	r24, 0x0F	; 15
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	0e 94 97 00 	call	0x12e	; 0x12e <alu>
     b92:	dc 01       	movw	r26, r24
     b94:	cb 01       	movw	r24, r22
     b96:	96 01       	movw	r18, r12
     b98:	22 0f       	add	r18, r18
     b9a:	33 1f       	adc	r19, r19
     b9c:	22 0f       	add	r18, r18
     b9e:	33 1f       	adc	r19, r19
     ba0:	25 5e       	subi	r18, 0xE5	; 229
     ba2:	3e 4f       	sbci	r19, 0xFE	; 254
     ba4:	f9 01       	movw	r30, r18
     ba6:	80 83       	st	Z, r24
     ba8:	91 83       	std	Z+1, r25	; 0x01
     baa:	a2 83       	std	Z+2, r26	; 0x02
     bac:	b3 83       	std	Z+3, r27	; 0x03
				   break;
     bae:	bb c3       	rjmp	.+1910   	; 0x1326 <__stack+0xa27>
			   }
			   case OR:
			   {
				   reg[(uint8_t)(op1)] = alu(OR, reg[(uint8_t)(op1)], reg[(uint8_t)(op2)], &sr);
     bb0:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <op1>
     bb4:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <op1+0x1>
     bb8:	6c 01       	movw	r12, r24
     bba:	dd 24       	eor	r13, r13
     bbc:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <op2>
     bc0:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <op2+0x1>
     bc4:	a0 91 11 01 	lds	r26, 0x0111	; 0x800111 <op2+0x2>
     bc8:	b0 91 12 01 	lds	r27, 0x0112	; 0x800112 <op2+0x3>
     bcc:	88 2f       	mov	r24, r24
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	88 0f       	add	r24, r24
     bd2:	99 1f       	adc	r25, r25
     bd4:	88 0f       	add	r24, r24
     bd6:	99 1f       	adc	r25, r25
     bd8:	85 5e       	subi	r24, 0xE5	; 229
     bda:	9e 4f       	sbci	r25, 0xFE	; 254
     bdc:	fc 01       	movw	r30, r24
     bde:	20 81       	ld	r18, Z
     be0:	31 81       	ldd	r19, Z+1	; 0x01
     be2:	42 81       	ldd	r20, Z+2	; 0x02
     be4:	53 81       	ldd	r21, Z+3	; 0x03
     be6:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <op1>
     bea:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <op1+0x1>
     bee:	99 27       	eor	r25, r25
     bf0:	88 0f       	add	r24, r24
     bf2:	99 1f       	adc	r25, r25
     bf4:	88 0f       	add	r24, r24
     bf6:	99 1f       	adc	r25, r25
     bf8:	85 5e       	subi	r24, 0xE5	; 229
     bfa:	9e 4f       	sbci	r25, 0xFE	; 254
     bfc:	fc 01       	movw	r30, r24
     bfe:	80 81       	ld	r24, Z
     c00:	91 81       	ldd	r25, Z+1	; 0x01
     c02:	a2 81       	ldd	r26, Z+2	; 0x02
     c04:	b3 81       	ldd	r27, Z+3	; 0x03
     c06:	0f 2e       	mov	r0, r31
     c08:	fa e0       	ldi	r31, 0x0A	; 10
     c0a:	ef 2e       	mov	r14, r31
     c0c:	f1 e0       	ldi	r31, 0x01	; 1
     c0e:	ff 2e       	mov	r15, r31
     c10:	f0 2d       	mov	r31, r0
     c12:	89 01       	movw	r16, r18
     c14:	9a 01       	movw	r18, r20
     c16:	ac 01       	movw	r20, r24
     c18:	bd 01       	movw	r22, r26
     c1a:	8d e0       	ldi	r24, 0x0D	; 13
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	0e 94 97 00 	call	0x12e	; 0x12e <alu>
     c22:	dc 01       	movw	r26, r24
     c24:	cb 01       	movw	r24, r22
     c26:	96 01       	movw	r18, r12
     c28:	22 0f       	add	r18, r18
     c2a:	33 1f       	adc	r19, r19
     c2c:	22 0f       	add	r18, r18
     c2e:	33 1f       	adc	r19, r19
     c30:	25 5e       	subi	r18, 0xE5	; 229
     c32:	3e 4f       	sbci	r19, 0xFE	; 254
     c34:	f9 01       	movw	r30, r18
     c36:	80 83       	st	Z, r24
     c38:	91 83       	std	Z+1, r25	; 0x01
     c3a:	a2 83       	std	Z+2, r26	; 0x02
     c3c:	b3 83       	std	Z+3, r27	; 0x03
				   break;
     c3e:	73 c3       	rjmp	.+1766   	; 0x1326 <__stack+0xa27>
			   }
			   case AND:
			   {
				   reg[(uint8_t)(op1)] = alu(AND, reg[(uint8_t)(op1)], reg[(uint8_t)(op2)], &sr);
     c40:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <op1>
     c44:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <op1+0x1>
     c48:	6c 01       	movw	r12, r24
     c4a:	dd 24       	eor	r13, r13
     c4c:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <op2>
     c50:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <op2+0x1>
     c54:	a0 91 11 01 	lds	r26, 0x0111	; 0x800111 <op2+0x2>
     c58:	b0 91 12 01 	lds	r27, 0x0112	; 0x800112 <op2+0x3>
     c5c:	88 2f       	mov	r24, r24
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	88 0f       	add	r24, r24
     c62:	99 1f       	adc	r25, r25
     c64:	88 0f       	add	r24, r24
     c66:	99 1f       	adc	r25, r25
     c68:	85 5e       	subi	r24, 0xE5	; 229
     c6a:	9e 4f       	sbci	r25, 0xFE	; 254
     c6c:	fc 01       	movw	r30, r24
     c6e:	20 81       	ld	r18, Z
     c70:	31 81       	ldd	r19, Z+1	; 0x01
     c72:	42 81       	ldd	r20, Z+2	; 0x02
     c74:	53 81       	ldd	r21, Z+3	; 0x03
     c76:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <op1>
     c7a:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <op1+0x1>
     c7e:	99 27       	eor	r25, r25
     c80:	88 0f       	add	r24, r24
     c82:	99 1f       	adc	r25, r25
     c84:	88 0f       	add	r24, r24
     c86:	99 1f       	adc	r25, r25
     c88:	85 5e       	subi	r24, 0xE5	; 229
     c8a:	9e 4f       	sbci	r25, 0xFE	; 254
     c8c:	fc 01       	movw	r30, r24
     c8e:	80 81       	ld	r24, Z
     c90:	91 81       	ldd	r25, Z+1	; 0x01
     c92:	a2 81       	ldd	r26, Z+2	; 0x02
     c94:	b3 81       	ldd	r27, Z+3	; 0x03
     c96:	0f 2e       	mov	r0, r31
     c98:	fa e0       	ldi	r31, 0x0A	; 10
     c9a:	ef 2e       	mov	r14, r31
     c9c:	f1 e0       	ldi	r31, 0x01	; 1
     c9e:	ff 2e       	mov	r15, r31
     ca0:	f0 2d       	mov	r31, r0
     ca2:	89 01       	movw	r16, r18
     ca4:	9a 01       	movw	r18, r20
     ca6:	ac 01       	movw	r20, r24
     ca8:	bd 01       	movw	r22, r26
     caa:	8e e0       	ldi	r24, 0x0E	; 14
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	0e 94 97 00 	call	0x12e	; 0x12e <alu>
     cb2:	dc 01       	movw	r26, r24
     cb4:	cb 01       	movw	r24, r22
     cb6:	96 01       	movw	r18, r12
     cb8:	22 0f       	add	r18, r18
     cba:	33 1f       	adc	r19, r19
     cbc:	22 0f       	add	r18, r18
     cbe:	33 1f       	adc	r19, r19
     cc0:	25 5e       	subi	r18, 0xE5	; 229
     cc2:	3e 4f       	sbci	r19, 0xFE	; 254
     cc4:	f9 01       	movw	r30, r18
     cc6:	80 83       	st	Z, r24
     cc8:	91 83       	std	Z+1, r25	; 0x01
     cca:	a2 83       	std	Z+2, r26	; 0x02
     ccc:	b3 83       	std	Z+3, r27	; 0x03
				   break;
     cce:	2b c3       	rjmp	.+1622   	; 0x1326 <__stack+0xa27>
			   }
			   case XOR:
			   {
				   reg[(uint8_t)(op1)] = alu(XOR, reg[(uint8_t)(op1)], reg[(uint8_t)(op2)], &sr);
     cd0:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <op1>
     cd4:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <op1+0x1>
     cd8:	6c 01       	movw	r12, r24
     cda:	dd 24       	eor	r13, r13
     cdc:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <op2>
     ce0:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <op2+0x1>
     ce4:	a0 91 11 01 	lds	r26, 0x0111	; 0x800111 <op2+0x2>
     ce8:	b0 91 12 01 	lds	r27, 0x0112	; 0x800112 <op2+0x3>
     cec:	88 2f       	mov	r24, r24
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	88 0f       	add	r24, r24
     cf2:	99 1f       	adc	r25, r25
     cf4:	88 0f       	add	r24, r24
     cf6:	99 1f       	adc	r25, r25
     cf8:	85 5e       	subi	r24, 0xE5	; 229
     cfa:	9e 4f       	sbci	r25, 0xFE	; 254
     cfc:	fc 01       	movw	r30, r24
     cfe:	20 81       	ld	r18, Z
     d00:	31 81       	ldd	r19, Z+1	; 0x01
     d02:	42 81       	ldd	r20, Z+2	; 0x02
     d04:	53 81       	ldd	r21, Z+3	; 0x03
     d06:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <op1>
     d0a:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <op1+0x1>
     d0e:	99 27       	eor	r25, r25
     d10:	88 0f       	add	r24, r24
     d12:	99 1f       	adc	r25, r25
     d14:	88 0f       	add	r24, r24
     d16:	99 1f       	adc	r25, r25
     d18:	85 5e       	subi	r24, 0xE5	; 229
     d1a:	9e 4f       	sbci	r25, 0xFE	; 254
     d1c:	fc 01       	movw	r30, r24
     d1e:	80 81       	ld	r24, Z
     d20:	91 81       	ldd	r25, Z+1	; 0x01
     d22:	a2 81       	ldd	r26, Z+2	; 0x02
     d24:	b3 81       	ldd	r27, Z+3	; 0x03
     d26:	0f 2e       	mov	r0, r31
     d28:	fa e0       	ldi	r31, 0x0A	; 10
     d2a:	ef 2e       	mov	r14, r31
     d2c:	f1 e0       	ldi	r31, 0x01	; 1
     d2e:	ff 2e       	mov	r15, r31
     d30:	f0 2d       	mov	r31, r0
     d32:	89 01       	movw	r16, r18
     d34:	9a 01       	movw	r18, r20
     d36:	ac 01       	movw	r20, r24
     d38:	bd 01       	movw	r22, r26
     d3a:	8f e0       	ldi	r24, 0x0F	; 15
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	0e 94 97 00 	call	0x12e	; 0x12e <alu>
     d42:	dc 01       	movw	r26, r24
     d44:	cb 01       	movw	r24, r22
     d46:	96 01       	movw	r18, r12
     d48:	22 0f       	add	r18, r18
     d4a:	33 1f       	adc	r19, r19
     d4c:	22 0f       	add	r18, r18
     d4e:	33 1f       	adc	r19, r19
     d50:	25 5e       	subi	r18, 0xE5	; 229
     d52:	3e 4f       	sbci	r19, 0xFE	; 254
     d54:	f9 01       	movw	r30, r18
     d56:	80 83       	st	Z, r24
     d58:	91 83       	std	Z+1, r25	; 0x01
     d5a:	a2 83       	std	Z+2, r26	; 0x02
     d5c:	b3 83       	std	Z+3, r27	; 0x03
				   break;
     d5e:	e3 c2       	rjmp	.+1478   	; 0x1326 <__stack+0xa27>
			   }
			   case ADDI:
			   {
				   reg[(uint8_t)(op1)] = alu(ADD, reg[(uint8_t)(op1)], op2, &sr);
     d60:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <op1>
     d64:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <op1+0x1>
     d68:	6c 01       	movw	r12, r24
     d6a:	dd 24       	eor	r13, r13
     d6c:	20 91 0f 01 	lds	r18, 0x010F	; 0x80010f <op2>
     d70:	30 91 10 01 	lds	r19, 0x0110	; 0x800110 <op2+0x1>
     d74:	40 91 11 01 	lds	r20, 0x0111	; 0x800111 <op2+0x2>
     d78:	50 91 12 01 	lds	r21, 0x0112	; 0x800112 <op2+0x3>
     d7c:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <op1>
     d80:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <op1+0x1>
     d84:	99 27       	eor	r25, r25
     d86:	88 0f       	add	r24, r24
     d88:	99 1f       	adc	r25, r25
     d8a:	88 0f       	add	r24, r24
     d8c:	99 1f       	adc	r25, r25
     d8e:	85 5e       	subi	r24, 0xE5	; 229
     d90:	9e 4f       	sbci	r25, 0xFE	; 254
     d92:	fc 01       	movw	r30, r24
     d94:	80 81       	ld	r24, Z
     d96:	91 81       	ldd	r25, Z+1	; 0x01
     d98:	a2 81       	ldd	r26, Z+2	; 0x02
     d9a:	b3 81       	ldd	r27, Z+3	; 0x03
     d9c:	0f 2e       	mov	r0, r31
     d9e:	fa e0       	ldi	r31, 0x0A	; 10
     da0:	ef 2e       	mov	r14, r31
     da2:	f1 e0       	ldi	r31, 0x01	; 1
     da4:	ff 2e       	mov	r15, r31
     da6:	f0 2d       	mov	r31, r0
     da8:	89 01       	movw	r16, r18
     daa:	9a 01       	movw	r18, r20
     dac:	ac 01       	movw	r20, r24
     dae:	bd 01       	movw	r22, r26
     db0:	82 e1       	ldi	r24, 0x12	; 18
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	0e 94 97 00 	call	0x12e	; 0x12e <alu>
     db8:	dc 01       	movw	r26, r24
     dba:	cb 01       	movw	r24, r22
     dbc:	96 01       	movw	r18, r12
     dbe:	22 0f       	add	r18, r18
     dc0:	33 1f       	adc	r19, r19
     dc2:	22 0f       	add	r18, r18
     dc4:	33 1f       	adc	r19, r19
     dc6:	25 5e       	subi	r18, 0xE5	; 229
     dc8:	3e 4f       	sbci	r19, 0xFE	; 254
     dca:	f9 01       	movw	r30, r18
     dcc:	80 83       	st	Z, r24
     dce:	91 83       	std	Z+1, r25	; 0x01
     dd0:	a2 83       	std	Z+2, r26	; 0x02
     dd2:	b3 83       	std	Z+3, r27	; 0x03
				   break;
     dd4:	a8 c2       	rjmp	.+1360   	; 0x1326 <__stack+0xa27>
			   }
			   case SUBI:
			   {
				   reg[(uint8_t)(op1)] = alu(SUB, reg[(uint8_t)(op1)], op2, &sr);
     dd6:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <op1>
     dda:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <op1+0x1>
     dde:	6c 01       	movw	r12, r24
     de0:	dd 24       	eor	r13, r13
     de2:	20 91 0f 01 	lds	r18, 0x010F	; 0x80010f <op2>
     de6:	30 91 10 01 	lds	r19, 0x0110	; 0x800110 <op2+0x1>
     dea:	40 91 11 01 	lds	r20, 0x0111	; 0x800111 <op2+0x2>
     dee:	50 91 12 01 	lds	r21, 0x0112	; 0x800112 <op2+0x3>
     df2:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <op1>
     df6:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <op1+0x1>
     dfa:	99 27       	eor	r25, r25
     dfc:	88 0f       	add	r24, r24
     dfe:	99 1f       	adc	r25, r25
     e00:	88 0f       	add	r24, r24
     e02:	99 1f       	adc	r25, r25
     e04:	85 5e       	subi	r24, 0xE5	; 229
     e06:	9e 4f       	sbci	r25, 0xFE	; 254
     e08:	fc 01       	movw	r30, r24
     e0a:	80 81       	ld	r24, Z
     e0c:	91 81       	ldd	r25, Z+1	; 0x01
     e0e:	a2 81       	ldd	r26, Z+2	; 0x02
     e10:	b3 81       	ldd	r27, Z+3	; 0x03
     e12:	0f 2e       	mov	r0, r31
     e14:	fa e0       	ldi	r31, 0x0A	; 10
     e16:	ef 2e       	mov	r14, r31
     e18:	f1 e0       	ldi	r31, 0x01	; 1
     e1a:	ff 2e       	mov	r15, r31
     e1c:	f0 2d       	mov	r31, r0
     e1e:	89 01       	movw	r16, r18
     e20:	9a 01       	movw	r18, r20
     e22:	ac 01       	movw	r20, r24
     e24:	bd 01       	movw	r22, r26
     e26:	83 e1       	ldi	r24, 0x13	; 19
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	0e 94 97 00 	call	0x12e	; 0x12e <alu>
     e2e:	dc 01       	movw	r26, r24
     e30:	cb 01       	movw	r24, r22
     e32:	96 01       	movw	r18, r12
     e34:	22 0f       	add	r18, r18
     e36:	33 1f       	adc	r19, r19
     e38:	22 0f       	add	r18, r18
     e3a:	33 1f       	adc	r19, r19
     e3c:	25 5e       	subi	r18, 0xE5	; 229
     e3e:	3e 4f       	sbci	r19, 0xFE	; 254
     e40:	f9 01       	movw	r30, r18
     e42:	80 83       	st	Z, r24
     e44:	91 83       	std	Z+1, r25	; 0x01
     e46:	a2 83       	std	Z+2, r26	; 0x02
     e48:	b3 83       	std	Z+3, r27	; 0x03
				   break;
     e4a:	6d c2       	rjmp	.+1242   	; 0x1326 <__stack+0xa27>
			   }
			   case ADD:
			   {
				   reg[(uint8_t)(op1)] = alu(ADD, reg[(uint8_t)(op1)], reg[(uint8_t)(op2)], &sr);
     e4c:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <op1>
     e50:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <op1+0x1>
     e54:	6c 01       	movw	r12, r24
     e56:	dd 24       	eor	r13, r13
     e58:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <op2>
     e5c:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <op2+0x1>
     e60:	a0 91 11 01 	lds	r26, 0x0111	; 0x800111 <op2+0x2>
     e64:	b0 91 12 01 	lds	r27, 0x0112	; 0x800112 <op2+0x3>
     e68:	88 2f       	mov	r24, r24
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	88 0f       	add	r24, r24
     e6e:	99 1f       	adc	r25, r25
     e70:	88 0f       	add	r24, r24
     e72:	99 1f       	adc	r25, r25
     e74:	85 5e       	subi	r24, 0xE5	; 229
     e76:	9e 4f       	sbci	r25, 0xFE	; 254
     e78:	fc 01       	movw	r30, r24
     e7a:	20 81       	ld	r18, Z
     e7c:	31 81       	ldd	r19, Z+1	; 0x01
     e7e:	42 81       	ldd	r20, Z+2	; 0x02
     e80:	53 81       	ldd	r21, Z+3	; 0x03
     e82:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <op1>
     e86:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <op1+0x1>
     e8a:	99 27       	eor	r25, r25
     e8c:	88 0f       	add	r24, r24
     e8e:	99 1f       	adc	r25, r25
     e90:	88 0f       	add	r24, r24
     e92:	99 1f       	adc	r25, r25
     e94:	85 5e       	subi	r24, 0xE5	; 229
     e96:	9e 4f       	sbci	r25, 0xFE	; 254
     e98:	fc 01       	movw	r30, r24
     e9a:	80 81       	ld	r24, Z
     e9c:	91 81       	ldd	r25, Z+1	; 0x01
     e9e:	a2 81       	ldd	r26, Z+2	; 0x02
     ea0:	b3 81       	ldd	r27, Z+3	; 0x03
     ea2:	0f 2e       	mov	r0, r31
     ea4:	fa e0       	ldi	r31, 0x0A	; 10
     ea6:	ef 2e       	mov	r14, r31
     ea8:	f1 e0       	ldi	r31, 0x01	; 1
     eaa:	ff 2e       	mov	r15, r31
     eac:	f0 2d       	mov	r31, r0
     eae:	89 01       	movw	r16, r18
     eb0:	9a 01       	movw	r18, r20
     eb2:	ac 01       	movw	r20, r24
     eb4:	bd 01       	movw	r22, r26
     eb6:	82 e1       	ldi	r24, 0x12	; 18
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	0e 94 97 00 	call	0x12e	; 0x12e <alu>
     ebe:	dc 01       	movw	r26, r24
     ec0:	cb 01       	movw	r24, r22
     ec2:	96 01       	movw	r18, r12
     ec4:	22 0f       	add	r18, r18
     ec6:	33 1f       	adc	r19, r19
     ec8:	22 0f       	add	r18, r18
     eca:	33 1f       	adc	r19, r19
     ecc:	25 5e       	subi	r18, 0xE5	; 229
     ece:	3e 4f       	sbci	r19, 0xFE	; 254
     ed0:	f9 01       	movw	r30, r18
     ed2:	80 83       	st	Z, r24
     ed4:	91 83       	std	Z+1, r25	; 0x01
     ed6:	a2 83       	std	Z+2, r26	; 0x02
     ed8:	b3 83       	std	Z+3, r27	; 0x03
				   break;
     eda:	25 c2       	rjmp	.+1098   	; 0x1326 <__stack+0xa27>
			   }
			   case SUB:
			   {
				   reg[(uint8_t)(op1)] = alu(SUB, reg[(uint8_t)(op1)], reg[(uint8_t)(op2)], &sr);
     edc:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <op1>
     ee0:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <op1+0x1>
     ee4:	6c 01       	movw	r12, r24
     ee6:	dd 24       	eor	r13, r13
     ee8:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <op2>
     eec:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <op2+0x1>
     ef0:	a0 91 11 01 	lds	r26, 0x0111	; 0x800111 <op2+0x2>
     ef4:	b0 91 12 01 	lds	r27, 0x0112	; 0x800112 <op2+0x3>
     ef8:	88 2f       	mov	r24, r24
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	88 0f       	add	r24, r24
     efe:	99 1f       	adc	r25, r25
     f00:	88 0f       	add	r24, r24
     f02:	99 1f       	adc	r25, r25
     f04:	85 5e       	subi	r24, 0xE5	; 229
     f06:	9e 4f       	sbci	r25, 0xFE	; 254
     f08:	fc 01       	movw	r30, r24
     f0a:	20 81       	ld	r18, Z
     f0c:	31 81       	ldd	r19, Z+1	; 0x01
     f0e:	42 81       	ldd	r20, Z+2	; 0x02
     f10:	53 81       	ldd	r21, Z+3	; 0x03
     f12:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <op1>
     f16:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <op1+0x1>
     f1a:	99 27       	eor	r25, r25
     f1c:	88 0f       	add	r24, r24
     f1e:	99 1f       	adc	r25, r25
     f20:	88 0f       	add	r24, r24
     f22:	99 1f       	adc	r25, r25
     f24:	85 5e       	subi	r24, 0xE5	; 229
     f26:	9e 4f       	sbci	r25, 0xFE	; 254
     f28:	fc 01       	movw	r30, r24
     f2a:	80 81       	ld	r24, Z
     f2c:	91 81       	ldd	r25, Z+1	; 0x01
     f2e:	a2 81       	ldd	r26, Z+2	; 0x02
     f30:	b3 81       	ldd	r27, Z+3	; 0x03
     f32:	0f 2e       	mov	r0, r31
     f34:	fa e0       	ldi	r31, 0x0A	; 10
     f36:	ef 2e       	mov	r14, r31
     f38:	f1 e0       	ldi	r31, 0x01	; 1
     f3a:	ff 2e       	mov	r15, r31
     f3c:	f0 2d       	mov	r31, r0
     f3e:	89 01       	movw	r16, r18
     f40:	9a 01       	movw	r18, r20
     f42:	ac 01       	movw	r20, r24
     f44:	bd 01       	movw	r22, r26
     f46:	83 e1       	ldi	r24, 0x13	; 19
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	0e 94 97 00 	call	0x12e	; 0x12e <alu>
     f4e:	dc 01       	movw	r26, r24
     f50:	cb 01       	movw	r24, r22
     f52:	96 01       	movw	r18, r12
     f54:	22 0f       	add	r18, r18
     f56:	33 1f       	adc	r19, r19
     f58:	22 0f       	add	r18, r18
     f5a:	33 1f       	adc	r19, r19
     f5c:	25 5e       	subi	r18, 0xE5	; 229
     f5e:	3e 4f       	sbci	r19, 0xFE	; 254
     f60:	f9 01       	movw	r30, r18
     f62:	80 83       	st	Z, r24
     f64:	91 83       	std	Z+1, r25	; 0x01
     f66:	a2 83       	std	Z+2, r26	; 0x02
     f68:	b3 83       	std	Z+3, r27	; 0x03
				   break;
     f6a:	dd c1       	rjmp	.+954    	; 0x1326 <__stack+0xa27>
			   }
			   case INC:
			   {
				   reg[(uint8_t)(op1)] = alu(ADD, reg[(uint8_t)(op1)], 1, &sr);
     f6c:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <op1>
     f70:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <op1+0x1>
     f74:	6c 01       	movw	r12, r24
     f76:	dd 24       	eor	r13, r13
     f78:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <op1>
     f7c:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <op1+0x1>
     f80:	99 27       	eor	r25, r25
     f82:	88 0f       	add	r24, r24
     f84:	99 1f       	adc	r25, r25
     f86:	88 0f       	add	r24, r24
     f88:	99 1f       	adc	r25, r25
     f8a:	85 5e       	subi	r24, 0xE5	; 229
     f8c:	9e 4f       	sbci	r25, 0xFE	; 254
     f8e:	fc 01       	movw	r30, r24
     f90:	80 81       	ld	r24, Z
     f92:	91 81       	ldd	r25, Z+1	; 0x01
     f94:	a2 81       	ldd	r26, Z+2	; 0x02
     f96:	b3 81       	ldd	r27, Z+3	; 0x03
     f98:	0f 2e       	mov	r0, r31
     f9a:	fa e0       	ldi	r31, 0x0A	; 10
     f9c:	ef 2e       	mov	r14, r31
     f9e:	f1 e0       	ldi	r31, 0x01	; 1
     fa0:	ff 2e       	mov	r15, r31
     fa2:	f0 2d       	mov	r31, r0
     fa4:	01 e0       	ldi	r16, 0x01	; 1
     fa6:	10 e0       	ldi	r17, 0x00	; 0
     fa8:	20 e0       	ldi	r18, 0x00	; 0
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	ac 01       	movw	r20, r24
     fae:	bd 01       	movw	r22, r26
     fb0:	82 e1       	ldi	r24, 0x12	; 18
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	0e 94 97 00 	call	0x12e	; 0x12e <alu>
     fb8:	dc 01       	movw	r26, r24
     fba:	cb 01       	movw	r24, r22
     fbc:	96 01       	movw	r18, r12
     fbe:	22 0f       	add	r18, r18
     fc0:	33 1f       	adc	r19, r19
     fc2:	22 0f       	add	r18, r18
     fc4:	33 1f       	adc	r19, r19
     fc6:	25 5e       	subi	r18, 0xE5	; 229
     fc8:	3e 4f       	sbci	r19, 0xFE	; 254
     fca:	f9 01       	movw	r30, r18
     fcc:	80 83       	st	Z, r24
     fce:	91 83       	std	Z+1, r25	; 0x01
     fd0:	a2 83       	std	Z+2, r26	; 0x02
     fd2:	b3 83       	std	Z+3, r27	; 0x03
				   break;
     fd4:	a8 c1       	rjmp	.+848    	; 0x1326 <__stack+0xa27>
			   }
			   case DEC:
			   {
				   reg[(uint8_t)(op1)] = alu(SUB, reg[(uint8_t)(op1)], 1, &sr);
     fd6:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <op1>
     fda:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <op1+0x1>
     fde:	6c 01       	movw	r12, r24
     fe0:	dd 24       	eor	r13, r13
     fe2:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <op1>
     fe6:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <op1+0x1>
     fea:	99 27       	eor	r25, r25
     fec:	88 0f       	add	r24, r24
     fee:	99 1f       	adc	r25, r25
     ff0:	88 0f       	add	r24, r24
     ff2:	99 1f       	adc	r25, r25
     ff4:	85 5e       	subi	r24, 0xE5	; 229
     ff6:	9e 4f       	sbci	r25, 0xFE	; 254
     ff8:	fc 01       	movw	r30, r24
     ffa:	80 81       	ld	r24, Z
     ffc:	91 81       	ldd	r25, Z+1	; 0x01
     ffe:	a2 81       	ldd	r26, Z+2	; 0x02
    1000:	b3 81       	ldd	r27, Z+3	; 0x03
    1002:	0f 2e       	mov	r0, r31
    1004:	fa e0       	ldi	r31, 0x0A	; 10
    1006:	ef 2e       	mov	r14, r31
    1008:	f1 e0       	ldi	r31, 0x01	; 1
    100a:	ff 2e       	mov	r15, r31
    100c:	f0 2d       	mov	r31, r0
    100e:	01 e0       	ldi	r16, 0x01	; 1
    1010:	10 e0       	ldi	r17, 0x00	; 0
    1012:	20 e0       	ldi	r18, 0x00	; 0
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	ac 01       	movw	r20, r24
    1018:	bd 01       	movw	r22, r26
    101a:	83 e1       	ldi	r24, 0x13	; 19
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	0e 94 97 00 	call	0x12e	; 0x12e <alu>
    1022:	dc 01       	movw	r26, r24
    1024:	cb 01       	movw	r24, r22
    1026:	96 01       	movw	r18, r12
    1028:	22 0f       	add	r18, r18
    102a:	33 1f       	adc	r19, r19
    102c:	22 0f       	add	r18, r18
    102e:	33 1f       	adc	r19, r19
    1030:	25 5e       	subi	r18, 0xE5	; 229
    1032:	3e 4f       	sbci	r19, 0xFE	; 254
    1034:	f9 01       	movw	r30, r18
    1036:	80 83       	st	Z, r24
    1038:	91 83       	std	Z+1, r25	; 0x01
    103a:	a2 83       	std	Z+2, r26	; 0x02
    103c:	b3 83       	std	Z+3, r27	; 0x03
				   break;
    103e:	73 c1       	rjmp	.+742    	; 0x1326 <__stack+0xa27>
			   }
			   case CMPI:
			   {
				   (void)(alu(SUB, reg[(uint8_t)(op1)], op2, &sr));
    1040:	20 91 0f 01 	lds	r18, 0x010F	; 0x80010f <op2>
    1044:	30 91 10 01 	lds	r19, 0x0110	; 0x800110 <op2+0x1>
    1048:	40 91 11 01 	lds	r20, 0x0111	; 0x800111 <op2+0x2>
    104c:	50 91 12 01 	lds	r21, 0x0112	; 0x800112 <op2+0x3>
    1050:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <op1>
    1054:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <op1+0x1>
    1058:	99 27       	eor	r25, r25
    105a:	88 0f       	add	r24, r24
    105c:	99 1f       	adc	r25, r25
    105e:	88 0f       	add	r24, r24
    1060:	99 1f       	adc	r25, r25
    1062:	85 5e       	subi	r24, 0xE5	; 229
    1064:	9e 4f       	sbci	r25, 0xFE	; 254
    1066:	fc 01       	movw	r30, r24
    1068:	80 81       	ld	r24, Z
    106a:	91 81       	ldd	r25, Z+1	; 0x01
    106c:	a2 81       	ldd	r26, Z+2	; 0x02
    106e:	b3 81       	ldd	r27, Z+3	; 0x03
    1070:	0f 2e       	mov	r0, r31
    1072:	fa e0       	ldi	r31, 0x0A	; 10
    1074:	ef 2e       	mov	r14, r31
    1076:	f1 e0       	ldi	r31, 0x01	; 1
    1078:	ff 2e       	mov	r15, r31
    107a:	f0 2d       	mov	r31, r0
    107c:	89 01       	movw	r16, r18
    107e:	9a 01       	movw	r18, r20
    1080:	ac 01       	movw	r20, r24
    1082:	bd 01       	movw	r22, r26
    1084:	83 e1       	ldi	r24, 0x13	; 19
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	0e 94 97 00 	call	0x12e	; 0x12e <alu>
				   break;
    108c:	4c c1       	rjmp	.+664    	; 0x1326 <__stack+0xa27>
			   }
			   case CMP:
			   {
				   (void)(alu(SUB, reg[(uint8_t)(op1)], reg[(uint8_t)(op2)], &sr));
    108e:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <op2>
    1092:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <op2+0x1>
    1096:	a0 91 11 01 	lds	r26, 0x0111	; 0x800111 <op2+0x2>
    109a:	b0 91 12 01 	lds	r27, 0x0112	; 0x800112 <op2+0x3>
    109e:	88 2f       	mov	r24, r24
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	88 0f       	add	r24, r24
    10a4:	99 1f       	adc	r25, r25
    10a6:	88 0f       	add	r24, r24
    10a8:	99 1f       	adc	r25, r25
    10aa:	85 5e       	subi	r24, 0xE5	; 229
    10ac:	9e 4f       	sbci	r25, 0xFE	; 254
    10ae:	fc 01       	movw	r30, r24
    10b0:	20 81       	ld	r18, Z
    10b2:	31 81       	ldd	r19, Z+1	; 0x01
    10b4:	42 81       	ldd	r20, Z+2	; 0x02
    10b6:	53 81       	ldd	r21, Z+3	; 0x03
    10b8:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <op1>
    10bc:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <op1+0x1>
    10c0:	99 27       	eor	r25, r25
    10c2:	88 0f       	add	r24, r24
    10c4:	99 1f       	adc	r25, r25
    10c6:	88 0f       	add	r24, r24
    10c8:	99 1f       	adc	r25, r25
    10ca:	85 5e       	subi	r24, 0xE5	; 229
    10cc:	9e 4f       	sbci	r25, 0xFE	; 254
    10ce:	fc 01       	movw	r30, r24
    10d0:	80 81       	ld	r24, Z
    10d2:	91 81       	ldd	r25, Z+1	; 0x01
    10d4:	a2 81       	ldd	r26, Z+2	; 0x02
    10d6:	b3 81       	ldd	r27, Z+3	; 0x03
    10d8:	0f 2e       	mov	r0, r31
    10da:	fa e0       	ldi	r31, 0x0A	; 10
    10dc:	ef 2e       	mov	r14, r31
    10de:	f1 e0       	ldi	r31, 0x01	; 1
    10e0:	ff 2e       	mov	r15, r31
    10e2:	f0 2d       	mov	r31, r0
    10e4:	89 01       	movw	r16, r18
    10e6:	9a 01       	movw	r18, r20
    10e8:	ac 01       	movw	r20, r24
    10ea:	bd 01       	movw	r22, r26
    10ec:	83 e1       	ldi	r24, 0x13	; 19
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	0e 94 97 00 	call	0x12e	; 0x12e <alu>
				   break;
    10f4:	18 c1       	rjmp	.+560    	; 0x1326 <__stack+0xa27>
			   }
			   case CALL:
			   {
				   stack_push(pc);
    10f6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    10fa:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    10fe:	cc 01       	movw	r24, r24
    1100:	a0 e0       	ldi	r26, 0x00	; 0
    1102:	b0 e0       	ldi	r27, 0x00	; 0
    1104:	bc 01       	movw	r22, r24
    1106:	cd 01       	movw	r24, r26
    1108:	0e 94 0c 12 	call	0x2418	; 0x2418 <stack_push>
				   pc = op1;
    110c:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <op1>
    1110:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <op1+0x1>
    1114:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1118:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
				   break;
    111c:	04 c1       	rjmp	.+520    	; 0x1326 <__stack+0xa27>
			   }
			   case RET:
			   {
				   pc = stack_pop();
    111e:	0e 94 60 12 	call	0x24c0	; 0x24c0 <stack_pop>
    1122:	dc 01       	movw	r26, r24
    1124:	cb 01       	movw	r24, r22
    1126:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    112a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
				   break;
    112e:	fb c0       	rjmp	.+502    	; 0x1326 <__stack+0xa27>
			   }
			   case RETI:
			   {
				   return_from_interrupt();
    1130:	0e 94 b3 0b 	call	0x1766	; 0x1766 <return_from_interrupt>
				   break;
    1134:	f8 c0       	rjmp	.+496    	; 0x1326 <__stack+0xa27>
			   }
			   case PUSH:
			   {
				   stack_push(reg[(uint8_t)(op1)]);
    1136:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <op1>
    113a:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <op1+0x1>
    113e:	99 27       	eor	r25, r25
    1140:	88 0f       	add	r24, r24
    1142:	99 1f       	adc	r25, r25
    1144:	88 0f       	add	r24, r24
    1146:	99 1f       	adc	r25, r25
    1148:	85 5e       	subi	r24, 0xE5	; 229
    114a:	9e 4f       	sbci	r25, 0xFE	; 254
    114c:	fc 01       	movw	r30, r24
    114e:	80 81       	ld	r24, Z
    1150:	91 81       	ldd	r25, Z+1	; 0x01
    1152:	a2 81       	ldd	r26, Z+2	; 0x02
    1154:	b3 81       	ldd	r27, Z+3	; 0x03
    1156:	bc 01       	movw	r22, r24
    1158:	cd 01       	movw	r24, r26
    115a:	0e 94 0c 12 	call	0x2418	; 0x2418 <stack_push>
				   break;
    115e:	e3 c0       	rjmp	.+454    	; 0x1326 <__stack+0xa27>
			   }
			   case POP:
			   {
				   reg[(uint8_t)(op1)] = stack_pop();
    1160:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <op1>
    1164:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <op1+0x1>
    1168:	8c 01       	movw	r16, r24
    116a:	11 27       	eor	r17, r17
    116c:	0e 94 60 12 	call	0x24c0	; 0x24c0 <stack_pop>
    1170:	dc 01       	movw	r26, r24
    1172:	cb 01       	movw	r24, r22
    1174:	98 01       	movw	r18, r16
    1176:	22 0f       	add	r18, r18
    1178:	33 1f       	adc	r19, r19
    117a:	22 0f       	add	r18, r18
    117c:	33 1f       	adc	r19, r19
    117e:	25 5e       	subi	r18, 0xE5	; 229
    1180:	3e 4f       	sbci	r19, 0xFE	; 254
    1182:	f9 01       	movw	r30, r18
    1184:	80 83       	st	Z, r24
    1186:	91 83       	std	Z+1, r25	; 0x01
    1188:	a2 83       	std	Z+2, r26	; 0x02
    118a:	b3 83       	std	Z+3, r27	; 0x03
				   break;
    118c:	cc c0       	rjmp	.+408    	; 0x1326 <__stack+0xa27>
			   }
			   case JMP:
			   {
				   pc = (uint16_t)(op1);
    118e:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <op1>
    1192:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <op1+0x1>
    1196:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    119a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
				   break;
    119e:	c3 c0       	rjmp	.+390    	; 0x1326 <__stack+0xa27>
			   }
			   case JE:
			   {
				   if (read(sr, Z)) pc = op1;
    11a0:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <sr>
    11a4:	88 2f       	mov	r24, r24
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	42 e0       	ldi	r20, 0x02	; 2
    11aa:	50 e0       	ldi	r21, 0x00	; 0
    11ac:	60 e0       	ldi	r22, 0x00	; 0
    11ae:	70 e0       	ldi	r23, 0x00	; 0
    11b0:	0e 94 58 02 	call	0x4b0	; 0x4b0 <read>
    11b4:	88 23       	and	r24, r24
    11b6:	09 f4       	brne	.+2      	; 0x11ba <__stack+0x8bb>
    11b8:	ab c0       	rjmp	.+342    	; 0x1310 <__stack+0xa11>
    11ba:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <op1>
    11be:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <op1+0x1>
    11c2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    11c6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
				   break;
    11ca:	a2 c0       	rjmp	.+324    	; 0x1310 <__stack+0xa11>
			   }
			   case JNE:
			   {
				   if (!read(sr, Z)) pc = op1;
    11cc:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <sr>
    11d0:	88 2f       	mov	r24, r24
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	42 e0       	ldi	r20, 0x02	; 2
    11d6:	50 e0       	ldi	r21, 0x00	; 0
    11d8:	60 e0       	ldi	r22, 0x00	; 0
    11da:	70 e0       	ldi	r23, 0x00	; 0
    11dc:	0e 94 58 02 	call	0x4b0	; 0x4b0 <read>
    11e0:	98 2f       	mov	r25, r24
    11e2:	81 e0       	ldi	r24, 0x01	; 1
    11e4:	89 27       	eor	r24, r25
    11e6:	88 23       	and	r24, r24
    11e8:	09 f4       	brne	.+2      	; 0x11ec <__stack+0x8ed>
    11ea:	94 c0       	rjmp	.+296    	; 0x1314 <__stack+0xa15>
    11ec:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <op1>
    11f0:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <op1+0x1>
    11f4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    11f8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
				   break;
    11fc:	8b c0       	rjmp	.+278    	; 0x1314 <__stack+0xa15>
			   }
			   case JGE:
			   {
				   if (!read(sr, S)) pc = op1;
    11fe:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <sr>
    1202:	88 2f       	mov	r24, r24
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	44 e0       	ldi	r20, 0x04	; 4
    1208:	50 e0       	ldi	r21, 0x00	; 0
    120a:	60 e0       	ldi	r22, 0x00	; 0
    120c:	70 e0       	ldi	r23, 0x00	; 0
    120e:	0e 94 58 02 	call	0x4b0	; 0x4b0 <read>
    1212:	98 2f       	mov	r25, r24
    1214:	81 e0       	ldi	r24, 0x01	; 1
    1216:	89 27       	eor	r24, r25
    1218:	88 23       	and	r24, r24
    121a:	09 f4       	brne	.+2      	; 0x121e <__stack+0x91f>
    121c:	7d c0       	rjmp	.+250    	; 0x1318 <__stack+0xa19>
    121e:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <op1>
    1222:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <op1+0x1>
    1226:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    122a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
				   break;
    122e:	74 c0       	rjmp	.+232    	; 0x1318 <__stack+0xa19>
			   }
			   case JGT:
			   {
				   if (!read(sr, S) && !read(sr, Z)) pc = op1;
    1230:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <sr>
    1234:	88 2f       	mov	r24, r24
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	44 e0       	ldi	r20, 0x04	; 4
    123a:	50 e0       	ldi	r21, 0x00	; 0
    123c:	60 e0       	ldi	r22, 0x00	; 0
    123e:	70 e0       	ldi	r23, 0x00	; 0
    1240:	0e 94 58 02 	call	0x4b0	; 0x4b0 <read>
    1244:	98 2f       	mov	r25, r24
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	89 27       	eor	r24, r25
    124a:	88 23       	and	r24, r24
    124c:	09 f4       	brne	.+2      	; 0x1250 <__stack+0x951>
    124e:	66 c0       	rjmp	.+204    	; 0x131c <__stack+0xa1d>
    1250:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <sr>
    1254:	88 2f       	mov	r24, r24
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	42 e0       	ldi	r20, 0x02	; 2
    125a:	50 e0       	ldi	r21, 0x00	; 0
    125c:	60 e0       	ldi	r22, 0x00	; 0
    125e:	70 e0       	ldi	r23, 0x00	; 0
    1260:	0e 94 58 02 	call	0x4b0	; 0x4b0 <read>
    1264:	98 2f       	mov	r25, r24
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	89 27       	eor	r24, r25
    126a:	88 23       	and	r24, r24
    126c:	09 f4       	brne	.+2      	; 0x1270 <__stack+0x971>
    126e:	56 c0       	rjmp	.+172    	; 0x131c <__stack+0xa1d>
    1270:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <op1>
    1274:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <op1+0x1>
    1278:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    127c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
				   break;
    1280:	4d c0       	rjmp	.+154    	; 0x131c <__stack+0xa1d>
			   }
			   case JLE:
			   {
				   if (read(sr, S) || read(sr, Z)) pc = op1;
    1282:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <sr>
    1286:	88 2f       	mov	r24, r24
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	44 e0       	ldi	r20, 0x04	; 4
    128c:	50 e0       	ldi	r21, 0x00	; 0
    128e:	60 e0       	ldi	r22, 0x00	; 0
    1290:	70 e0       	ldi	r23, 0x00	; 0
    1292:	0e 94 58 02 	call	0x4b0	; 0x4b0 <read>
    1296:	88 23       	and	r24, r24
    1298:	61 f4       	brne	.+24     	; 0x12b2 <__stack+0x9b3>
    129a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <sr>
    129e:	88 2f       	mov	r24, r24
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	42 e0       	ldi	r20, 0x02	; 2
    12a4:	50 e0       	ldi	r21, 0x00	; 0
    12a6:	60 e0       	ldi	r22, 0x00	; 0
    12a8:	70 e0       	ldi	r23, 0x00	; 0
    12aa:	0e 94 58 02 	call	0x4b0	; 0x4b0 <read>
    12ae:	88 23       	and	r24, r24
    12b0:	b9 f1       	breq	.+110    	; 0x1320 <__stack+0xa21>
    12b2:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <op1>
    12b6:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <op1+0x1>
    12ba:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    12be:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
				   break;
    12c2:	2e c0       	rjmp	.+92     	; 0x1320 <__stack+0xa21>
			   }
			   case JLO:
			   {
				   if (read(sr, S)) pc = op1;
    12c4:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <sr>
    12c8:	88 2f       	mov	r24, r24
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	44 e0       	ldi	r20, 0x04	; 4
    12ce:	50 e0       	ldi	r21, 0x00	; 0
    12d0:	60 e0       	ldi	r22, 0x00	; 0
    12d2:	70 e0       	ldi	r23, 0x00	; 0
    12d4:	0e 94 58 02 	call	0x4b0	; 0x4b0 <read>
    12d8:	88 23       	and	r24, r24
    12da:	21 f1       	breq	.+72     	; 0x1324 <__stack+0xa25>
    12dc:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <op1>
    12e0:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <op1+0x1>
    12e4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    12e8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
				   break;
    12ec:	1b c0       	rjmp	.+54     	; 0x1324 <__stack+0xa25>
			   }
			   case SEI:
			   {
				   set(sr, I);
    12ee:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <sr>
    12f2:	80 62       	ori	r24, 0x20	; 32
    12f4:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <sr>
				   break;
    12f8:	16 c0       	rjmp	.+44     	; 0x1326 <__stack+0xa27>
			   }
			   case CLI:
			   {
				   clr(sr, I);
    12fa:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <sr>
    12fe:	8f 7d       	andi	r24, 0xDF	; 223
    1300:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <sr>
				   break;
    1304:	10 c0       	rjmp	.+32     	; 0x1326 <__stack+0xa27>
			   }
			   default:
			   {
				   io_reset();
    1306:	0e 94 b5 09 	call	0x136a	; 0x136a <io_reset>
				   break;
    130a:	0d c0       	rjmp	.+26     	; 0x1326 <__stack+0xa27>
	   {
		   switch (op_code)
		   {
			   case NOP:
			   {
				   break;
    130c:	00 00       	nop
    130e:	0b c0       	rjmp	.+22     	; 0x1326 <__stack+0xa27>
				   break;
			   }
			   case JE:
			   {
				   if (read(sr, Z)) pc = op1;
				   break;
    1310:	00 00       	nop
    1312:	09 c0       	rjmp	.+18     	; 0x1326 <__stack+0xa27>
			   }
			   case JNE:
			   {
				   if (!read(sr, Z)) pc = op1;
				   break;
    1314:	00 00       	nop
    1316:	07 c0       	rjmp	.+14     	; 0x1326 <__stack+0xa27>
			   }
			   case JGE:
			   {
				   if (!read(sr, S)) pc = op1;
				   break;
    1318:	00 00       	nop
    131a:	05 c0       	rjmp	.+10     	; 0x1326 <__stack+0xa27>
			   }
			   case JGT:
			   {
				   if (!read(sr, S) && !read(sr, Z)) pc = op1;
				   break;
    131c:	00 00       	nop
    131e:	03 c0       	rjmp	.+6      	; 0x1326 <__stack+0xa27>
			   }
			   case JLE:
			   {
				   if (read(sr, S) || read(sr, Z)) pc = op1;
				   break;
    1320:	00 00       	nop
    1322:	01 c0       	rjmp	.+2      	; 0x1326 <__stack+0xa27>
			   }
			   case JLO:
			   {
				   if (read(sr, S)) pc = op1;
				   break;
    1324:	00 00       	nop
				   io_reset();
				   break;
			   }
		   }

		   check_for_interrupt_requests();
    1326:	0e 94 27 0b 	call	0x164e	; 0x164e <check_for_interrupt_requests>
		   current_state = CPU_STATE_FETCH;
    132a:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <current_state>
    132e:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <current_state+0x1>
    1332:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <current_state+0x2>
    1336:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <current_state+0x3>
		   break;
    133a:	03 c0       	rjmp	.+6      	; 0x1342 <__stack+0xa43>
	   }
	   default:
	   {
		   io_reset();
    133c:	0e 94 b5 09 	call	0x136a	; 0x136a <io_reset>
		   break;
    1340:	00 00       	nop
	   }
   }

   io_update();
    1342:	0e 94 d5 09 	call	0x13aa	; 0x13aa <io_update>
   monitor_interrupts();
    1346:	0e 94 8c 0a 	call	0x1518	; 0x1518 <monitor_interrupts>
   return;
    134a:	00 00       	nop
   
}
    134c:	0f 90       	pop	r0
    134e:	0f 90       	pop	r0
    1350:	0f 90       	pop	r0
    1352:	0f 90       	pop	r0
    1354:	df 91       	pop	r29
    1356:	cf 91       	pop	r28
    1358:	1f 91       	pop	r17
    135a:	0f 91       	pop	r16
    135c:	ff 90       	pop	r15
    135e:	ef 90       	pop	r14
    1360:	df 90       	pop	r13
    1362:	cf 90       	pop	r12
    1364:	bf 90       	pop	r11
    1366:	af 90       	pop	r10
    1368:	08 95       	ret

0000136a <io_reset>:

static void io_reset(void)
{
    136a:	cf 93       	push	r28
    136c:	df 93       	push	r29
    136e:	cd b7       	in	r28, 0x3d	; 61
    1370:	de b7       	in	r29, 0x3e	; 62
	DDRB = 0x00;
    1372:	84 e2       	ldi	r24, 0x24	; 36
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	fc 01       	movw	r30, r24
    1378:	10 82       	st	Z, r1
	DDRC = 0x00;
    137a:	87 e2       	ldi	r24, 0x27	; 39
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	fc 01       	movw	r30, r24
    1380:	10 82       	st	Z, r1
	DDRD = 0x00;
    1382:	8a e2       	ldi	r24, 0x2A	; 42
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	fc 01       	movw	r30, r24
    1388:	10 82       	st	Z, r1

	PORTB = 0x00;
    138a:	85 e2       	ldi	r24, 0x25	; 37
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	fc 01       	movw	r30, r24
    1390:	10 82       	st	Z, r1
	PORTC = 0x00;
    1392:	88 e2       	ldi	r24, 0x28	; 40
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	fc 01       	movw	r30, r24
    1398:	10 82       	st	Z, r1
	PORTD = 0x00;
    139a:	8b e2       	ldi	r24, 0x2B	; 43
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	fc 01       	movw	r30, r24
    13a0:	10 82       	st	Z, r1
	
	return;
    13a2:	00 00       	nop
}
    13a4:	df 91       	pop	r29
    13a6:	cf 91       	pop	r28
    13a8:	08 95       	ret

000013aa <io_update>:

static void io_update(void)
{
    13aa:	cf 93       	push	r28
    13ac:	df 93       	push	r29
    13ae:	cd b7       	in	r28, 0x3d	; 61
    13b0:	de b7       	in	r29, 0x3e	; 62
    13b2:	2c 97       	sbiw	r28, 0x0c	; 12
    13b4:	0f b6       	in	r0, 0x3f	; 63
    13b6:	f8 94       	cli
    13b8:	de bf       	out	0x3e, r29	; 62
    13ba:	0f be       	out	0x3f, r0	; 63
    13bc:	cd bf       	out	0x3d, r28	; 61
	const uint32_t ddra = data_memory_read(DDRA);
    13be:	60 e0       	ldi	r22, 0x00	; 0
    13c0:	70 e0       	ldi	r23, 0x00	; 0
    13c2:	cb 01       	movw	r24, r22
    13c4:	0e 94 37 0c 	call	0x186e	; 0x186e <data_memory_read>
    13c8:	09 2e       	mov	r0, r25
    13ca:	00 0c       	add	r0, r0
    13cc:	aa 0b       	sbc	r26, r26
    13ce:	bb 0b       	sbc	r27, r27
    13d0:	89 83       	std	Y+1, r24	; 0x01
    13d2:	9a 83       	std	Y+2, r25	; 0x02
    13d4:	ab 83       	std	Y+3, r26	; 0x03
    13d6:	bc 83       	std	Y+4, r27	; 0x04
	const uint32_t porta = data_memory_read(PORTA);
    13d8:	61 e0       	ldi	r22, 0x01	; 1
    13da:	70 e0       	ldi	r23, 0x00	; 0
    13dc:	80 e0       	ldi	r24, 0x00	; 0
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	0e 94 37 0c 	call	0x186e	; 0x186e <data_memory_read>
    13e4:	09 2e       	mov	r0, r25
    13e6:	00 0c       	add	r0, r0
    13e8:	aa 0b       	sbc	r26, r26
    13ea:	bb 0b       	sbc	r27, r27
    13ec:	8d 83       	std	Y+5, r24	; 0x05
    13ee:	9e 83       	std	Y+6, r25	; 0x06
    13f0:	af 83       	std	Y+7, r26	; 0x07
    13f2:	b8 87       	std	Y+8, r27	; 0x08
	const uint32_t pina = (uint32_t)(((uint32_t)(PINC) << 16) | ((uint16_t)(PINB) << 8) | PIND);
    13f4:	86 e2       	ldi	r24, 0x26	; 38
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	fc 01       	movw	r30, r24
    13fa:	80 81       	ld	r24, Z
    13fc:	88 2f       	mov	r24, r24
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	a0 e0       	ldi	r26, 0x00	; 0
    1402:	b0 e0       	ldi	r27, 0x00	; 0
    1404:	ac 01       	movw	r20, r24
    1406:	33 27       	eor	r19, r19
    1408:	22 27       	eor	r18, r18
    140a:	83 e2       	ldi	r24, 0x23	; 35
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	fc 01       	movw	r30, r24
    1410:	80 81       	ld	r24, Z
    1412:	88 2f       	mov	r24, r24
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	98 2f       	mov	r25, r24
    1418:	88 27       	eor	r24, r24
    141a:	cc 01       	movw	r24, r24
    141c:	a0 e0       	ldi	r26, 0x00	; 0
    141e:	b0 e0       	ldi	r27, 0x00	; 0
    1420:	28 2b       	or	r18, r24
    1422:	39 2b       	or	r19, r25
    1424:	4a 2b       	or	r20, r26
    1426:	5b 2b       	or	r21, r27
    1428:	89 e2       	ldi	r24, 0x29	; 41
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	fc 01       	movw	r30, r24
    142e:	80 81       	ld	r24, Z
    1430:	88 2f       	mov	r24, r24
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	a0 e0       	ldi	r26, 0x00	; 0
    1436:	b0 e0       	ldi	r27, 0x00	; 0
    1438:	82 2b       	or	r24, r18
    143a:	93 2b       	or	r25, r19
    143c:	a4 2b       	or	r26, r20
    143e:	b5 2b       	or	r27, r21
    1440:	89 87       	std	Y+9, r24	; 0x09
    1442:	9a 87       	std	Y+10, r25	; 0x0a
    1444:	ab 87       	std	Y+11, r26	; 0x0b
    1446:	bc 87       	std	Y+12, r27	; 0x0c
	
	data_memory_write(PINA, pina);
    1448:	89 85       	ldd	r24, Y+9	; 0x09
    144a:	9a 85       	ldd	r25, Y+10	; 0x0a
    144c:	ab 85       	ldd	r26, Y+11	; 0x0b
    144e:	bc 85       	ldd	r27, Y+12	; 0x0c
    1450:	9c 01       	movw	r18, r24
    1452:	ad 01       	movw	r20, r26
    1454:	62 e0       	ldi	r22, 0x02	; 2
    1456:	70 e0       	ldi	r23, 0x00	; 0
    1458:	80 e0       	ldi	r24, 0x00	; 0
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <data_memory_write>
	
	DDRB = (uint8_t)(ddra >> 8);
    1460:	24 e2       	ldi	r18, 0x24	; 36
    1462:	30 e0       	ldi	r19, 0x00	; 0
    1464:	89 81       	ldd	r24, Y+1	; 0x01
    1466:	9a 81       	ldd	r25, Y+2	; 0x02
    1468:	ab 81       	ldd	r26, Y+3	; 0x03
    146a:	bc 81       	ldd	r27, Y+4	; 0x04
    146c:	89 2f       	mov	r24, r25
    146e:	9a 2f       	mov	r25, r26
    1470:	ab 2f       	mov	r26, r27
    1472:	bb 27       	eor	r27, r27
    1474:	f9 01       	movw	r30, r18
    1476:	80 83       	st	Z, r24
	DDRC = (uint8_t)(ddra >> 16);
    1478:	27 e2       	ldi	r18, 0x27	; 39
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	89 81       	ldd	r24, Y+1	; 0x01
    147e:	9a 81       	ldd	r25, Y+2	; 0x02
    1480:	ab 81       	ldd	r26, Y+3	; 0x03
    1482:	bc 81       	ldd	r27, Y+4	; 0x04
    1484:	cd 01       	movw	r24, r26
    1486:	aa 27       	eor	r26, r26
    1488:	bb 27       	eor	r27, r27
    148a:	f9 01       	movw	r30, r18
    148c:	80 83       	st	Z, r24
	DDRD = (uint8_t)(ddra);
    148e:	8a e2       	ldi	r24, 0x2A	; 42
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	29 81       	ldd	r18, Y+1	; 0x01
    1494:	fc 01       	movw	r30, r24
    1496:	20 83       	st	Z, r18

	PORTB = (uint8_t)(porta >> 8);
    1498:	25 e2       	ldi	r18, 0x25	; 37
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	8d 81       	ldd	r24, Y+5	; 0x05
    149e:	9e 81       	ldd	r25, Y+6	; 0x06
    14a0:	af 81       	ldd	r26, Y+7	; 0x07
    14a2:	b8 85       	ldd	r27, Y+8	; 0x08
    14a4:	89 2f       	mov	r24, r25
    14a6:	9a 2f       	mov	r25, r26
    14a8:	ab 2f       	mov	r26, r27
    14aa:	bb 27       	eor	r27, r27
    14ac:	f9 01       	movw	r30, r18
    14ae:	80 83       	st	Z, r24
	PORTC = (uint8_t)(porta >> 16);
    14b0:	28 e2       	ldi	r18, 0x28	; 40
    14b2:	30 e0       	ldi	r19, 0x00	; 0
    14b4:	8d 81       	ldd	r24, Y+5	; 0x05
    14b6:	9e 81       	ldd	r25, Y+6	; 0x06
    14b8:	af 81       	ldd	r26, Y+7	; 0x07
    14ba:	b8 85       	ldd	r27, Y+8	; 0x08
    14bc:	cd 01       	movw	r24, r26
    14be:	aa 27       	eor	r26, r26
    14c0:	bb 27       	eor	r27, r27
    14c2:	f9 01       	movw	r30, r18
    14c4:	80 83       	st	Z, r24
	PORTD = (uint8_t)(porta);
    14c6:	8b e2       	ldi	r24, 0x2B	; 43
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	2d 81       	ldd	r18, Y+5	; 0x05
    14cc:	fc 01       	movw	r30, r24
    14ce:	20 83       	st	Z, r18
	
	return;
    14d0:	00 00       	nop
}
    14d2:	2c 96       	adiw	r28, 0x0c	; 12
    14d4:	0f b6       	in	r0, 0x3f	; 63
    14d6:	f8 94       	cli
    14d8:	de bf       	out	0x3e, r29	; 62
    14da:	0f be       	out	0x3f, r0	; 63
    14dc:	cd bf       	out	0x3d, r28	; 61
    14de:	df 91       	pop	r29
    14e0:	cf 91       	pop	r28
    14e2:	08 95       	ret

000014e4 <cpu_registers_clear>:

static inline void cpu_registers_clear(void)
{
    14e4:	cf 93       	push	r28
    14e6:	df 93       	push	r29
    14e8:	1f 92       	push	r1
    14ea:	cd b7       	in	r28, 0x3d	; 61
    14ec:	de b7       	in	r29, 0x3e	; 62
	for (uint8_t i = 0; i <  CPU_REGISTER_ADDRESS_WIDTH; ++i)
    14ee:	19 82       	std	Y+1, r1	; 0x01
    14f0:	0b c0       	rjmp	.+22     	; 0x1508 <cpu_registers_clear+0x24>
	{
		reg[0] = 0;
    14f2:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <reg>
    14f6:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <reg+0x1>
    14fa:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <reg+0x2>
    14fe:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <reg+0x3>
	return;
}

static inline void cpu_registers_clear(void)
{
	for (uint8_t i = 0; i <  CPU_REGISTER_ADDRESS_WIDTH; ++i)
    1502:	89 81       	ldd	r24, Y+1	; 0x01
    1504:	8f 5f       	subi	r24, 0xFF	; 255
    1506:	89 83       	std	Y+1, r24	; 0x01
    1508:	89 81       	ldd	r24, Y+1	; 0x01
    150a:	80 32       	cpi	r24, 0x20	; 32
    150c:	90 f3       	brcs	.-28     	; 0x14f2 <cpu_registers_clear+0xe>
	{
		reg[0] = 0;
	}
}
    150e:	00 00       	nop
    1510:	0f 90       	pop	r0
    1512:	df 91       	pop	r29
    1514:	cf 91       	pop	r28
    1516:	08 95       	ret

00001518 <monitor_interrupts>:

static inline void monitor_interrupts(void)
{
    1518:	1f 93       	push	r17
    151a:	cf 93       	push	r28
    151c:	df 93       	push	r29
    151e:	cd b7       	in	r28, 0x3d	; 61
    1520:	de b7       	in	r29, 0x3e	; 62
    1522:	2d 97       	sbiw	r28, 0x0d	; 13
    1524:	0f b6       	in	r0, 0x3f	; 63
    1526:	f8 94       	cli
    1528:	de bf       	out	0x3e, r29	; 62
    152a:	0f be       	out	0x3f, r0	; 63
    152c:	cd bf       	out	0x3d, r28	; 61
	const uint32_t pina = data_memory_read(PINA);
    152e:	62 e0       	ldi	r22, 0x02	; 2
    1530:	70 e0       	ldi	r23, 0x00	; 0
    1532:	80 e0       	ldi	r24, 0x00	; 0
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	0e 94 37 0c 	call	0x186e	; 0x186e <data_memory_read>
    153a:	09 2e       	mov	r0, r25
    153c:	00 0c       	add	r0, r0
    153e:	aa 0b       	sbc	r26, r26
    1540:	bb 0b       	sbc	r27, r27
    1542:	8a 83       	std	Y+2, r24	; 0x02
    1544:	9b 83       	std	Y+3, r25	; 0x03
    1546:	ac 83       	std	Y+4, r26	; 0x04
    1548:	bd 83       	std	Y+5, r27	; 0x05

	for (uint8_t i = 0; i < CPU_REGISTER_ADDRESS_WIDTH; ++i)
    154a:	19 82       	std	Y+1, r1	; 0x01
    154c:	65 c0       	rjmp	.+202    	; 0x1618 <monitor_interrupts+0x100>
	{
		if (read(pina, i) != read(pina_last_value, i))
    154e:	89 81       	ldd	r24, Y+1	; 0x01
    1550:	88 2f       	mov	r24, r24
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	a0 e0       	ldi	r26, 0x00	; 0
    1556:	b0 e0       	ldi	r27, 0x00	; 0
    1558:	2a 81       	ldd	r18, Y+2	; 0x02
    155a:	3b 81       	ldd	r19, Y+3	; 0x03
    155c:	ac 01       	movw	r20, r24
    155e:	bd 01       	movw	r22, r26
    1560:	c9 01       	movw	r24, r18
    1562:	0e 94 58 02 	call	0x4b0	; 0x4b0 <read>
    1566:	18 2f       	mov	r17, r24
    1568:	89 81       	ldd	r24, Y+1	; 0x01
    156a:	88 2f       	mov	r24, r24
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	a0 e0       	ldi	r26, 0x00	; 0
    1570:	b0 e0       	ldi	r27, 0x00	; 0
    1572:	20 91 17 01 	lds	r18, 0x0117	; 0x800117 <pina_last_value>
    1576:	30 91 18 01 	lds	r19, 0x0118	; 0x800118 <pina_last_value+0x1>
    157a:	40 91 19 01 	lds	r20, 0x0119	; 0x800119 <pina_last_value+0x2>
    157e:	50 91 1a 01 	lds	r21, 0x011A	; 0x80011a <pina_last_value+0x3>
    1582:	ac 01       	movw	r20, r24
    1584:	bd 01       	movw	r22, r26
    1586:	c9 01       	movw	r24, r18
    1588:	0e 94 58 02 	call	0x4b0	; 0x4b0 <read>
    158c:	18 17       	cp	r17, r24
    158e:	09 f4       	brne	.+2      	; 0x1592 <monitor_interrupts+0x7a>
    1590:	40 c0       	rjmp	.+128    	; 0x1612 <monitor_interrupts+0xfa>
		{
			const uint32_t pcmsk = data_memory_read(PCMSK);
    1592:	65 e0       	ldi	r22, 0x05	; 5
    1594:	70 e0       	ldi	r23, 0x00	; 0
    1596:	80 e0       	ldi	r24, 0x00	; 0
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	0e 94 37 0c 	call	0x186e	; 0x186e <data_memory_read>
    159e:	09 2e       	mov	r0, r25
    15a0:	00 0c       	add	r0, r0
    15a2:	aa 0b       	sbc	r26, r26
    15a4:	bb 0b       	sbc	r27, r27
    15a6:	8e 83       	std	Y+6, r24	; 0x06
    15a8:	9f 83       	std	Y+7, r25	; 0x07
    15aa:	a8 87       	std	Y+8, r26	; 0x08
    15ac:	b9 87       	std	Y+9, r27	; 0x09

			if (read(pcmsk, i))
    15ae:	89 81       	ldd	r24, Y+1	; 0x01
    15b0:	88 2f       	mov	r24, r24
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	a0 e0       	ldi	r26, 0x00	; 0
    15b6:	b0 e0       	ldi	r27, 0x00	; 0
    15b8:	2e 81       	ldd	r18, Y+6	; 0x06
    15ba:	3f 81       	ldd	r19, Y+7	; 0x07
    15bc:	ac 01       	movw	r20, r24
    15be:	bd 01       	movw	r22, r26
    15c0:	c9 01       	movw	r24, r18
    15c2:	0e 94 58 02 	call	0x4b0	; 0x4b0 <read>
    15c6:	88 23       	and	r24, r24
    15c8:	21 f1       	breq	.+72     	; 0x1612 <monitor_interrupts+0xfa>
			{
				uint32_t ifr = data_memory_read(IFR);
    15ca:	64 e0       	ldi	r22, 0x04	; 4
    15cc:	70 e0       	ldi	r23, 0x00	; 0
    15ce:	80 e0       	ldi	r24, 0x00	; 0
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	0e 94 37 0c 	call	0x186e	; 0x186e <data_memory_read>
    15d6:	09 2e       	mov	r0, r25
    15d8:	00 0c       	add	r0, r0
    15da:	aa 0b       	sbc	r26, r26
    15dc:	bb 0b       	sbc	r27, r27
    15de:	8a 87       	std	Y+10, r24	; 0x0a
    15e0:	9b 87       	std	Y+11, r25	; 0x0b
    15e2:	ac 87       	std	Y+12, r26	; 0x0c
    15e4:	bd 87       	std	Y+13, r27	; 0x0d
				set(ifr, PCIFA);
    15e6:	8a 85       	ldd	r24, Y+10	; 0x0a
    15e8:	9b 85       	ldd	r25, Y+11	; 0x0b
    15ea:	ac 85       	ldd	r26, Y+12	; 0x0c
    15ec:	bd 85       	ldd	r27, Y+13	; 0x0d
    15ee:	81 60       	ori	r24, 0x01	; 1
    15f0:	8a 87       	std	Y+10, r24	; 0x0a
    15f2:	9b 87       	std	Y+11, r25	; 0x0b
    15f4:	ac 87       	std	Y+12, r26	; 0x0c
    15f6:	bd 87       	std	Y+13, r27	; 0x0d
				data_memory_write(IFR, ifr);
    15f8:	8a 85       	ldd	r24, Y+10	; 0x0a
    15fa:	9b 85       	ldd	r25, Y+11	; 0x0b
    15fc:	ac 85       	ldd	r26, Y+12	; 0x0c
    15fe:	bd 85       	ldd	r27, Y+13	; 0x0d
    1600:	9c 01       	movw	r18, r24
    1602:	ad 01       	movw	r20, r26
    1604:	64 e0       	ldi	r22, 0x04	; 4
    1606:	70 e0       	ldi	r23, 0x00	; 0
    1608:	80 e0       	ldi	r24, 0x00	; 0
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <data_memory_write>
				break;
    1610:	07 c0       	rjmp	.+14     	; 0x1620 <monitor_interrupts+0x108>

static inline void monitor_interrupts(void)
{
	const uint32_t pina = data_memory_read(PINA);

	for (uint8_t i = 0; i < CPU_REGISTER_ADDRESS_WIDTH; ++i)
    1612:	89 81       	ldd	r24, Y+1	; 0x01
    1614:	8f 5f       	subi	r24, 0xFF	; 255
    1616:	89 83       	std	Y+1, r24	; 0x01
    1618:	89 81       	ldd	r24, Y+1	; 0x01
    161a:	80 32       	cpi	r24, 0x20	; 32
    161c:	08 f4       	brcc	.+2      	; 0x1620 <monitor_interrupts+0x108>
    161e:	97 cf       	rjmp	.-210    	; 0x154e <monitor_interrupts+0x36>
				break;
			}
		}
	}

	pina_last_value = pina;
    1620:	8a 81       	ldd	r24, Y+2	; 0x02
    1622:	9b 81       	ldd	r25, Y+3	; 0x03
    1624:	ac 81       	ldd	r26, Y+4	; 0x04
    1626:	bd 81       	ldd	r27, Y+5	; 0x05
    1628:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <pina_last_value>
    162c:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <pina_last_value+0x1>
    1630:	a0 93 19 01 	sts	0x0119, r26	; 0x800119 <pina_last_value+0x2>
    1634:	b0 93 1a 01 	sts	0x011A, r27	; 0x80011a <pina_last_value+0x3>
	return;
    1638:	00 00       	nop
}
    163a:	2d 96       	adiw	r28, 0x0d	; 13
    163c:	0f b6       	in	r0, 0x3f	; 63
    163e:	f8 94       	cli
    1640:	de bf       	out	0x3e, r29	; 62
    1642:	0f be       	out	0x3f, r0	; 63
    1644:	cd bf       	out	0x3d, r28	; 61
    1646:	df 91       	pop	r29
    1648:	cf 91       	pop	r28
    164a:	1f 91       	pop	r17
    164c:	08 95       	ret

0000164e <check_for_interrupt_requests>:

static inline void check_for_interrupt_requests(void)
{
    164e:	cf 93       	push	r28
    1650:	df 93       	push	r29
    1652:	cd b7       	in	r28, 0x3d	; 61
    1654:	de b7       	in	r29, 0x3e	; 62
    1656:	28 97       	sbiw	r28, 0x08	; 8
    1658:	0f b6       	in	r0, 0x3f	; 63
    165a:	f8 94       	cli
    165c:	de bf       	out	0x3e, r29	; 62
    165e:	0f be       	out	0x3f, r0	; 63
    1660:	cd bf       	out	0x3d, r28	; 61
	if (read(sr, I))
    1662:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <sr>
    1666:	88 2f       	mov	r24, r24
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	45 e0       	ldi	r20, 0x05	; 5
    166c:	50 e0       	ldi	r21, 0x00	; 0
    166e:	60 e0       	ldi	r22, 0x00	; 0
    1670:	70 e0       	ldi	r23, 0x00	; 0
    1672:	0e 94 58 02 	call	0x4b0	; 0x4b0 <read>
    1676:	88 23       	and	r24, r24
    1678:	09 f4       	brne	.+2      	; 0x167c <check_for_interrupt_requests+0x2e>
    167a:	48 c0       	rjmp	.+144    	; 0x170c <check_for_interrupt_requests+0xbe>
	{
		uint32_t ifr = data_memory_read(IFR);
    167c:	64 e0       	ldi	r22, 0x04	; 4
    167e:	70 e0       	ldi	r23, 0x00	; 0
    1680:	80 e0       	ldi	r24, 0x00	; 0
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	0e 94 37 0c 	call	0x186e	; 0x186e <data_memory_read>
    1688:	09 2e       	mov	r0, r25
    168a:	00 0c       	add	r0, r0
    168c:	aa 0b       	sbc	r26, r26
    168e:	bb 0b       	sbc	r27, r27
    1690:	89 83       	std	Y+1, r24	; 0x01
    1692:	9a 83       	std	Y+2, r25	; 0x02
    1694:	ab 83       	std	Y+3, r26	; 0x03
    1696:	bc 83       	std	Y+4, r27	; 0x04
		const uint32_t icr = data_memory_read(ICR);
    1698:	63 e0       	ldi	r22, 0x03	; 3
    169a:	70 e0       	ldi	r23, 0x00	; 0
    169c:	80 e0       	ldi	r24, 0x00	; 0
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	0e 94 37 0c 	call	0x186e	; 0x186e <data_memory_read>
    16a4:	09 2e       	mov	r0, r25
    16a6:	00 0c       	add	r0, r0
    16a8:	aa 0b       	sbc	r26, r26
    16aa:	bb 0b       	sbc	r27, r27
    16ac:	8d 83       	std	Y+5, r24	; 0x05
    16ae:	9e 83       	std	Y+6, r25	; 0x06
    16b0:	af 83       	std	Y+7, r26	; 0x07
    16b2:	b8 87       	std	Y+8, r27	; 0x08

		if (read(ifr, PCIFA) && read(icr, PCIEA))
    16b4:	89 81       	ldd	r24, Y+1	; 0x01
    16b6:	9a 81       	ldd	r25, Y+2	; 0x02
    16b8:	40 e0       	ldi	r20, 0x00	; 0
    16ba:	50 e0       	ldi	r21, 0x00	; 0
    16bc:	ba 01       	movw	r22, r20
    16be:	0e 94 58 02 	call	0x4b0	; 0x4b0 <read>
    16c2:	88 23       	and	r24, r24
    16c4:	19 f1       	breq	.+70     	; 0x170c <check_for_interrupt_requests+0xbe>
    16c6:	8d 81       	ldd	r24, Y+5	; 0x05
    16c8:	9e 81       	ldd	r25, Y+6	; 0x06
    16ca:	40 e0       	ldi	r20, 0x00	; 0
    16cc:	50 e0       	ldi	r21, 0x00	; 0
    16ce:	ba 01       	movw	r22, r20
    16d0:	0e 94 58 02 	call	0x4b0	; 0x4b0 <read>
    16d4:	88 23       	and	r24, r24
    16d6:	d1 f0       	breq	.+52     	; 0x170c <check_for_interrupt_requests+0xbe>
		{
			clr(ifr, PCIFA);
    16d8:	89 81       	ldd	r24, Y+1	; 0x01
    16da:	9a 81       	ldd	r25, Y+2	; 0x02
    16dc:	ab 81       	ldd	r26, Y+3	; 0x03
    16de:	bc 81       	ldd	r27, Y+4	; 0x04
    16e0:	8e 7f       	andi	r24, 0xFE	; 254
    16e2:	89 83       	std	Y+1, r24	; 0x01
    16e4:	9a 83       	std	Y+2, r25	; 0x02
    16e6:	ab 83       	std	Y+3, r26	; 0x03
    16e8:	bc 83       	std	Y+4, r27	; 0x04
			data_memory_write(IFR, ifr);
    16ea:	89 81       	ldd	r24, Y+1	; 0x01
    16ec:	9a 81       	ldd	r25, Y+2	; 0x02
    16ee:	ab 81       	ldd	r26, Y+3	; 0x03
    16f0:	bc 81       	ldd	r27, Y+4	; 0x04
    16f2:	9c 01       	movw	r18, r24
    16f4:	ad 01       	movw	r20, r26
    16f6:	64 e0       	ldi	r22, 0x04	; 4
    16f8:	70 e0       	ldi	r23, 0x00	; 0
    16fa:	80 e0       	ldi	r24, 0x00	; 0
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <data_memory_write>
			generate_interrupt(PCINT_vect);
    1702:	82 e0       	ldi	r24, 0x02	; 2
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	0e 94 90 0b 	call	0x1720	; 0x1720 <generate_interrupt>
		}
	}
	return;
    170a:	00 00       	nop
    170c:	00 00       	nop
}
    170e:	28 96       	adiw	r28, 0x08	; 8
    1710:	0f b6       	in	r0, 0x3f	; 63
    1712:	f8 94       	cli
    1714:	de bf       	out	0x3e, r29	; 62
    1716:	0f be       	out	0x3f, r0	; 63
    1718:	cd bf       	out	0x3d, r28	; 61
    171a:	df 91       	pop	r29
    171c:	cf 91       	pop	r28
    171e:	08 95       	ret

00001720 <generate_interrupt>:
static inline void generate_interrupt(const uint16_t interrupt_vector)
{
    1720:	cf 93       	push	r28
    1722:	df 93       	push	r29
    1724:	00 d0       	rcall	.+0      	; 0x1726 <generate_interrupt+0x6>
    1726:	cd b7       	in	r28, 0x3d	; 61
    1728:	de b7       	in	r29, 0x3e	; 62
    172a:	9a 83       	std	Y+2, r25	; 0x02
    172c:	89 83       	std	Y+1, r24	; 0x01
	stack_push(pc);
    172e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1732:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1736:	cc 01       	movw	r24, r24
    1738:	a0 e0       	ldi	r26, 0x00	; 0
    173a:	b0 e0       	ldi	r27, 0x00	; 0
    173c:	bc 01       	movw	r22, r24
    173e:	cd 01       	movw	r24, r26
    1740:	0e 94 0c 12 	call	0x2418	; 0x2418 <stack_push>
	pc = interrupt_vector;
    1744:	89 81       	ldd	r24, Y+1	; 0x01
    1746:	9a 81       	ldd	r25, Y+2	; 0x02
    1748:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    174c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	clr(sr, I);
    1750:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <sr>
    1754:	8f 7d       	andi	r24, 0xDF	; 223
    1756:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <sr>
	return;
    175a:	00 00       	nop
}
    175c:	0f 90       	pop	r0
    175e:	0f 90       	pop	r0
    1760:	df 91       	pop	r29
    1762:	cf 91       	pop	r28
    1764:	08 95       	ret

00001766 <return_from_interrupt>:

static inline void return_from_interrupt(void)
{
    1766:	cf 93       	push	r28
    1768:	df 93       	push	r29
    176a:	cd b7       	in	r28, 0x3d	; 61
    176c:	de b7       	in	r29, 0x3e	; 62
	pc = stack_pop();
    176e:	0e 94 60 12 	call	0x24c0	; 0x24c0 <stack_pop>
    1772:	dc 01       	movw	r26, r24
    1774:	cb 01       	movw	r24, r22
    1776:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    177a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	set(sr, I);
    177e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <sr>
    1782:	80 62       	ori	r24, 0x20	; 32
    1784:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <sr>
	return;
    1788:	00 00       	nop
}
    178a:	df 91       	pop	r29
    178c:	cf 91       	pop	r28
    178e:	08 95       	ret

00001790 <data_memory_reset>:

/********************************************************************************
* data_memory_reset: Clears entire data memory.
********************************************************************************/
void data_memory_reset(void)
{
    1790:	cf 93       	push	r28
    1792:	df 93       	push	r29
    1794:	00 d0       	rcall	.+0      	; 0x1796 <data_memory_reset+0x6>
    1796:	00 d0       	rcall	.+0      	; 0x1798 <data_memory_reset+0x8>
    1798:	cd b7       	in	r28, 0x3d	; 61
    179a:	de b7       	in	r29, 0x3e	; 62
	for (uint32_t i = 0; i < DATA_MEMORY_ADDRESS_WIDTH; ++i)
    179c:	19 82       	std	Y+1, r1	; 0x01
    179e:	1a 82       	std	Y+2, r1	; 0x02
    17a0:	1b 82       	std	Y+3, r1	; 0x03
    17a2:	1c 82       	std	Y+4, r1	; 0x04
    17a4:	18 c0       	rjmp	.+48     	; 0x17d6 <data_memory_reset+0x46>
	{
		data[i] = 0x00;
    17a6:	89 81       	ldd	r24, Y+1	; 0x01
    17a8:	9a 81       	ldd	r25, Y+2	; 0x02
    17aa:	88 0f       	add	r24, r24
    17ac:	99 1f       	adc	r25, r25
    17ae:	88 0f       	add	r24, r24
    17b0:	99 1f       	adc	r25, r25
    17b2:	85 56       	subi	r24, 0x65	; 101
    17b4:	9e 4f       	sbci	r25, 0xFE	; 254
    17b6:	fc 01       	movw	r30, r24
    17b8:	10 82       	st	Z, r1
    17ba:	11 82       	std	Z+1, r1	; 0x01
    17bc:	12 82       	std	Z+2, r1	; 0x02
    17be:	13 82       	std	Z+3, r1	; 0x03
/********************************************************************************
* data_memory_reset: Clears entire data memory.
********************************************************************************/
void data_memory_reset(void)
{
	for (uint32_t i = 0; i < DATA_MEMORY_ADDRESS_WIDTH; ++i)
    17c0:	89 81       	ldd	r24, Y+1	; 0x01
    17c2:	9a 81       	ldd	r25, Y+2	; 0x02
    17c4:	ab 81       	ldd	r26, Y+3	; 0x03
    17c6:	bc 81       	ldd	r27, Y+4	; 0x04
    17c8:	01 96       	adiw	r24, 0x01	; 1
    17ca:	a1 1d       	adc	r26, r1
    17cc:	b1 1d       	adc	r27, r1
    17ce:	89 83       	std	Y+1, r24	; 0x01
    17d0:	9a 83       	std	Y+2, r25	; 0x02
    17d2:	ab 83       	std	Y+3, r26	; 0x03
    17d4:	bc 83       	std	Y+4, r27	; 0x04
    17d6:	89 81       	ldd	r24, Y+1	; 0x01
    17d8:	9a 81       	ldd	r25, Y+2	; 0x02
    17da:	ab 81       	ldd	r26, Y+3	; 0x03
    17dc:	bc 81       	ldd	r27, Y+4	; 0x04
    17de:	84 36       	cpi	r24, 0x64	; 100
    17e0:	91 05       	cpc	r25, r1
    17e2:	a1 05       	cpc	r26, r1
    17e4:	b1 05       	cpc	r27, r1
    17e6:	f8 f2       	brcs	.-66     	; 0x17a6 <data_memory_reset+0x16>
	{
		data[i] = 0x00;
	}
	return;
    17e8:	00 00       	nop
}
    17ea:	0f 90       	pop	r0
    17ec:	0f 90       	pop	r0
    17ee:	0f 90       	pop	r0
    17f0:	0f 90       	pop	r0
    17f2:	df 91       	pop	r29
    17f4:	cf 91       	pop	r28
    17f6:	08 95       	ret

000017f8 <data_memory_write>:
*                    - address: Write location in data memory.
*                    - value  : The 8-bit value to write to data memory.
********************************************************************************/
int data_memory_write(const uint32_t address,
					  const uint32_t value)
{
    17f8:	cf 93       	push	r28
    17fa:	df 93       	push	r29
    17fc:	cd b7       	in	r28, 0x3d	; 61
    17fe:	de b7       	in	r29, 0x3e	; 62
    1800:	28 97       	sbiw	r28, 0x08	; 8
    1802:	0f b6       	in	r0, 0x3f	; 63
    1804:	f8 94       	cli
    1806:	de bf       	out	0x3e, r29	; 62
    1808:	0f be       	out	0x3f, r0	; 63
    180a:	cd bf       	out	0x3d, r28	; 61
    180c:	69 83       	std	Y+1, r22	; 0x01
    180e:	7a 83       	std	Y+2, r23	; 0x02
    1810:	8b 83       	std	Y+3, r24	; 0x03
    1812:	9c 83       	std	Y+4, r25	; 0x04
    1814:	2d 83       	std	Y+5, r18	; 0x05
    1816:	3e 83       	std	Y+6, r19	; 0x06
    1818:	4f 83       	std	Y+7, r20	; 0x07
    181a:	58 87       	std	Y+8, r21	; 0x08
	if (address < DATA_MEMORY_ADDRESS_WIDTH)
    181c:	89 81       	ldd	r24, Y+1	; 0x01
    181e:	9a 81       	ldd	r25, Y+2	; 0x02
    1820:	ab 81       	ldd	r26, Y+3	; 0x03
    1822:	bc 81       	ldd	r27, Y+4	; 0x04
    1824:	84 36       	cpi	r24, 0x64	; 100
    1826:	91 05       	cpc	r25, r1
    1828:	a1 05       	cpc	r26, r1
    182a:	b1 05       	cpc	r27, r1
    182c:	a8 f4       	brcc	.+42     	; 0x1858 <data_memory_write+0x60>
	{
		data[address] = value;
    182e:	89 81       	ldd	r24, Y+1	; 0x01
    1830:	9a 81       	ldd	r25, Y+2	; 0x02
    1832:	88 0f       	add	r24, r24
    1834:	99 1f       	adc	r25, r25
    1836:	88 0f       	add	r24, r24
    1838:	99 1f       	adc	r25, r25
    183a:	9c 01       	movw	r18, r24
    183c:	25 56       	subi	r18, 0x65	; 101
    183e:	3e 4f       	sbci	r19, 0xFE	; 254
    1840:	8d 81       	ldd	r24, Y+5	; 0x05
    1842:	9e 81       	ldd	r25, Y+6	; 0x06
    1844:	af 81       	ldd	r26, Y+7	; 0x07
    1846:	b8 85       	ldd	r27, Y+8	; 0x08
    1848:	f9 01       	movw	r30, r18
    184a:	80 83       	st	Z, r24
    184c:	91 83       	std	Z+1, r25	; 0x01
    184e:	a2 83       	std	Z+2, r26	; 0x02
    1850:	b3 83       	std	Z+3, r27	; 0x03
		return 0;
    1852:	80 e0       	ldi	r24, 0x00	; 0
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	02 c0       	rjmp	.+4      	; 0x185c <data_memory_write+0x64>
	}
	else
	{
		return 1;
    1858:	81 e0       	ldi	r24, 0x01	; 1
    185a:	90 e0       	ldi	r25, 0x00	; 0
	}
}
    185c:	28 96       	adiw	r28, 0x08	; 8
    185e:	0f b6       	in	r0, 0x3f	; 63
    1860:	f8 94       	cli
    1862:	de bf       	out	0x3e, r29	; 62
    1864:	0f be       	out	0x3f, r0	; 63
    1866:	cd bf       	out	0x3d, r28	; 61
    1868:	df 91       	pop	r29
    186a:	cf 91       	pop	r28
    186c:	08 95       	ret

0000186e <data_memory_read>:
*                   If an invalid address is specified, the value 0 is returned.
*
*                   - address: Read location in data memory.
********************************************************************************/
int data_memory_read(const uint32_t address)
{
    186e:	cf 93       	push	r28
    1870:	df 93       	push	r29
    1872:	00 d0       	rcall	.+0      	; 0x1874 <data_memory_read+0x6>
    1874:	00 d0       	rcall	.+0      	; 0x1876 <data_memory_read+0x8>
    1876:	cd b7       	in	r28, 0x3d	; 61
    1878:	de b7       	in	r29, 0x3e	; 62
    187a:	69 83       	std	Y+1, r22	; 0x01
    187c:	7a 83       	std	Y+2, r23	; 0x02
    187e:	8b 83       	std	Y+3, r24	; 0x03
    1880:	9c 83       	std	Y+4, r25	; 0x04
	if (address < DATA_MEMORY_ADDRESS_WIDTH)
    1882:	89 81       	ldd	r24, Y+1	; 0x01
    1884:	9a 81       	ldd	r25, Y+2	; 0x02
    1886:	ab 81       	ldd	r26, Y+3	; 0x03
    1888:	bc 81       	ldd	r27, Y+4	; 0x04
    188a:	84 36       	cpi	r24, 0x64	; 100
    188c:	91 05       	cpc	r25, r1
    188e:	a1 05       	cpc	r26, r1
    1890:	b1 05       	cpc	r27, r1
    1892:	70 f4       	brcc	.+28     	; 0x18b0 <data_memory_read+0x42>
	{
		return data[address];
    1894:	89 81       	ldd	r24, Y+1	; 0x01
    1896:	9a 81       	ldd	r25, Y+2	; 0x02
    1898:	88 0f       	add	r24, r24
    189a:	99 1f       	adc	r25, r25
    189c:	88 0f       	add	r24, r24
    189e:	99 1f       	adc	r25, r25
    18a0:	85 56       	subi	r24, 0x65	; 101
    18a2:	9e 4f       	sbci	r25, 0xFE	; 254
    18a4:	fc 01       	movw	r30, r24
    18a6:	80 81       	ld	r24, Z
    18a8:	91 81       	ldd	r25, Z+1	; 0x01
    18aa:	a2 81       	ldd	r26, Z+2	; 0x02
    18ac:	b3 81       	ldd	r27, Z+3	; 0x03
    18ae:	02 c0       	rjmp	.+4      	; 0x18b4 <data_memory_read+0x46>
	}
	else
	{
		return 0x00;
    18b0:	80 e0       	ldi	r24, 0x00	; 0
    18b2:	90 e0       	ldi	r25, 0x00	; 0
	}
    18b4:	0f 90       	pop	r0
    18b6:	0f 90       	pop	r0
    18b8:	0f 90       	pop	r0
    18ba:	0f 90       	pop	r0
    18bc:	df 91       	pop	r29
    18be:	cf 91       	pop	r28
    18c0:	08 95       	ret

000018c2 <main>:
#include "control_unit.h"

int main(void)
{
    18c2:	cf 93       	push	r28
    18c4:	df 93       	push	r29
    18c6:	cd b7       	in	r28, 0x3d	; 61
    18c8:	de b7       	in	r29, 0x3e	; 62
	control_unit_reset();
    18ca:	0e 94 81 02 	call	0x502	; 0x502 <control_unit_reset>
	
    while (1) 
    {
		control_unit_run();
    18ce:	0e 94 c9 02 	call	0x592	; 0x592 <control_unit_run>
    }
    18d2:	fd cf       	rjmp	.-6      	; 0x18ce <main+0xc>

000018d4 <program_memory_write>:

static uint64_t program_memory[PROGRAM_MEMORY_ADDRESS_WIDTH];


void program_memory_write(void)
{
    18d4:	af 92       	push	r10
    18d6:	bf 92       	push	r11
    18d8:	cf 92       	push	r12
    18da:	df 92       	push	r13
    18dc:	ef 92       	push	r14
    18de:	ff 92       	push	r15
    18e0:	0f 93       	push	r16
    18e2:	1f 93       	push	r17
    18e4:	cf 93       	push	r28
    18e6:	df 93       	push	r29
    18e8:	cd b7       	in	r28, 0x3d	; 61
    18ea:	de b7       	in	r29, 0x3e	; 62
	static bool program_memory_initialized = false;
	if (program_memory_initialized) return;
    18ec:	80 91 43 04 	lds	r24, 0x0443	; 0x800443 <program_memory_initialized.1982>
    18f0:	88 23       	and	r24, r24
    18f2:	09 f0       	breq	.+2      	; 0x18f6 <program_memory_write+0x22>
    18f4:	59 c4       	rjmp	.+2226   	; 0x21a8 <program_memory_write+0x8d4>

	program_memory[0]  = join(JMP, main, 0x00);
    18f6:	20 e0       	ldi	r18, 0x00	; 0
    18f8:	30 e0       	ldi	r19, 0x00	; 0
    18fa:	a9 01       	movw	r20, r18
    18fc:	64 e0       	ldi	r22, 0x04	; 4
    18fe:	70 e0       	ldi	r23, 0x00	; 0
    1900:	8d e1       	ldi	r24, 0x1D	; 29
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	0e 94 2c 11 	call	0x2258	; 0x2258 <join>
    1908:	a2 2e       	mov	r10, r18
    190a:	b3 2e       	mov	r11, r19
    190c:	c4 2e       	mov	r12, r20
    190e:	d5 2e       	mov	r13, r21
    1910:	e6 2e       	mov	r14, r22
    1912:	f7 2e       	mov	r15, r23
    1914:	08 2f       	mov	r16, r24
    1916:	19 2f       	mov	r17, r25
    1918:	a0 92 2b 03 	sts	0x032B, r10	; 0x80032b <program_memory>
    191c:	b0 92 2c 03 	sts	0x032C, r11	; 0x80032c <program_memory+0x1>
    1920:	c0 92 2d 03 	sts	0x032D, r12	; 0x80032d <program_memory+0x2>
    1924:	d0 92 2e 03 	sts	0x032E, r13	; 0x80032e <program_memory+0x3>
    1928:	e0 92 2f 03 	sts	0x032F, r14	; 0x80032f <program_memory+0x4>
    192c:	f0 92 30 03 	sts	0x0330, r15	; 0x800330 <program_memory+0x5>
    1930:	00 93 31 03 	sts	0x0331, r16	; 0x800331 <program_memory+0x6>
    1934:	10 93 32 03 	sts	0x0332, r17	; 0x800332 <program_memory+0x7>
	program_memory[1]  = join(NOP, 0x00, 0x00);
    1938:	20 e0       	ldi	r18, 0x00	; 0
    193a:	30 e0       	ldi	r19, 0x00	; 0
    193c:	a9 01       	movw	r20, r18
    193e:	60 e0       	ldi	r22, 0x00	; 0
    1940:	70 e0       	ldi	r23, 0x00	; 0
    1942:	80 e0       	ldi	r24, 0x00	; 0
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	0e 94 2c 11 	call	0x2258	; 0x2258 <join>
    194a:	a2 2e       	mov	r10, r18
    194c:	b3 2e       	mov	r11, r19
    194e:	c4 2e       	mov	r12, r20
    1950:	d5 2e       	mov	r13, r21
    1952:	e6 2e       	mov	r14, r22
    1954:	f7 2e       	mov	r15, r23
    1956:	08 2f       	mov	r16, r24
    1958:	19 2f       	mov	r17, r25
    195a:	a0 92 33 03 	sts	0x0333, r10	; 0x800333 <program_memory+0x8>
    195e:	b0 92 34 03 	sts	0x0334, r11	; 0x800334 <program_memory+0x9>
    1962:	c0 92 35 03 	sts	0x0335, r12	; 0x800335 <program_memory+0xa>
    1966:	d0 92 36 03 	sts	0x0336, r13	; 0x800336 <program_memory+0xb>
    196a:	e0 92 37 03 	sts	0x0337, r14	; 0x800337 <program_memory+0xc>
    196e:	f0 92 38 03 	sts	0x0338, r15	; 0x800338 <program_memory+0xd>
    1972:	00 93 39 03 	sts	0x0339, r16	; 0x800339 <program_memory+0xe>
    1976:	10 93 3a 03 	sts	0x033A, r17	; 0x80033a <program_memory+0xf>
	program_memory[2]  = join(JMP, ISR_PCINT, 0x00);
    197a:	20 e0       	ldi	r18, 0x00	; 0
    197c:	30 e0       	ldi	r19, 0x00	; 0
    197e:	a9 01       	movw	r20, r18
    1980:	62 e1       	ldi	r22, 0x12	; 18
    1982:	70 e0       	ldi	r23, 0x00	; 0
    1984:	8d e1       	ldi	r24, 0x1D	; 29
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	0e 94 2c 11 	call	0x2258	; 0x2258 <join>
    198c:	a2 2e       	mov	r10, r18
    198e:	b3 2e       	mov	r11, r19
    1990:	c4 2e       	mov	r12, r20
    1992:	d5 2e       	mov	r13, r21
    1994:	e6 2e       	mov	r14, r22
    1996:	f7 2e       	mov	r15, r23
    1998:	08 2f       	mov	r16, r24
    199a:	19 2f       	mov	r17, r25
    199c:	a0 92 3b 03 	sts	0x033B, r10	; 0x80033b <program_memory+0x10>
    19a0:	b0 92 3c 03 	sts	0x033C, r11	; 0x80033c <program_memory+0x11>
    19a4:	c0 92 3d 03 	sts	0x033D, r12	; 0x80033d <program_memory+0x12>
    19a8:	d0 92 3e 03 	sts	0x033E, r13	; 0x80033e <program_memory+0x13>
    19ac:	e0 92 3f 03 	sts	0x033F, r14	; 0x80033f <program_memory+0x14>
    19b0:	f0 92 40 03 	sts	0x0340, r15	; 0x800340 <program_memory+0x15>
    19b4:	00 93 41 03 	sts	0x0341, r16	; 0x800341 <program_memory+0x16>
    19b8:	10 93 42 03 	sts	0x0342, r17	; 0x800342 <program_memory+0x17>
	program_memory[3]  = join(NOP, 0x00, 0x00);
    19bc:	20 e0       	ldi	r18, 0x00	; 0
    19be:	30 e0       	ldi	r19, 0x00	; 0
    19c0:	a9 01       	movw	r20, r18
    19c2:	60 e0       	ldi	r22, 0x00	; 0
    19c4:	70 e0       	ldi	r23, 0x00	; 0
    19c6:	80 e0       	ldi	r24, 0x00	; 0
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	0e 94 2c 11 	call	0x2258	; 0x2258 <join>
    19ce:	a2 2e       	mov	r10, r18
    19d0:	b3 2e       	mov	r11, r19
    19d2:	c4 2e       	mov	r12, r20
    19d4:	d5 2e       	mov	r13, r21
    19d6:	e6 2e       	mov	r14, r22
    19d8:	f7 2e       	mov	r15, r23
    19da:	08 2f       	mov	r16, r24
    19dc:	19 2f       	mov	r17, r25
    19de:	a0 92 43 03 	sts	0x0343, r10	; 0x800343 <program_memory+0x18>
    19e2:	b0 92 44 03 	sts	0x0344, r11	; 0x800344 <program_memory+0x19>
    19e6:	c0 92 45 03 	sts	0x0345, r12	; 0x800345 <program_memory+0x1a>
    19ea:	d0 92 46 03 	sts	0x0346, r13	; 0x800346 <program_memory+0x1b>
    19ee:	e0 92 47 03 	sts	0x0347, r14	; 0x800347 <program_memory+0x1c>
    19f2:	f0 92 48 03 	sts	0x0348, r15	; 0x800348 <program_memory+0x1d>
    19f6:	00 93 49 03 	sts	0x0349, r16	; 0x800349 <program_memory+0x1e>
    19fa:	10 93 4a 03 	sts	0x034A, r17	; 0x80034a <program_memory+0x1f>

	program_memory[4]  = join(CALL, setup, 0x00);
    19fe:	20 e0       	ldi	r18, 0x00	; 0
    1a00:	30 e0       	ldi	r19, 0x00	; 0
    1a02:	a9 01       	movw	r20, r18
    1a04:	66 e0       	ldi	r22, 0x06	; 6
    1a06:	70 e0       	ldi	r23, 0x00	; 0
    1a08:	8a e1       	ldi	r24, 0x1A	; 26
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	0e 94 2c 11 	call	0x2258	; 0x2258 <join>
    1a10:	a2 2e       	mov	r10, r18
    1a12:	b3 2e       	mov	r11, r19
    1a14:	c4 2e       	mov	r12, r20
    1a16:	d5 2e       	mov	r13, r21
    1a18:	e6 2e       	mov	r14, r22
    1a1a:	f7 2e       	mov	r15, r23
    1a1c:	08 2f       	mov	r16, r24
    1a1e:	19 2f       	mov	r17, r25
    1a20:	a0 92 4b 03 	sts	0x034B, r10	; 0x80034b <program_memory+0x20>
    1a24:	b0 92 4c 03 	sts	0x034C, r11	; 0x80034c <program_memory+0x21>
    1a28:	c0 92 4d 03 	sts	0x034D, r12	; 0x80034d <program_memory+0x22>
    1a2c:	d0 92 4e 03 	sts	0x034E, r13	; 0x80034e <program_memory+0x23>
    1a30:	e0 92 4f 03 	sts	0x034F, r14	; 0x80034f <program_memory+0x24>
    1a34:	f0 92 50 03 	sts	0x0350, r15	; 0x800350 <program_memory+0x25>
    1a38:	00 93 51 03 	sts	0x0351, r16	; 0x800351 <program_memory+0x26>
    1a3c:	10 93 52 03 	sts	0x0352, r17	; 0x800352 <program_memory+0x27>
	program_memory[5]  = join(JMP, main_loop, 0x00);
    1a40:	20 e0       	ldi	r18, 0x00	; 0
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	a9 01       	movw	r20, r18
    1a46:	65 e0       	ldi	r22, 0x05	; 5
    1a48:	70 e0       	ldi	r23, 0x00	; 0
    1a4a:	8d e1       	ldi	r24, 0x1D	; 29
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	0e 94 2c 11 	call	0x2258	; 0x2258 <join>
    1a52:	a2 2e       	mov	r10, r18
    1a54:	b3 2e       	mov	r11, r19
    1a56:	c4 2e       	mov	r12, r20
    1a58:	d5 2e       	mov	r13, r21
    1a5a:	e6 2e       	mov	r14, r22
    1a5c:	f7 2e       	mov	r15, r23
    1a5e:	08 2f       	mov	r16, r24
    1a60:	19 2f       	mov	r17, r25
    1a62:	a0 92 53 03 	sts	0x0353, r10	; 0x800353 <program_memory+0x28>
    1a66:	b0 92 54 03 	sts	0x0354, r11	; 0x800354 <program_memory+0x29>
    1a6a:	c0 92 55 03 	sts	0x0355, r12	; 0x800355 <program_memory+0x2a>
    1a6e:	d0 92 56 03 	sts	0x0356, r13	; 0x800356 <program_memory+0x2b>
    1a72:	e0 92 57 03 	sts	0x0357, r14	; 0x800357 <program_memory+0x2c>
    1a76:	f0 92 58 03 	sts	0x0358, r15	; 0x800358 <program_memory+0x2d>
    1a7a:	00 93 59 03 	sts	0x0359, r16	; 0x800359 <program_memory+0x2e>
    1a7e:	10 93 5a 03 	sts	0x035A, r17	; 0x80035a <program_memory+0x2f>

	program_memory[6]  = join(LDI, R16, (1 << LED1) | (1 << LED2) | (1 << LED3));
    1a82:	20 e0       	ldi	r18, 0x00	; 0
    1a84:	37 e0       	ldi	r19, 0x07	; 7
    1a86:	40 e0       	ldi	r20, 0x00	; 0
    1a88:	50 e0       	ldi	r21, 0x00	; 0
    1a8a:	60 e1       	ldi	r22, 0x10	; 16
    1a8c:	70 e0       	ldi	r23, 0x00	; 0
    1a8e:	81 e0       	ldi	r24, 0x01	; 1
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	0e 94 2c 11 	call	0x2258	; 0x2258 <join>
    1a96:	a2 2e       	mov	r10, r18
    1a98:	b3 2e       	mov	r11, r19
    1a9a:	c4 2e       	mov	r12, r20
    1a9c:	d5 2e       	mov	r13, r21
    1a9e:	e6 2e       	mov	r14, r22
    1aa0:	f7 2e       	mov	r15, r23
    1aa2:	08 2f       	mov	r16, r24
    1aa4:	19 2f       	mov	r17, r25
    1aa6:	a0 92 5b 03 	sts	0x035B, r10	; 0x80035b <program_memory+0x30>
    1aaa:	b0 92 5c 03 	sts	0x035C, r11	; 0x80035c <program_memory+0x31>
    1aae:	c0 92 5d 03 	sts	0x035D, r12	; 0x80035d <program_memory+0x32>
    1ab2:	d0 92 5e 03 	sts	0x035E, r13	; 0x80035e <program_memory+0x33>
    1ab6:	e0 92 5f 03 	sts	0x035F, r14	; 0x80035f <program_memory+0x34>
    1aba:	f0 92 60 03 	sts	0x0360, r15	; 0x800360 <program_memory+0x35>
    1abe:	00 93 61 03 	sts	0x0361, r16	; 0x800361 <program_memory+0x36>
    1ac2:	10 93 62 03 	sts	0x0362, r17	; 0x800362 <program_memory+0x37>
	program_memory[7]  = join(OUT, DDRA, R16);
    1ac6:	20 e1       	ldi	r18, 0x10	; 16
    1ac8:	30 e0       	ldi	r19, 0x00	; 0
    1aca:	40 e0       	ldi	r20, 0x00	; 0
    1acc:	50 e0       	ldi	r21, 0x00	; 0
    1ace:	60 e0       	ldi	r22, 0x00	; 0
    1ad0:	70 e0       	ldi	r23, 0x00	; 0
    1ad2:	83 e0       	ldi	r24, 0x03	; 3
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	0e 94 2c 11 	call	0x2258	; 0x2258 <join>
    1ada:	a2 2e       	mov	r10, r18
    1adc:	b3 2e       	mov	r11, r19
    1ade:	c4 2e       	mov	r12, r20
    1ae0:	d5 2e       	mov	r13, r21
    1ae2:	e6 2e       	mov	r14, r22
    1ae4:	f7 2e       	mov	r15, r23
    1ae6:	08 2f       	mov	r16, r24
    1ae8:	19 2f       	mov	r17, r25
    1aea:	a0 92 63 03 	sts	0x0363, r10	; 0x800363 <program_memory+0x38>
    1aee:	b0 92 64 03 	sts	0x0364, r11	; 0x800364 <program_memory+0x39>
    1af2:	c0 92 65 03 	sts	0x0365, r12	; 0x800365 <program_memory+0x3a>
    1af6:	d0 92 66 03 	sts	0x0366, r13	; 0x800366 <program_memory+0x3b>
    1afa:	e0 92 67 03 	sts	0x0367, r14	; 0x800367 <program_memory+0x3c>
    1afe:	f0 92 68 03 	sts	0x0368, r15	; 0x800368 <program_memory+0x3d>
    1b02:	00 93 69 03 	sts	0x0369, r16	; 0x800369 <program_memory+0x3e>
    1b06:	10 93 6a 03 	sts	0x036A, r17	; 0x80036a <program_memory+0x3f>
	program_memory[8]  = join(LDI, R17, (1 << BUTTON1) | (1 << BUTTON2) | (1 << BUTTON3));
    1b0a:	20 e0       	ldi	r18, 0x00	; 0
    1b0c:	38 e3       	ldi	r19, 0x38	; 56
    1b0e:	40 e0       	ldi	r20, 0x00	; 0
    1b10:	50 e0       	ldi	r21, 0x00	; 0
    1b12:	61 e1       	ldi	r22, 0x11	; 17
    1b14:	70 e0       	ldi	r23, 0x00	; 0
    1b16:	81 e0       	ldi	r24, 0x01	; 1
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	0e 94 2c 11 	call	0x2258	; 0x2258 <join>
    1b1e:	a2 2e       	mov	r10, r18
    1b20:	b3 2e       	mov	r11, r19
    1b22:	c4 2e       	mov	r12, r20
    1b24:	d5 2e       	mov	r13, r21
    1b26:	e6 2e       	mov	r14, r22
    1b28:	f7 2e       	mov	r15, r23
    1b2a:	08 2f       	mov	r16, r24
    1b2c:	19 2f       	mov	r17, r25
    1b2e:	a0 92 6b 03 	sts	0x036B, r10	; 0x80036b <program_memory+0x40>
    1b32:	b0 92 6c 03 	sts	0x036C, r11	; 0x80036c <program_memory+0x41>
    1b36:	c0 92 6d 03 	sts	0x036D, r12	; 0x80036d <program_memory+0x42>
    1b3a:	d0 92 6e 03 	sts	0x036E, r13	; 0x80036e <program_memory+0x43>
    1b3e:	e0 92 6f 03 	sts	0x036F, r14	; 0x80036f <program_memory+0x44>
    1b42:	f0 92 70 03 	sts	0x0370, r15	; 0x800370 <program_memory+0x45>
    1b46:	00 93 71 03 	sts	0x0371, r16	; 0x800371 <program_memory+0x46>
    1b4a:	10 93 72 03 	sts	0x0372, r17	; 0x800372 <program_memory+0x47>
	program_memory[9]  = join(OUT, PORTA, R17);
    1b4e:	21 e1       	ldi	r18, 0x11	; 17
    1b50:	30 e0       	ldi	r19, 0x00	; 0
    1b52:	40 e0       	ldi	r20, 0x00	; 0
    1b54:	50 e0       	ldi	r21, 0x00	; 0
    1b56:	61 e0       	ldi	r22, 0x01	; 1
    1b58:	70 e0       	ldi	r23, 0x00	; 0
    1b5a:	83 e0       	ldi	r24, 0x03	; 3
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	0e 94 2c 11 	call	0x2258	; 0x2258 <join>
    1b62:	a2 2e       	mov	r10, r18
    1b64:	b3 2e       	mov	r11, r19
    1b66:	c4 2e       	mov	r12, r20
    1b68:	d5 2e       	mov	r13, r21
    1b6a:	e6 2e       	mov	r14, r22
    1b6c:	f7 2e       	mov	r15, r23
    1b6e:	08 2f       	mov	r16, r24
    1b70:	19 2f       	mov	r17, r25
    1b72:	a0 92 73 03 	sts	0x0373, r10	; 0x800373 <program_memory+0x48>
    1b76:	b0 92 74 03 	sts	0x0374, r11	; 0x800374 <program_memory+0x49>
    1b7a:	c0 92 75 03 	sts	0x0375, r12	; 0x800375 <program_memory+0x4a>
    1b7e:	d0 92 76 03 	sts	0x0376, r13	; 0x800376 <program_memory+0x4b>
    1b82:	e0 92 77 03 	sts	0x0377, r14	; 0x800377 <program_memory+0x4c>
    1b86:	f0 92 78 03 	sts	0x0378, r15	; 0x800378 <program_memory+0x4d>
    1b8a:	00 93 79 03 	sts	0x0379, r16	; 0x800379 <program_memory+0x4e>
    1b8e:	10 93 7a 03 	sts	0x037A, r17	; 0x80037a <program_memory+0x4f>
	program_memory[10] = join(SEI, 0x00, 0x00);
    1b92:	20 e0       	ldi	r18, 0x00	; 0
    1b94:	30 e0       	ldi	r19, 0x00	; 0
    1b96:	a9 01       	movw	r20, r18
    1b98:	60 e0       	ldi	r22, 0x00	; 0
    1b9a:	70 e0       	ldi	r23, 0x00	; 0
    1b9c:	84 e2       	ldi	r24, 0x24	; 36
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	0e 94 2c 11 	call	0x2258	; 0x2258 <join>
    1ba4:	a2 2e       	mov	r10, r18
    1ba6:	b3 2e       	mov	r11, r19
    1ba8:	c4 2e       	mov	r12, r20
    1baa:	d5 2e       	mov	r13, r21
    1bac:	e6 2e       	mov	r14, r22
    1bae:	f7 2e       	mov	r15, r23
    1bb0:	08 2f       	mov	r16, r24
    1bb2:	19 2f       	mov	r17, r25
    1bb4:	a0 92 7b 03 	sts	0x037B, r10	; 0x80037b <program_memory+0x50>
    1bb8:	b0 92 7c 03 	sts	0x037C, r11	; 0x80037c <program_memory+0x51>
    1bbc:	c0 92 7d 03 	sts	0x037D, r12	; 0x80037d <program_memory+0x52>
    1bc0:	d0 92 7e 03 	sts	0x037E, r13	; 0x80037e <program_memory+0x53>
    1bc4:	e0 92 7f 03 	sts	0x037F, r14	; 0x80037f <program_memory+0x54>
    1bc8:	f0 92 80 03 	sts	0x0380, r15	; 0x800380 <program_memory+0x55>
    1bcc:	00 93 81 03 	sts	0x0381, r16	; 0x800381 <program_memory+0x56>
    1bd0:	10 93 82 03 	sts	0x0382, r17	; 0x800382 <program_memory+0x57>
	
	program_memory[11] = join(LDI, R24, (1 << PCIEA));
    1bd4:	21 e0       	ldi	r18, 0x01	; 1
    1bd6:	30 e0       	ldi	r19, 0x00	; 0
    1bd8:	40 e0       	ldi	r20, 0x00	; 0
    1bda:	50 e0       	ldi	r21, 0x00	; 0
    1bdc:	68 e1       	ldi	r22, 0x18	; 24
    1bde:	70 e0       	ldi	r23, 0x00	; 0
    1be0:	81 e0       	ldi	r24, 0x01	; 1
    1be2:	90 e0       	ldi	r25, 0x00	; 0
    1be4:	0e 94 2c 11 	call	0x2258	; 0x2258 <join>
    1be8:	a2 2e       	mov	r10, r18
    1bea:	b3 2e       	mov	r11, r19
    1bec:	c4 2e       	mov	r12, r20
    1bee:	d5 2e       	mov	r13, r21
    1bf0:	e6 2e       	mov	r14, r22
    1bf2:	f7 2e       	mov	r15, r23
    1bf4:	08 2f       	mov	r16, r24
    1bf6:	19 2f       	mov	r17, r25
    1bf8:	a0 92 83 03 	sts	0x0383, r10	; 0x800383 <program_memory+0x58>
    1bfc:	b0 92 84 03 	sts	0x0384, r11	; 0x800384 <program_memory+0x59>
    1c00:	c0 92 85 03 	sts	0x0385, r12	; 0x800385 <program_memory+0x5a>
    1c04:	d0 92 86 03 	sts	0x0386, r13	; 0x800386 <program_memory+0x5b>
    1c08:	e0 92 87 03 	sts	0x0387, r14	; 0x800387 <program_memory+0x5c>
    1c0c:	f0 92 88 03 	sts	0x0388, r15	; 0x800388 <program_memory+0x5d>
    1c10:	00 93 89 03 	sts	0x0389, r16	; 0x800389 <program_memory+0x5e>
    1c14:	10 93 8a 03 	sts	0x038A, r17	; 0x80038a <program_memory+0x5f>
	program_memory[12] = join(OUT, ICR, R24);
    1c18:	28 e1       	ldi	r18, 0x18	; 24
    1c1a:	30 e0       	ldi	r19, 0x00	; 0
    1c1c:	40 e0       	ldi	r20, 0x00	; 0
    1c1e:	50 e0       	ldi	r21, 0x00	; 0
    1c20:	63 e0       	ldi	r22, 0x03	; 3
    1c22:	70 e0       	ldi	r23, 0x00	; 0
    1c24:	83 e0       	ldi	r24, 0x03	; 3
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	0e 94 2c 11 	call	0x2258	; 0x2258 <join>
    1c2c:	a2 2e       	mov	r10, r18
    1c2e:	b3 2e       	mov	r11, r19
    1c30:	c4 2e       	mov	r12, r20
    1c32:	d5 2e       	mov	r13, r21
    1c34:	e6 2e       	mov	r14, r22
    1c36:	f7 2e       	mov	r15, r23
    1c38:	08 2f       	mov	r16, r24
    1c3a:	19 2f       	mov	r17, r25
    1c3c:	a0 92 8b 03 	sts	0x038B, r10	; 0x80038b <program_memory+0x60>
    1c40:	b0 92 8c 03 	sts	0x038C, r11	; 0x80038c <program_memory+0x61>
    1c44:	c0 92 8d 03 	sts	0x038D, r12	; 0x80038d <program_memory+0x62>
    1c48:	d0 92 8e 03 	sts	0x038E, r13	; 0x80038e <program_memory+0x63>
    1c4c:	e0 92 8f 03 	sts	0x038F, r14	; 0x80038f <program_memory+0x64>
    1c50:	f0 92 90 03 	sts	0x0390, r15	; 0x800390 <program_memory+0x65>
    1c54:	00 93 91 03 	sts	0x0391, r16	; 0x800391 <program_memory+0x66>
    1c58:	10 93 92 03 	sts	0x0392, r17	; 0x800392 <program_memory+0x67>
	program_memory[13] = join(OUT, PCMSK, R17);
    1c5c:	21 e1       	ldi	r18, 0x11	; 17
    1c5e:	30 e0       	ldi	r19, 0x00	; 0
    1c60:	40 e0       	ldi	r20, 0x00	; 0
    1c62:	50 e0       	ldi	r21, 0x00	; 0
    1c64:	65 e0       	ldi	r22, 0x05	; 5
    1c66:	70 e0       	ldi	r23, 0x00	; 0
    1c68:	83 e0       	ldi	r24, 0x03	; 3
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	0e 94 2c 11 	call	0x2258	; 0x2258 <join>
    1c70:	a2 2e       	mov	r10, r18
    1c72:	b3 2e       	mov	r11, r19
    1c74:	c4 2e       	mov	r12, r20
    1c76:	d5 2e       	mov	r13, r21
    1c78:	e6 2e       	mov	r14, r22
    1c7a:	f7 2e       	mov	r15, r23
    1c7c:	08 2f       	mov	r16, r24
    1c7e:	19 2f       	mov	r17, r25
    1c80:	a0 92 93 03 	sts	0x0393, r10	; 0x800393 <program_memory+0x68>
    1c84:	b0 92 94 03 	sts	0x0394, r11	; 0x800394 <program_memory+0x69>
    1c88:	c0 92 95 03 	sts	0x0395, r12	; 0x800395 <program_memory+0x6a>
    1c8c:	d0 92 96 03 	sts	0x0396, r13	; 0x800396 <program_memory+0x6b>
    1c90:	e0 92 97 03 	sts	0x0397, r14	; 0x800397 <program_memory+0x6c>
    1c94:	f0 92 98 03 	sts	0x0398, r15	; 0x800398 <program_memory+0x6d>
    1c98:	00 93 99 03 	sts	0x0399, r16	; 0x800399 <program_memory+0x6e>
    1c9c:	10 93 9a 03 	sts	0x039A, r17	; 0x80039a <program_memory+0x6f>
	program_memory[14] = join(LDI, R16, (1 << LED1));
    1ca0:	20 e0       	ldi	r18, 0x00	; 0
    1ca2:	31 e0       	ldi	r19, 0x01	; 1
    1ca4:	40 e0       	ldi	r20, 0x00	; 0
    1ca6:	50 e0       	ldi	r21, 0x00	; 0
    1ca8:	60 e1       	ldi	r22, 0x10	; 16
    1caa:	70 e0       	ldi	r23, 0x00	; 0
    1cac:	81 e0       	ldi	r24, 0x01	; 1
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	0e 94 2c 11 	call	0x2258	; 0x2258 <join>
    1cb4:	a2 2e       	mov	r10, r18
    1cb6:	b3 2e       	mov	r11, r19
    1cb8:	c4 2e       	mov	r12, r20
    1cba:	d5 2e       	mov	r13, r21
    1cbc:	e6 2e       	mov	r14, r22
    1cbe:	f7 2e       	mov	r15, r23
    1cc0:	08 2f       	mov	r16, r24
    1cc2:	19 2f       	mov	r17, r25
    1cc4:	a0 92 9b 03 	sts	0x039B, r10	; 0x80039b <program_memory+0x70>
    1cc8:	b0 92 9c 03 	sts	0x039C, r11	; 0x80039c <program_memory+0x71>
    1ccc:	c0 92 9d 03 	sts	0x039D, r12	; 0x80039d <program_memory+0x72>
    1cd0:	d0 92 9e 03 	sts	0x039E, r13	; 0x80039e <program_memory+0x73>
    1cd4:	e0 92 9f 03 	sts	0x039F, r14	; 0x80039f <program_memory+0x74>
    1cd8:	f0 92 a0 03 	sts	0x03A0, r15	; 0x8003a0 <program_memory+0x75>
    1cdc:	00 93 a1 03 	sts	0x03A1, r16	; 0x8003a1 <program_memory+0x76>
    1ce0:	10 93 a2 03 	sts	0x03A2, r17	; 0x8003a2 <program_memory+0x77>
	program_memory[15] = join(LDI, R17, (1 << LED2));
    1ce4:	20 e0       	ldi	r18, 0x00	; 0
    1ce6:	32 e0       	ldi	r19, 0x02	; 2
    1ce8:	40 e0       	ldi	r20, 0x00	; 0
    1cea:	50 e0       	ldi	r21, 0x00	; 0
    1cec:	61 e1       	ldi	r22, 0x11	; 17
    1cee:	70 e0       	ldi	r23, 0x00	; 0
    1cf0:	81 e0       	ldi	r24, 0x01	; 1
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	0e 94 2c 11 	call	0x2258	; 0x2258 <join>
    1cf8:	a2 2e       	mov	r10, r18
    1cfa:	b3 2e       	mov	r11, r19
    1cfc:	c4 2e       	mov	r12, r20
    1cfe:	d5 2e       	mov	r13, r21
    1d00:	e6 2e       	mov	r14, r22
    1d02:	f7 2e       	mov	r15, r23
    1d04:	08 2f       	mov	r16, r24
    1d06:	19 2f       	mov	r17, r25
    1d08:	a0 92 a3 03 	sts	0x03A3, r10	; 0x8003a3 <program_memory+0x78>
    1d0c:	b0 92 a4 03 	sts	0x03A4, r11	; 0x8003a4 <program_memory+0x79>
    1d10:	c0 92 a5 03 	sts	0x03A5, r12	; 0x8003a5 <program_memory+0x7a>
    1d14:	d0 92 a6 03 	sts	0x03A6, r13	; 0x8003a6 <program_memory+0x7b>
    1d18:	e0 92 a7 03 	sts	0x03A7, r14	; 0x8003a7 <program_memory+0x7c>
    1d1c:	f0 92 a8 03 	sts	0x03A8, r15	; 0x8003a8 <program_memory+0x7d>
    1d20:	00 93 a9 03 	sts	0x03A9, r16	; 0x8003a9 <program_memory+0x7e>
    1d24:	10 93 aa 03 	sts	0x03AA, r17	; 0x8003aa <program_memory+0x7f>
	program_memory[16] = join(LDI, R18, (1 << LED3));
    1d28:	20 e0       	ldi	r18, 0x00	; 0
    1d2a:	34 e0       	ldi	r19, 0x04	; 4
    1d2c:	40 e0       	ldi	r20, 0x00	; 0
    1d2e:	50 e0       	ldi	r21, 0x00	; 0
    1d30:	62 e1       	ldi	r22, 0x12	; 18
    1d32:	70 e0       	ldi	r23, 0x00	; 0
    1d34:	81 e0       	ldi	r24, 0x01	; 1
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	0e 94 2c 11 	call	0x2258	; 0x2258 <join>
    1d3c:	a2 2e       	mov	r10, r18
    1d3e:	b3 2e       	mov	r11, r19
    1d40:	c4 2e       	mov	r12, r20
    1d42:	d5 2e       	mov	r13, r21
    1d44:	e6 2e       	mov	r14, r22
    1d46:	f7 2e       	mov	r15, r23
    1d48:	08 2f       	mov	r16, r24
    1d4a:	19 2f       	mov	r17, r25
    1d4c:	a0 92 ab 03 	sts	0x03AB, r10	; 0x8003ab <program_memory+0x80>
    1d50:	b0 92 ac 03 	sts	0x03AC, r11	; 0x8003ac <program_memory+0x81>
    1d54:	c0 92 ad 03 	sts	0x03AD, r12	; 0x8003ad <program_memory+0x82>
    1d58:	d0 92 ae 03 	sts	0x03AE, r13	; 0x8003ae <program_memory+0x83>
    1d5c:	e0 92 af 03 	sts	0x03AF, r14	; 0x8003af <program_memory+0x84>
    1d60:	f0 92 b0 03 	sts	0x03B0, r15	; 0x8003b0 <program_memory+0x85>
    1d64:	00 93 b1 03 	sts	0x03B1, r16	; 0x8003b1 <program_memory+0x86>
    1d68:	10 93 b2 03 	sts	0x03B2, r17	; 0x8003b2 <program_memory+0x87>
	program_memory[17] = join(RET, 0x00, 0x00);
    1d6c:	20 e0       	ldi	r18, 0x00	; 0
    1d6e:	30 e0       	ldi	r19, 0x00	; 0
    1d70:	a9 01       	movw	r20, r18
    1d72:	60 e0       	ldi	r22, 0x00	; 0
    1d74:	70 e0       	ldi	r23, 0x00	; 0
    1d76:	8b e1       	ldi	r24, 0x1B	; 27
    1d78:	90 e0       	ldi	r25, 0x00	; 0
    1d7a:	0e 94 2c 11 	call	0x2258	; 0x2258 <join>
    1d7e:	a2 2e       	mov	r10, r18
    1d80:	b3 2e       	mov	r11, r19
    1d82:	c4 2e       	mov	r12, r20
    1d84:	d5 2e       	mov	r13, r21
    1d86:	e6 2e       	mov	r14, r22
    1d88:	f7 2e       	mov	r15, r23
    1d8a:	08 2f       	mov	r16, r24
    1d8c:	19 2f       	mov	r17, r25
    1d8e:	a0 92 b3 03 	sts	0x03B3, r10	; 0x8003b3 <program_memory+0x88>
    1d92:	b0 92 b4 03 	sts	0x03B4, r11	; 0x8003b4 <program_memory+0x89>
    1d96:	c0 92 b5 03 	sts	0x03B5, r12	; 0x8003b5 <program_memory+0x8a>
    1d9a:	d0 92 b6 03 	sts	0x03B6, r13	; 0x8003b6 <program_memory+0x8b>
    1d9e:	e0 92 b7 03 	sts	0x03B7, r14	; 0x8003b7 <program_memory+0x8c>
    1da2:	f0 92 b8 03 	sts	0x03B8, r15	; 0x8003b8 <program_memory+0x8d>
    1da6:	00 93 b9 03 	sts	0x03B9, r16	; 0x8003b9 <program_memory+0x8e>
    1daa:	10 93 ba 03 	sts	0x03BA, r17	; 0x8003ba <program_memory+0x8f>

	program_memory[18] = join(IN, R24, PINA);
    1dae:	22 e0       	ldi	r18, 0x02	; 2
    1db0:	30 e0       	ldi	r19, 0x00	; 0
    1db2:	40 e0       	ldi	r20, 0x00	; 0
    1db4:	50 e0       	ldi	r21, 0x00	; 0
    1db6:	68 e1       	ldi	r22, 0x18	; 24
    1db8:	70 e0       	ldi	r23, 0x00	; 0
    1dba:	84 e0       	ldi	r24, 0x04	; 4
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	0e 94 2c 11 	call	0x2258	; 0x2258 <join>
    1dc2:	a2 2e       	mov	r10, r18
    1dc4:	b3 2e       	mov	r11, r19
    1dc6:	c4 2e       	mov	r12, r20
    1dc8:	d5 2e       	mov	r13, r21
    1dca:	e6 2e       	mov	r14, r22
    1dcc:	f7 2e       	mov	r15, r23
    1dce:	08 2f       	mov	r16, r24
    1dd0:	19 2f       	mov	r17, r25
    1dd2:	a0 92 bb 03 	sts	0x03BB, r10	; 0x8003bb <program_memory+0x90>
    1dd6:	b0 92 bc 03 	sts	0x03BC, r11	; 0x8003bc <program_memory+0x91>
    1dda:	c0 92 bd 03 	sts	0x03BD, r12	; 0x8003bd <program_memory+0x92>
    1dde:	d0 92 be 03 	sts	0x03BE, r13	; 0x8003be <program_memory+0x93>
    1de2:	e0 92 bf 03 	sts	0x03BF, r14	; 0x8003bf <program_memory+0x94>
    1de6:	f0 92 c0 03 	sts	0x03C0, r15	; 0x8003c0 <program_memory+0x95>
    1dea:	00 93 c1 03 	sts	0x03C1, r16	; 0x8003c1 <program_memory+0x96>
    1dee:	10 93 c2 03 	sts	0x03C2, r17	; 0x8003c2 <program_memory+0x97>
	program_memory[19] = join(ANDI, R24, (1 << BUTTON1));
    1df2:	20 e0       	ldi	r18, 0x00	; 0
    1df4:	38 e0       	ldi	r19, 0x08	; 8
    1df6:	40 e0       	ldi	r20, 0x00	; 0
    1df8:	50 e0       	ldi	r21, 0x00	; 0
    1dfa:	68 e1       	ldi	r22, 0x18	; 24
    1dfc:	70 e0       	ldi	r23, 0x00	; 0
    1dfe:	8b e0       	ldi	r24, 0x0B	; 11
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	0e 94 2c 11 	call	0x2258	; 0x2258 <join>
    1e06:	a2 2e       	mov	r10, r18
    1e08:	b3 2e       	mov	r11, r19
    1e0a:	c4 2e       	mov	r12, r20
    1e0c:	d5 2e       	mov	r13, r21
    1e0e:	e6 2e       	mov	r14, r22
    1e10:	f7 2e       	mov	r15, r23
    1e12:	08 2f       	mov	r16, r24
    1e14:	19 2f       	mov	r17, r25
    1e16:	a0 92 c3 03 	sts	0x03C3, r10	; 0x8003c3 <program_memory+0x98>
    1e1a:	b0 92 c4 03 	sts	0x03C4, r11	; 0x8003c4 <program_memory+0x99>
    1e1e:	c0 92 c5 03 	sts	0x03C5, r12	; 0x8003c5 <program_memory+0x9a>
    1e22:	d0 92 c6 03 	sts	0x03C6, r13	; 0x8003c6 <program_memory+0x9b>
    1e26:	e0 92 c7 03 	sts	0x03C7, r14	; 0x8003c7 <program_memory+0x9c>
    1e2a:	f0 92 c8 03 	sts	0x03C8, r15	; 0x8003c8 <program_memory+0x9d>
    1e2e:	00 93 c9 03 	sts	0x03C9, r16	; 0x8003c9 <program_memory+0x9e>
    1e32:	10 93 ca 03 	sts	0x03CA, r17	; 0x8003ca <program_memory+0x9f>
	program_memory[20] = join(JE, check_button2, 0x00);
    1e36:	20 e0       	ldi	r18, 0x00	; 0
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	a9 01       	movw	r20, r18
    1e3c:	67 e1       	ldi	r22, 0x17	; 23
    1e3e:	70 e0       	ldi	r23, 0x00	; 0
    1e40:	8e e1       	ldi	r24, 0x1E	; 30
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	0e 94 2c 11 	call	0x2258	; 0x2258 <join>
    1e48:	a2 2e       	mov	r10, r18
    1e4a:	b3 2e       	mov	r11, r19
    1e4c:	c4 2e       	mov	r12, r20
    1e4e:	d5 2e       	mov	r13, r21
    1e50:	e6 2e       	mov	r14, r22
    1e52:	f7 2e       	mov	r15, r23
    1e54:	08 2f       	mov	r16, r24
    1e56:	19 2f       	mov	r17, r25
    1e58:	a0 92 cb 03 	sts	0x03CB, r10	; 0x8003cb <program_memory+0xa0>
    1e5c:	b0 92 cc 03 	sts	0x03CC, r11	; 0x8003cc <program_memory+0xa1>
    1e60:	c0 92 cd 03 	sts	0x03CD, r12	; 0x8003cd <program_memory+0xa2>
    1e64:	d0 92 ce 03 	sts	0x03CE, r13	; 0x8003ce <program_memory+0xa3>
    1e68:	e0 92 cf 03 	sts	0x03CF, r14	; 0x8003cf <program_memory+0xa4>
    1e6c:	f0 92 d0 03 	sts	0x03D0, r15	; 0x8003d0 <program_memory+0xa5>
    1e70:	00 93 d1 03 	sts	0x03D1, r16	; 0x8003d1 <program_memory+0xa6>
    1e74:	10 93 d2 03 	sts	0x03D2, r17	; 0x8003d2 <program_memory+0xa7>
	program_memory[21] = join(OUT, PINA, R16);
    1e78:	20 e1       	ldi	r18, 0x10	; 16
    1e7a:	30 e0       	ldi	r19, 0x00	; 0
    1e7c:	40 e0       	ldi	r20, 0x00	; 0
    1e7e:	50 e0       	ldi	r21, 0x00	; 0
    1e80:	62 e0       	ldi	r22, 0x02	; 2
    1e82:	70 e0       	ldi	r23, 0x00	; 0
    1e84:	83 e0       	ldi	r24, 0x03	; 3
    1e86:	90 e0       	ldi	r25, 0x00	; 0
    1e88:	0e 94 2c 11 	call	0x2258	; 0x2258 <join>
    1e8c:	a2 2e       	mov	r10, r18
    1e8e:	b3 2e       	mov	r11, r19
    1e90:	c4 2e       	mov	r12, r20
    1e92:	d5 2e       	mov	r13, r21
    1e94:	e6 2e       	mov	r14, r22
    1e96:	f7 2e       	mov	r15, r23
    1e98:	08 2f       	mov	r16, r24
    1e9a:	19 2f       	mov	r17, r25
    1e9c:	a0 92 d3 03 	sts	0x03D3, r10	; 0x8003d3 <program_memory+0xa8>
    1ea0:	b0 92 d4 03 	sts	0x03D4, r11	; 0x8003d4 <program_memory+0xa9>
    1ea4:	c0 92 d5 03 	sts	0x03D5, r12	; 0x8003d5 <program_memory+0xaa>
    1ea8:	d0 92 d6 03 	sts	0x03D6, r13	; 0x8003d6 <program_memory+0xab>
    1eac:	e0 92 d7 03 	sts	0x03D7, r14	; 0x8003d7 <program_memory+0xac>
    1eb0:	f0 92 d8 03 	sts	0x03D8, r15	; 0x8003d8 <program_memory+0xad>
    1eb4:	00 93 d9 03 	sts	0x03D9, r16	; 0x8003d9 <program_memory+0xae>
    1eb8:	10 93 da 03 	sts	0x03DA, r17	; 0x8003da <program_memory+0xaf>
	program_memory[22] = join(RETI, 0x00, 0x00);
    1ebc:	20 e0       	ldi	r18, 0x00	; 0
    1ebe:	30 e0       	ldi	r19, 0x00	; 0
    1ec0:	a9 01       	movw	r20, r18
    1ec2:	60 e0       	ldi	r22, 0x00	; 0
    1ec4:	70 e0       	ldi	r23, 0x00	; 0
    1ec6:	8c e1       	ldi	r24, 0x1C	; 28
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	0e 94 2c 11 	call	0x2258	; 0x2258 <join>
    1ece:	a2 2e       	mov	r10, r18
    1ed0:	b3 2e       	mov	r11, r19
    1ed2:	c4 2e       	mov	r12, r20
    1ed4:	d5 2e       	mov	r13, r21
    1ed6:	e6 2e       	mov	r14, r22
    1ed8:	f7 2e       	mov	r15, r23
    1eda:	08 2f       	mov	r16, r24
    1edc:	19 2f       	mov	r17, r25
    1ede:	a0 92 db 03 	sts	0x03DB, r10	; 0x8003db <program_memory+0xb0>
    1ee2:	b0 92 dc 03 	sts	0x03DC, r11	; 0x8003dc <program_memory+0xb1>
    1ee6:	c0 92 dd 03 	sts	0x03DD, r12	; 0x8003dd <program_memory+0xb2>
    1eea:	d0 92 de 03 	sts	0x03DE, r13	; 0x8003de <program_memory+0xb3>
    1eee:	e0 92 df 03 	sts	0x03DF, r14	; 0x8003df <program_memory+0xb4>
    1ef2:	f0 92 e0 03 	sts	0x03E0, r15	; 0x8003e0 <program_memory+0xb5>
    1ef6:	00 93 e1 03 	sts	0x03E1, r16	; 0x8003e1 <program_memory+0xb6>
    1efa:	10 93 e2 03 	sts	0x03E2, r17	; 0x8003e2 <program_memory+0xb7>
	program_memory[23] = join(IN, R24, PINA);
    1efe:	22 e0       	ldi	r18, 0x02	; 2
    1f00:	30 e0       	ldi	r19, 0x00	; 0
    1f02:	40 e0       	ldi	r20, 0x00	; 0
    1f04:	50 e0       	ldi	r21, 0x00	; 0
    1f06:	68 e1       	ldi	r22, 0x18	; 24
    1f08:	70 e0       	ldi	r23, 0x00	; 0
    1f0a:	84 e0       	ldi	r24, 0x04	; 4
    1f0c:	90 e0       	ldi	r25, 0x00	; 0
    1f0e:	0e 94 2c 11 	call	0x2258	; 0x2258 <join>
    1f12:	a2 2e       	mov	r10, r18
    1f14:	b3 2e       	mov	r11, r19
    1f16:	c4 2e       	mov	r12, r20
    1f18:	d5 2e       	mov	r13, r21
    1f1a:	e6 2e       	mov	r14, r22
    1f1c:	f7 2e       	mov	r15, r23
    1f1e:	08 2f       	mov	r16, r24
    1f20:	19 2f       	mov	r17, r25
    1f22:	a0 92 e3 03 	sts	0x03E3, r10	; 0x8003e3 <program_memory+0xb8>
    1f26:	b0 92 e4 03 	sts	0x03E4, r11	; 0x8003e4 <program_memory+0xb9>
    1f2a:	c0 92 e5 03 	sts	0x03E5, r12	; 0x8003e5 <program_memory+0xba>
    1f2e:	d0 92 e6 03 	sts	0x03E6, r13	; 0x8003e6 <program_memory+0xbb>
    1f32:	e0 92 e7 03 	sts	0x03E7, r14	; 0x8003e7 <program_memory+0xbc>
    1f36:	f0 92 e8 03 	sts	0x03E8, r15	; 0x8003e8 <program_memory+0xbd>
    1f3a:	00 93 e9 03 	sts	0x03E9, r16	; 0x8003e9 <program_memory+0xbe>
    1f3e:	10 93 ea 03 	sts	0x03EA, r17	; 0x8003ea <program_memory+0xbf>
	program_memory[24] = join(ANDI, R24, (1 << BUTTON2));
    1f42:	20 e0       	ldi	r18, 0x00	; 0
    1f44:	30 e1       	ldi	r19, 0x10	; 16
    1f46:	40 e0       	ldi	r20, 0x00	; 0
    1f48:	50 e0       	ldi	r21, 0x00	; 0
    1f4a:	68 e1       	ldi	r22, 0x18	; 24
    1f4c:	70 e0       	ldi	r23, 0x00	; 0
    1f4e:	8b e0       	ldi	r24, 0x0B	; 11
    1f50:	90 e0       	ldi	r25, 0x00	; 0
    1f52:	0e 94 2c 11 	call	0x2258	; 0x2258 <join>
    1f56:	a2 2e       	mov	r10, r18
    1f58:	b3 2e       	mov	r11, r19
    1f5a:	c4 2e       	mov	r12, r20
    1f5c:	d5 2e       	mov	r13, r21
    1f5e:	e6 2e       	mov	r14, r22
    1f60:	f7 2e       	mov	r15, r23
    1f62:	08 2f       	mov	r16, r24
    1f64:	19 2f       	mov	r17, r25
    1f66:	a0 92 eb 03 	sts	0x03EB, r10	; 0x8003eb <program_memory+0xc0>
    1f6a:	b0 92 ec 03 	sts	0x03EC, r11	; 0x8003ec <program_memory+0xc1>
    1f6e:	c0 92 ed 03 	sts	0x03ED, r12	; 0x8003ed <program_memory+0xc2>
    1f72:	d0 92 ee 03 	sts	0x03EE, r13	; 0x8003ee <program_memory+0xc3>
    1f76:	e0 92 ef 03 	sts	0x03EF, r14	; 0x8003ef <program_memory+0xc4>
    1f7a:	f0 92 f0 03 	sts	0x03F0, r15	; 0x8003f0 <program_memory+0xc5>
    1f7e:	00 93 f1 03 	sts	0x03F1, r16	; 0x8003f1 <program_memory+0xc6>
    1f82:	10 93 f2 03 	sts	0x03F2, r17	; 0x8003f2 <program_memory+0xc7>
	program_memory[25] = join(JE, check_button3, 0x00);
    1f86:	20 e0       	ldi	r18, 0x00	; 0
    1f88:	30 e0       	ldi	r19, 0x00	; 0
    1f8a:	a9 01       	movw	r20, r18
    1f8c:	6c e1       	ldi	r22, 0x1C	; 28
    1f8e:	70 e0       	ldi	r23, 0x00	; 0
    1f90:	8e e1       	ldi	r24, 0x1E	; 30
    1f92:	90 e0       	ldi	r25, 0x00	; 0
    1f94:	0e 94 2c 11 	call	0x2258	; 0x2258 <join>
    1f98:	a2 2e       	mov	r10, r18
    1f9a:	b3 2e       	mov	r11, r19
    1f9c:	c4 2e       	mov	r12, r20
    1f9e:	d5 2e       	mov	r13, r21
    1fa0:	e6 2e       	mov	r14, r22
    1fa2:	f7 2e       	mov	r15, r23
    1fa4:	08 2f       	mov	r16, r24
    1fa6:	19 2f       	mov	r17, r25
    1fa8:	a0 92 f3 03 	sts	0x03F3, r10	; 0x8003f3 <program_memory+0xc8>
    1fac:	b0 92 f4 03 	sts	0x03F4, r11	; 0x8003f4 <program_memory+0xc9>
    1fb0:	c0 92 f5 03 	sts	0x03F5, r12	; 0x8003f5 <program_memory+0xca>
    1fb4:	d0 92 f6 03 	sts	0x03F6, r13	; 0x8003f6 <program_memory+0xcb>
    1fb8:	e0 92 f7 03 	sts	0x03F7, r14	; 0x8003f7 <program_memory+0xcc>
    1fbc:	f0 92 f8 03 	sts	0x03F8, r15	; 0x8003f8 <program_memory+0xcd>
    1fc0:	00 93 f9 03 	sts	0x03F9, r16	; 0x8003f9 <program_memory+0xce>
    1fc4:	10 93 fa 03 	sts	0x03FA, r17	; 0x8003fa <program_memory+0xcf>
	program_memory[26] = join(OUT, PINA, R17);
    1fc8:	21 e1       	ldi	r18, 0x11	; 17
    1fca:	30 e0       	ldi	r19, 0x00	; 0
    1fcc:	40 e0       	ldi	r20, 0x00	; 0
    1fce:	50 e0       	ldi	r21, 0x00	; 0
    1fd0:	62 e0       	ldi	r22, 0x02	; 2
    1fd2:	70 e0       	ldi	r23, 0x00	; 0
    1fd4:	83 e0       	ldi	r24, 0x03	; 3
    1fd6:	90 e0       	ldi	r25, 0x00	; 0
    1fd8:	0e 94 2c 11 	call	0x2258	; 0x2258 <join>
    1fdc:	a2 2e       	mov	r10, r18
    1fde:	b3 2e       	mov	r11, r19
    1fe0:	c4 2e       	mov	r12, r20
    1fe2:	d5 2e       	mov	r13, r21
    1fe4:	e6 2e       	mov	r14, r22
    1fe6:	f7 2e       	mov	r15, r23
    1fe8:	08 2f       	mov	r16, r24
    1fea:	19 2f       	mov	r17, r25
    1fec:	a0 92 fb 03 	sts	0x03FB, r10	; 0x8003fb <program_memory+0xd0>
    1ff0:	b0 92 fc 03 	sts	0x03FC, r11	; 0x8003fc <program_memory+0xd1>
    1ff4:	c0 92 fd 03 	sts	0x03FD, r12	; 0x8003fd <program_memory+0xd2>
    1ff8:	d0 92 fe 03 	sts	0x03FE, r13	; 0x8003fe <program_memory+0xd3>
    1ffc:	e0 92 ff 03 	sts	0x03FF, r14	; 0x8003ff <program_memory+0xd4>
    2000:	f0 92 00 04 	sts	0x0400, r15	; 0x800400 <program_memory+0xd5>
    2004:	00 93 01 04 	sts	0x0401, r16	; 0x800401 <program_memory+0xd6>
    2008:	10 93 02 04 	sts	0x0402, r17	; 0x800402 <program_memory+0xd7>
	program_memory[27] = join(RETI, 0x00, 0x00);
    200c:	20 e0       	ldi	r18, 0x00	; 0
    200e:	30 e0       	ldi	r19, 0x00	; 0
    2010:	a9 01       	movw	r20, r18
    2012:	60 e0       	ldi	r22, 0x00	; 0
    2014:	70 e0       	ldi	r23, 0x00	; 0
    2016:	8c e1       	ldi	r24, 0x1C	; 28
    2018:	90 e0       	ldi	r25, 0x00	; 0
    201a:	0e 94 2c 11 	call	0x2258	; 0x2258 <join>
    201e:	a2 2e       	mov	r10, r18
    2020:	b3 2e       	mov	r11, r19
    2022:	c4 2e       	mov	r12, r20
    2024:	d5 2e       	mov	r13, r21
    2026:	e6 2e       	mov	r14, r22
    2028:	f7 2e       	mov	r15, r23
    202a:	08 2f       	mov	r16, r24
    202c:	19 2f       	mov	r17, r25
    202e:	a0 92 03 04 	sts	0x0403, r10	; 0x800403 <program_memory+0xd8>
    2032:	b0 92 04 04 	sts	0x0404, r11	; 0x800404 <program_memory+0xd9>
    2036:	c0 92 05 04 	sts	0x0405, r12	; 0x800405 <program_memory+0xda>
    203a:	d0 92 06 04 	sts	0x0406, r13	; 0x800406 <program_memory+0xdb>
    203e:	e0 92 07 04 	sts	0x0407, r14	; 0x800407 <program_memory+0xdc>
    2042:	f0 92 08 04 	sts	0x0408, r15	; 0x800408 <program_memory+0xdd>
    2046:	00 93 09 04 	sts	0x0409, r16	; 0x800409 <program_memory+0xde>
    204a:	10 93 0a 04 	sts	0x040A, r17	; 0x80040a <program_memory+0xdf>
	program_memory[28] = join(IN, R24, PINA);
    204e:	22 e0       	ldi	r18, 0x02	; 2
    2050:	30 e0       	ldi	r19, 0x00	; 0
    2052:	40 e0       	ldi	r20, 0x00	; 0
    2054:	50 e0       	ldi	r21, 0x00	; 0
    2056:	68 e1       	ldi	r22, 0x18	; 24
    2058:	70 e0       	ldi	r23, 0x00	; 0
    205a:	84 e0       	ldi	r24, 0x04	; 4
    205c:	90 e0       	ldi	r25, 0x00	; 0
    205e:	0e 94 2c 11 	call	0x2258	; 0x2258 <join>
    2062:	a2 2e       	mov	r10, r18
    2064:	b3 2e       	mov	r11, r19
    2066:	c4 2e       	mov	r12, r20
    2068:	d5 2e       	mov	r13, r21
    206a:	e6 2e       	mov	r14, r22
    206c:	f7 2e       	mov	r15, r23
    206e:	08 2f       	mov	r16, r24
    2070:	19 2f       	mov	r17, r25
    2072:	a0 92 0b 04 	sts	0x040B, r10	; 0x80040b <program_memory+0xe0>
    2076:	b0 92 0c 04 	sts	0x040C, r11	; 0x80040c <program_memory+0xe1>
    207a:	c0 92 0d 04 	sts	0x040D, r12	; 0x80040d <program_memory+0xe2>
    207e:	d0 92 0e 04 	sts	0x040E, r13	; 0x80040e <program_memory+0xe3>
    2082:	e0 92 0f 04 	sts	0x040F, r14	; 0x80040f <program_memory+0xe4>
    2086:	f0 92 10 04 	sts	0x0410, r15	; 0x800410 <program_memory+0xe5>
    208a:	00 93 11 04 	sts	0x0411, r16	; 0x800411 <program_memory+0xe6>
    208e:	10 93 12 04 	sts	0x0412, r17	; 0x800412 <program_memory+0xe7>
	program_memory[29] = join(ANDI, R24, (1 << BUTTON3));
    2092:	20 e0       	ldi	r18, 0x00	; 0
    2094:	30 e2       	ldi	r19, 0x20	; 32
    2096:	40 e0       	ldi	r20, 0x00	; 0
    2098:	50 e0       	ldi	r21, 0x00	; 0
    209a:	68 e1       	ldi	r22, 0x18	; 24
    209c:	70 e0       	ldi	r23, 0x00	; 0
    209e:	8b e0       	ldi	r24, 0x0B	; 11
    20a0:	90 e0       	ldi	r25, 0x00	; 0
    20a2:	0e 94 2c 11 	call	0x2258	; 0x2258 <join>
    20a6:	a2 2e       	mov	r10, r18
    20a8:	b3 2e       	mov	r11, r19
    20aa:	c4 2e       	mov	r12, r20
    20ac:	d5 2e       	mov	r13, r21
    20ae:	e6 2e       	mov	r14, r22
    20b0:	f7 2e       	mov	r15, r23
    20b2:	08 2f       	mov	r16, r24
    20b4:	19 2f       	mov	r17, r25
    20b6:	a0 92 13 04 	sts	0x0413, r10	; 0x800413 <program_memory+0xe8>
    20ba:	b0 92 14 04 	sts	0x0414, r11	; 0x800414 <program_memory+0xe9>
    20be:	c0 92 15 04 	sts	0x0415, r12	; 0x800415 <program_memory+0xea>
    20c2:	d0 92 16 04 	sts	0x0416, r13	; 0x800416 <program_memory+0xeb>
    20c6:	e0 92 17 04 	sts	0x0417, r14	; 0x800417 <program_memory+0xec>
    20ca:	f0 92 18 04 	sts	0x0418, r15	; 0x800418 <program_memory+0xed>
    20ce:	00 93 19 04 	sts	0x0419, r16	; 0x800419 <program_memory+0xee>
    20d2:	10 93 1a 04 	sts	0x041A, r17	; 0x80041a <program_memory+0xef>
	program_memory[30] = join(JE, ISR_PCINT_end, 0x00);
    20d6:	20 e0       	ldi	r18, 0x00	; 0
    20d8:	30 e0       	ldi	r19, 0x00	; 0
    20da:	a9 01       	movw	r20, r18
    20dc:	60 e2       	ldi	r22, 0x20	; 32
    20de:	70 e0       	ldi	r23, 0x00	; 0
    20e0:	8e e1       	ldi	r24, 0x1E	; 30
    20e2:	90 e0       	ldi	r25, 0x00	; 0
    20e4:	0e 94 2c 11 	call	0x2258	; 0x2258 <join>
    20e8:	a2 2e       	mov	r10, r18
    20ea:	b3 2e       	mov	r11, r19
    20ec:	c4 2e       	mov	r12, r20
    20ee:	d5 2e       	mov	r13, r21
    20f0:	e6 2e       	mov	r14, r22
    20f2:	f7 2e       	mov	r15, r23
    20f4:	08 2f       	mov	r16, r24
    20f6:	19 2f       	mov	r17, r25
    20f8:	a0 92 1b 04 	sts	0x041B, r10	; 0x80041b <program_memory+0xf0>
    20fc:	b0 92 1c 04 	sts	0x041C, r11	; 0x80041c <program_memory+0xf1>
    2100:	c0 92 1d 04 	sts	0x041D, r12	; 0x80041d <program_memory+0xf2>
    2104:	d0 92 1e 04 	sts	0x041E, r13	; 0x80041e <program_memory+0xf3>
    2108:	e0 92 1f 04 	sts	0x041F, r14	; 0x80041f <program_memory+0xf4>
    210c:	f0 92 20 04 	sts	0x0420, r15	; 0x800420 <program_memory+0xf5>
    2110:	00 93 21 04 	sts	0x0421, r16	; 0x800421 <program_memory+0xf6>
    2114:	10 93 22 04 	sts	0x0422, r17	; 0x800422 <program_memory+0xf7>
	program_memory[31] = join(OUT, PINA, R18);
    2118:	22 e1       	ldi	r18, 0x12	; 18
    211a:	30 e0       	ldi	r19, 0x00	; 0
    211c:	40 e0       	ldi	r20, 0x00	; 0
    211e:	50 e0       	ldi	r21, 0x00	; 0
    2120:	62 e0       	ldi	r22, 0x02	; 2
    2122:	70 e0       	ldi	r23, 0x00	; 0
    2124:	83 e0       	ldi	r24, 0x03	; 3
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	0e 94 2c 11 	call	0x2258	; 0x2258 <join>
    212c:	a2 2e       	mov	r10, r18
    212e:	b3 2e       	mov	r11, r19
    2130:	c4 2e       	mov	r12, r20
    2132:	d5 2e       	mov	r13, r21
    2134:	e6 2e       	mov	r14, r22
    2136:	f7 2e       	mov	r15, r23
    2138:	08 2f       	mov	r16, r24
    213a:	19 2f       	mov	r17, r25
    213c:	a0 92 23 04 	sts	0x0423, r10	; 0x800423 <program_memory+0xf8>
    2140:	b0 92 24 04 	sts	0x0424, r11	; 0x800424 <program_memory+0xf9>
    2144:	c0 92 25 04 	sts	0x0425, r12	; 0x800425 <program_memory+0xfa>
    2148:	d0 92 26 04 	sts	0x0426, r13	; 0x800426 <program_memory+0xfb>
    214c:	e0 92 27 04 	sts	0x0427, r14	; 0x800427 <program_memory+0xfc>
    2150:	f0 92 28 04 	sts	0x0428, r15	; 0x800428 <program_memory+0xfd>
    2154:	00 93 29 04 	sts	0x0429, r16	; 0x800429 <program_memory+0xfe>
    2158:	10 93 2a 04 	sts	0x042A, r17	; 0x80042a <program_memory+0xff>
	program_memory[32] = join(RETI, 0x00, 0x00);
    215c:	20 e0       	ldi	r18, 0x00	; 0
    215e:	30 e0       	ldi	r19, 0x00	; 0
    2160:	a9 01       	movw	r20, r18
    2162:	60 e0       	ldi	r22, 0x00	; 0
    2164:	70 e0       	ldi	r23, 0x00	; 0
    2166:	8c e1       	ldi	r24, 0x1C	; 28
    2168:	90 e0       	ldi	r25, 0x00	; 0
    216a:	0e 94 2c 11 	call	0x2258	; 0x2258 <join>
    216e:	a2 2e       	mov	r10, r18
    2170:	b3 2e       	mov	r11, r19
    2172:	c4 2e       	mov	r12, r20
    2174:	d5 2e       	mov	r13, r21
    2176:	e6 2e       	mov	r14, r22
    2178:	f7 2e       	mov	r15, r23
    217a:	08 2f       	mov	r16, r24
    217c:	19 2f       	mov	r17, r25
    217e:	a0 92 2b 04 	sts	0x042B, r10	; 0x80042b <program_memory+0x100>
    2182:	b0 92 2c 04 	sts	0x042C, r11	; 0x80042c <program_memory+0x101>
    2186:	c0 92 2d 04 	sts	0x042D, r12	; 0x80042d <program_memory+0x102>
    218a:	d0 92 2e 04 	sts	0x042E, r13	; 0x80042e <program_memory+0x103>
    218e:	e0 92 2f 04 	sts	0x042F, r14	; 0x80042f <program_memory+0x104>
    2192:	f0 92 30 04 	sts	0x0430, r15	; 0x800430 <program_memory+0x105>
    2196:	00 93 31 04 	sts	0x0431, r16	; 0x800431 <program_memory+0x106>
    219a:	10 93 32 04 	sts	0x0432, r17	; 0x800432 <program_memory+0x107>
	 
	 program_memory_initialized = true;
    219e:	81 e0       	ldi	r24, 0x01	; 1
    21a0:	80 93 43 04 	sts	0x0443, r24	; 0x800443 <program_memory_initialized.1982>
	 return;
    21a4:	00 00       	nop
    21a6:	01 c0       	rjmp	.+2      	; 0x21aa <program_memory_write+0x8d6>


void program_memory_write(void)
{
	static bool program_memory_initialized = false;
	if (program_memory_initialized) return;
    21a8:	00 00       	nop
	program_memory[32] = join(RETI, 0x00, 0x00);
	 
	 program_memory_initialized = true;
	 return;
	
}
    21aa:	df 91       	pop	r29
    21ac:	cf 91       	pop	r28
    21ae:	1f 91       	pop	r17
    21b0:	0f 91       	pop	r16
    21b2:	ff 90       	pop	r15
    21b4:	ef 90       	pop	r14
    21b6:	df 90       	pop	r13
    21b8:	cf 90       	pop	r12
    21ba:	bf 90       	pop	r11
    21bc:	af 90       	pop	r10
    21be:	08 95       	ret

000021c0 <program_memory_read>:

uint64_t program_memory_read(const uint16_t address)
{
    21c0:	af 92       	push	r10
    21c2:	bf 92       	push	r11
    21c4:	cf 92       	push	r12
    21c6:	df 92       	push	r13
    21c8:	ef 92       	push	r14
    21ca:	ff 92       	push	r15
    21cc:	0f 93       	push	r16
    21ce:	1f 93       	push	r17
    21d0:	cf 93       	push	r28
    21d2:	df 93       	push	r29
    21d4:	00 d0       	rcall	.+0      	; 0x21d6 <program_memory_read+0x16>
    21d6:	cd b7       	in	r28, 0x3d	; 61
    21d8:	de b7       	in	r29, 0x3e	; 62
    21da:	9a 83       	std	Y+2, r25	; 0x02
    21dc:	89 83       	std	Y+1, r24	; 0x01
	if (address < PROGRAM_MEMORY_ADDRESS_WIDTH)
    21de:	89 81       	ldd	r24, Y+1	; 0x01
    21e0:	9a 81       	ldd	r25, Y+2	; 0x02
    21e2:	83 97       	sbiw	r24, 0x23	; 35
    21e4:	a0 f4       	brcc	.+40     	; 0x220e <program_memory_read+0x4e>
	{
		return program_memory[address];
    21e6:	89 81       	ldd	r24, Y+1	; 0x01
    21e8:	9a 81       	ldd	r25, Y+2	; 0x02
    21ea:	88 0f       	add	r24, r24
    21ec:	99 1f       	adc	r25, r25
    21ee:	88 0f       	add	r24, r24
    21f0:	99 1f       	adc	r25, r25
    21f2:	88 0f       	add	r24, r24
    21f4:	99 1f       	adc	r25, r25
    21f6:	fc 01       	movw	r30, r24
    21f8:	e5 5d       	subi	r30, 0xD5	; 213
    21fa:	fc 4f       	sbci	r31, 0xFC	; 252
    21fc:	20 81       	ld	r18, Z
    21fe:	31 81       	ldd	r19, Z+1	; 0x01
    2200:	42 81       	ldd	r20, Z+2	; 0x02
    2202:	53 81       	ldd	r21, Z+3	; 0x03
    2204:	64 81       	ldd	r22, Z+4	; 0x04
    2206:	75 81       	ldd	r23, Z+5	; 0x05
    2208:	86 81       	ldd	r24, Z+6	; 0x06
    220a:	97 81       	ldd	r25, Z+7	; 0x07
    220c:	08 c0       	rjmp	.+16     	; 0x221e <program_memory_read+0x5e>
	}
	else
	{
		return 0x00;
    220e:	20 e0       	ldi	r18, 0x00	; 0
    2210:	30 e0       	ldi	r19, 0x00	; 0
    2212:	40 e0       	ldi	r20, 0x00	; 0
    2214:	50 e0       	ldi	r21, 0x00	; 0
    2216:	60 e0       	ldi	r22, 0x00	; 0
    2218:	70 e0       	ldi	r23, 0x00	; 0
    221a:	80 e0       	ldi	r24, 0x00	; 0
    221c:	90 e0       	ldi	r25, 0x00	; 0
    221e:	a2 2e       	mov	r10, r18
    2220:	b3 2e       	mov	r11, r19
    2222:	c4 2e       	mov	r12, r20
    2224:	d5 2e       	mov	r13, r21
    2226:	e6 2e       	mov	r14, r22
    2228:	f7 2e       	mov	r15, r23
    222a:	08 2f       	mov	r16, r24
    222c:	19 2f       	mov	r17, r25
	}
}
    222e:	2a 2d       	mov	r18, r10
    2230:	3b 2d       	mov	r19, r11
    2232:	4c 2d       	mov	r20, r12
    2234:	5d 2d       	mov	r21, r13
    2236:	6e 2d       	mov	r22, r14
    2238:	7f 2d       	mov	r23, r15
    223a:	80 2f       	mov	r24, r16
    223c:	91 2f       	mov	r25, r17
    223e:	0f 90       	pop	r0
    2240:	0f 90       	pop	r0
    2242:	df 91       	pop	r29
    2244:	cf 91       	pop	r28
    2246:	1f 91       	pop	r17
    2248:	0f 91       	pop	r16
    224a:	ff 90       	pop	r15
    224c:	ef 90       	pop	r14
    224e:	df 90       	pop	r13
    2250:	cf 90       	pop	r12
    2252:	bf 90       	pop	r11
    2254:	af 90       	pop	r10
    2256:	08 95       	ret

00002258 <join>:

static inline uint64_t join(const uint16_t op_code,
                            const uint16_t op1,
                            const uint32_t op2)
{
    2258:	2f 92       	push	r2
    225a:	3f 92       	push	r3
    225c:	4f 92       	push	r4
    225e:	5f 92       	push	r5
    2260:	6f 92       	push	r6
    2262:	7f 92       	push	r7
    2264:	8f 92       	push	r8
    2266:	9f 92       	push	r9
    2268:	af 92       	push	r10
    226a:	bf 92       	push	r11
    226c:	cf 92       	push	r12
    226e:	df 92       	push	r13
    2270:	ef 92       	push	r14
    2272:	ff 92       	push	r15
    2274:	0f 93       	push	r16
    2276:	1f 93       	push	r17
    2278:	cf 93       	push	r28
    227a:	df 93       	push	r29
    227c:	cd b7       	in	r28, 0x3d	; 61
    227e:	de b7       	in	r29, 0x3e	; 62
    2280:	68 97       	sbiw	r28, 0x18	; 24
    2282:	0f b6       	in	r0, 0x3f	; 63
    2284:	f8 94       	cli
    2286:	de bf       	out	0x3e, r29	; 62
    2288:	0f be       	out	0x3f, r0	; 63
    228a:	cd bf       	out	0x3d, r28	; 61
    228c:	9a 83       	std	Y+2, r25	; 0x02
    228e:	89 83       	std	Y+1, r24	; 0x01
    2290:	7c 83       	std	Y+4, r23	; 0x04
    2292:	6b 83       	std	Y+3, r22	; 0x03
    2294:	2d 83       	std	Y+5, r18	; 0x05
    2296:	3e 83       	std	Y+6, r19	; 0x06
    2298:	4f 83       	std	Y+7, r20	; 0x07
    229a:	58 87       	std	Y+8, r21	; 0x08
	return ((uint64_t)(op_code) << 48) | ((uint64_t)(op1) << 32) | op2;
    229c:	89 81       	ldd	r24, Y+1	; 0x01
    229e:	9a 81       	ldd	r25, Y+2	; 0x02
    22a0:	5c 01       	movw	r10, r24
    22a2:	c1 2c       	mov	r12, r1
    22a4:	d1 2c       	mov	r13, r1
    22a6:	e1 2c       	mov	r14, r1
    22a8:	f1 2c       	mov	r15, r1
    22aa:	87 01       	movw	r16, r14
    22ac:	2a 2d       	mov	r18, r10
    22ae:	3b 2d       	mov	r19, r11
    22b0:	4c 2d       	mov	r20, r12
    22b2:	5d 2d       	mov	r21, r13
    22b4:	6e 2d       	mov	r22, r14
    22b6:	7f 2d       	mov	r23, r15
    22b8:	80 2f       	mov	r24, r16
    22ba:	91 2f       	mov	r25, r17
    22bc:	00 e3       	ldi	r16, 0x30	; 48
    22be:	0e 94 ee 13 	call	0x27dc	; 0x27dc <__ashldi3>
    22c2:	29 87       	std	Y+9, r18	; 0x09
    22c4:	3a 87       	std	Y+10, r19	; 0x0a
    22c6:	4b 87       	std	Y+11, r20	; 0x0b
    22c8:	5c 87       	std	Y+12, r21	; 0x0c
    22ca:	6d 87       	std	Y+13, r22	; 0x0d
    22cc:	7e 87       	std	Y+14, r23	; 0x0e
    22ce:	8f 87       	std	Y+15, r24	; 0x0f
    22d0:	98 8b       	std	Y+16, r25	; 0x10
    22d2:	8b 81       	ldd	r24, Y+3	; 0x03
    22d4:	9c 81       	ldd	r25, Y+4	; 0x04
    22d6:	5c 01       	movw	r10, r24
    22d8:	c1 2c       	mov	r12, r1
    22da:	d1 2c       	mov	r13, r1
    22dc:	e1 2c       	mov	r14, r1
    22de:	f1 2c       	mov	r15, r1
    22e0:	87 01       	movw	r16, r14
    22e2:	2a 2d       	mov	r18, r10
    22e4:	3b 2d       	mov	r19, r11
    22e6:	4c 2d       	mov	r20, r12
    22e8:	5d 2d       	mov	r21, r13
    22ea:	6e 2d       	mov	r22, r14
    22ec:	7f 2d       	mov	r23, r15
    22ee:	80 2f       	mov	r24, r16
    22f0:	91 2f       	mov	r25, r17
    22f2:	00 e2       	ldi	r16, 0x20	; 32
    22f4:	0e 94 ee 13 	call	0x27dc	; 0x27dc <__ashldi3>
    22f8:	a2 2e       	mov	r10, r18
    22fa:	b3 2e       	mov	r11, r19
    22fc:	c4 2e       	mov	r12, r20
    22fe:	d5 2e       	mov	r13, r21
    2300:	e6 2e       	mov	r14, r22
    2302:	f7 2e       	mov	r15, r23
    2304:	08 2f       	mov	r16, r24
    2306:	19 2f       	mov	r17, r25
    2308:	29 84       	ldd	r2, Y+9	; 0x09
    230a:	2a 28       	or	r2, r10
    230c:	3a 84       	ldd	r3, Y+10	; 0x0a
    230e:	3b 28       	or	r3, r11
    2310:	4b 84       	ldd	r4, Y+11	; 0x0b
    2312:	4c 28       	or	r4, r12
    2314:	5c 84       	ldd	r5, Y+12	; 0x0c
    2316:	5d 28       	or	r5, r13
    2318:	6d 84       	ldd	r6, Y+13	; 0x0d
    231a:	6e 28       	or	r6, r14
    231c:	7e 84       	ldd	r7, Y+14	; 0x0e
    231e:	7f 28       	or	r7, r15
    2320:	8f 84       	ldd	r8, Y+15	; 0x0f
    2322:	80 2a       	or	r8, r16
    2324:	98 88       	ldd	r9, Y+16	; 0x10
    2326:	91 2a       	or	r9, r17
    2328:	8d 81       	ldd	r24, Y+5	; 0x05
    232a:	9e 81       	ldd	r25, Y+6	; 0x06
    232c:	af 81       	ldd	r26, Y+7	; 0x07
    232e:	b8 85       	ldd	r27, Y+8	; 0x08
    2330:	9c 01       	movw	r18, r24
    2332:	ad 01       	movw	r20, r26
    2334:	60 e0       	ldi	r22, 0x00	; 0
    2336:	70 e0       	ldi	r23, 0x00	; 0
    2338:	cb 01       	movw	r24, r22
    233a:	e2 2d       	mov	r30, r2
    233c:	e2 2b       	or	r30, r18
    233e:	e9 8b       	std	Y+17, r30	; 0x11
    2340:	e3 2d       	mov	r30, r3
    2342:	e3 2b       	or	r30, r19
    2344:	ea 8b       	std	Y+18, r30	; 0x12
    2346:	e4 2d       	mov	r30, r4
    2348:	e4 2b       	or	r30, r20
    234a:	eb 8b       	std	Y+19, r30	; 0x13
    234c:	e5 2d       	mov	r30, r5
    234e:	e5 2b       	or	r30, r21
    2350:	ec 8b       	std	Y+20, r30	; 0x14
    2352:	e6 2d       	mov	r30, r6
    2354:	e6 2b       	or	r30, r22
    2356:	ed 8b       	std	Y+21, r30	; 0x15
    2358:	e7 2d       	mov	r30, r7
    235a:	e7 2b       	or	r30, r23
    235c:	ee 8b       	std	Y+22, r30	; 0x16
    235e:	e8 2d       	mov	r30, r8
    2360:	e8 2b       	or	r30, r24
    2362:	ef 8b       	std	Y+23, r30	; 0x17
    2364:	e9 2d       	mov	r30, r9
    2366:	e9 2b       	or	r30, r25
    2368:	e8 8f       	std	Y+24, r30	; 0x18
    236a:	a9 88       	ldd	r10, Y+17	; 0x11
    236c:	ba 88       	ldd	r11, Y+18	; 0x12
    236e:	cb 88       	ldd	r12, Y+19	; 0x13
    2370:	dc 88       	ldd	r13, Y+20	; 0x14
    2372:	ed 88       	ldd	r14, Y+21	; 0x15
    2374:	fe 88       	ldd	r15, Y+22	; 0x16
    2376:	0f 89       	ldd	r16, Y+23	; 0x17
    2378:	18 8d       	ldd	r17, Y+24	; 0x18
    237a:	2a 2d       	mov	r18, r10
    237c:	3b 2d       	mov	r19, r11
    237e:	4c 2d       	mov	r20, r12
    2380:	5d 2d       	mov	r21, r13
    2382:	6e 2d       	mov	r22, r14
    2384:	7f 2d       	mov	r23, r15
    2386:	80 2f       	mov	r24, r16
    2388:	91 2f       	mov	r25, r17
    238a:	68 96       	adiw	r28, 0x18	; 24
    238c:	0f b6       	in	r0, 0x3f	; 63
    238e:	f8 94       	cli
    2390:	de bf       	out	0x3e, r29	; 62
    2392:	0f be       	out	0x3f, r0	; 63
    2394:	cd bf       	out	0x3d, r28	; 61
    2396:	df 91       	pop	r29
    2398:	cf 91       	pop	r28
    239a:	1f 91       	pop	r17
    239c:	0f 91       	pop	r16
    239e:	ff 90       	pop	r15
    23a0:	ef 90       	pop	r14
    23a2:	df 90       	pop	r13
    23a4:	cf 90       	pop	r12
    23a6:	bf 90       	pop	r11
    23a8:	af 90       	pop	r10
    23aa:	9f 90       	pop	r9
    23ac:	8f 90       	pop	r8
    23ae:	7f 90       	pop	r7
    23b0:	6f 90       	pop	r6
    23b2:	5f 90       	pop	r5
    23b4:	4f 90       	pop	r4
    23b6:	3f 90       	pop	r3
    23b8:	2f 90       	pop	r2
    23ba:	08 95       	ret

000023bc <stack_reset>:
/********************************************************************************
* stack_reset: Clears content on the entire stack and sets the stack pointer
*              to the top of the stack.
********************************************************************************/
void stack_reset(void)
{
    23bc:	cf 93       	push	r28
    23be:	df 93       	push	r29
    23c0:	00 d0       	rcall	.+0      	; 0x23c2 <stack_reset+0x6>
    23c2:	cd b7       	in	r28, 0x3d	; 61
    23c4:	de b7       	in	r29, 0x3e	; 62
	for (uint16_t i = 0; i < STACK_ADDRESS_WIDTH; ++i)
    23c6:	1a 82       	std	Y+2, r1	; 0x02
    23c8:	19 82       	std	Y+1, r1	; 0x01
    23ca:	12 c0       	rjmp	.+36     	; 0x23f0 <stack_reset+0x34>
	{
		stack[i] = 0x00;
    23cc:	89 81       	ldd	r24, Y+1	; 0x01
    23ce:	9a 81       	ldd	r25, Y+2	; 0x02
    23d0:	88 0f       	add	r24, r24
    23d2:	99 1f       	adc	r25, r25
    23d4:	88 0f       	add	r24, r24
    23d6:	99 1f       	adc	r25, r25
    23d8:	8c 5b       	subi	r24, 0xBC	; 188
    23da:	9b 4f       	sbci	r25, 0xFB	; 251
    23dc:	fc 01       	movw	r30, r24
    23de:	10 82       	st	Z, r1
    23e0:	11 82       	std	Z+1, r1	; 0x01
    23e2:	12 82       	std	Z+2, r1	; 0x02
    23e4:	13 82       	std	Z+3, r1	; 0x03
* stack_reset: Clears content on the entire stack and sets the stack pointer
*              to the top of the stack.
********************************************************************************/
void stack_reset(void)
{
	for (uint16_t i = 0; i < STACK_ADDRESS_WIDTH; ++i)
    23e6:	89 81       	ldd	r24, Y+1	; 0x01
    23e8:	9a 81       	ldd	r25, Y+2	; 0x02
    23ea:	01 96       	adiw	r24, 0x01	; 1
    23ec:	9a 83       	std	Y+2, r25	; 0x02
    23ee:	89 83       	std	Y+1, r24	; 0x01
    23f0:	89 81       	ldd	r24, Y+1	; 0x01
    23f2:	9a 81       	ldd	r25, Y+2	; 0x02
    23f4:	84 36       	cpi	r24, 0x64	; 100
    23f6:	91 05       	cpc	r25, r1
    23f8:	48 f3       	brcs	.-46     	; 0x23cc <stack_reset+0x10>
	{
		stack[i] = 0x00;
	}

	sp = STACK_ADDRESS_WIDTH - 1;
    23fa:	83 e6       	ldi	r24, 0x63	; 99
    23fc:	90 e0       	ldi	r25, 0x00	; 0
    23fe:	90 93 d5 05 	sts	0x05D5, r25	; 0x8005d5 <sp+0x1>
    2402:	80 93 d4 05 	sts	0x05D4, r24	; 0x8005d4 <sp>
	stack_empty = true;
    2406:	81 e0       	ldi	r24, 0x01	; 1
    2408:	80 93 d6 05 	sts	0x05D6, r24	; 0x8005d6 <stack_empty>
	return;
    240c:	00 00       	nop
}
    240e:	0f 90       	pop	r0
    2410:	0f 90       	pop	r0
    2412:	df 91       	pop	r29
    2414:	cf 91       	pop	r28
    2416:	08 95       	ret

00002418 <stack_push>:
*             error code 1 is returned if the stack is already full.
*
*             - value: 8 bit value to push to the stack.
********************************************************************************/
int stack_push(const uint32_t value)
{
    2418:	cf 93       	push	r28
    241a:	df 93       	push	r29
    241c:	00 d0       	rcall	.+0      	; 0x241e <stack_push+0x6>
    241e:	00 d0       	rcall	.+0      	; 0x2420 <stack_push+0x8>
    2420:	cd b7       	in	r28, 0x3d	; 61
    2422:	de b7       	in	r29, 0x3e	; 62
    2424:	69 83       	std	Y+1, r22	; 0x01
    2426:	7a 83       	std	Y+2, r23	; 0x02
    2428:	8b 83       	std	Y+3, r24	; 0x03
    242a:	9c 83       	std	Y+4, r25	; 0x04
	if (sp == 0)
    242c:	80 91 d4 05 	lds	r24, 0x05D4	; 0x8005d4 <sp>
    2430:	90 91 d5 05 	lds	r25, 0x05D5	; 0x8005d5 <sp+0x1>
    2434:	89 2b       	or	r24, r25
    2436:	19 f4       	brne	.+6      	; 0x243e <stack_push+0x26>
	{
		return 1;
    2438:	81 e0       	ldi	r24, 0x01	; 1
    243a:	90 e0       	ldi	r25, 0x00	; 0
    243c:	3a c0       	rjmp	.+116    	; 0x24b2 <stack_push+0x9a>
	}
	else
	{
		if (stack_empty)
    243e:	80 91 d6 05 	lds	r24, 0x05D6	; 0x8005d6 <stack_empty>
    2442:	88 23       	and	r24, r24
    2444:	b9 f0       	breq	.+46     	; 0x2474 <stack_push+0x5c>
		{
			stack[sp] = value;
    2446:	80 91 d4 05 	lds	r24, 0x05D4	; 0x8005d4 <sp>
    244a:	90 91 d5 05 	lds	r25, 0x05D5	; 0x8005d5 <sp+0x1>
    244e:	88 0f       	add	r24, r24
    2450:	99 1f       	adc	r25, r25
    2452:	88 0f       	add	r24, r24
    2454:	99 1f       	adc	r25, r25
    2456:	9c 01       	movw	r18, r24
    2458:	2c 5b       	subi	r18, 0xBC	; 188
    245a:	3b 4f       	sbci	r19, 0xFB	; 251
    245c:	89 81       	ldd	r24, Y+1	; 0x01
    245e:	9a 81       	ldd	r25, Y+2	; 0x02
    2460:	ab 81       	ldd	r26, Y+3	; 0x03
    2462:	bc 81       	ldd	r27, Y+4	; 0x04
    2464:	f9 01       	movw	r30, r18
    2466:	80 83       	st	Z, r24
    2468:	91 83       	std	Z+1, r25	; 0x01
    246a:	a2 83       	std	Z+2, r26	; 0x02
    246c:	b3 83       	std	Z+3, r27	; 0x03
			stack_empty = false;
    246e:	10 92 d6 05 	sts	0x05D6, r1	; 0x8005d6 <stack_empty>
    2472:	1d c0       	rjmp	.+58     	; 0x24ae <stack_push+0x96>
		}
		else
		{
			stack[--sp] = value;
    2474:	80 91 d4 05 	lds	r24, 0x05D4	; 0x8005d4 <sp>
    2478:	90 91 d5 05 	lds	r25, 0x05D5	; 0x8005d5 <sp+0x1>
    247c:	01 97       	sbiw	r24, 0x01	; 1
    247e:	90 93 d5 05 	sts	0x05D5, r25	; 0x8005d5 <sp+0x1>
    2482:	80 93 d4 05 	sts	0x05D4, r24	; 0x8005d4 <sp>
    2486:	80 91 d4 05 	lds	r24, 0x05D4	; 0x8005d4 <sp>
    248a:	90 91 d5 05 	lds	r25, 0x05D5	; 0x8005d5 <sp+0x1>
    248e:	88 0f       	add	r24, r24
    2490:	99 1f       	adc	r25, r25
    2492:	88 0f       	add	r24, r24
    2494:	99 1f       	adc	r25, r25
    2496:	9c 01       	movw	r18, r24
    2498:	2c 5b       	subi	r18, 0xBC	; 188
    249a:	3b 4f       	sbci	r19, 0xFB	; 251
    249c:	89 81       	ldd	r24, Y+1	; 0x01
    249e:	9a 81       	ldd	r25, Y+2	; 0x02
    24a0:	ab 81       	ldd	r26, Y+3	; 0x03
    24a2:	bc 81       	ldd	r27, Y+4	; 0x04
    24a4:	f9 01       	movw	r30, r18
    24a6:	80 83       	st	Z, r24
    24a8:	91 83       	std	Z+1, r25	; 0x01
    24aa:	a2 83       	std	Z+2, r26	; 0x02
    24ac:	b3 83       	std	Z+3, r27	; 0x03
		}
		return 0;
    24ae:	80 e0       	ldi	r24, 0x00	; 0
    24b0:	90 e0       	ldi	r25, 0x00	; 0
	}
}
    24b2:	0f 90       	pop	r0
    24b4:	0f 90       	pop	r0
    24b6:	0f 90       	pop	r0
    24b8:	0f 90       	pop	r0
    24ba:	df 91       	pop	r29
    24bc:	cf 91       	pop	r28
    24be:	08 95       	ret

000024c0 <stack_pop>:
/********************************************************************************
* stack_pop: Returns 8 bit value popped from the stack. If the stack is empty,
*            the value 0x00 is returned.
********************************************************************************/
uint32_t stack_pop(void)
{
    24c0:	cf 93       	push	r28
    24c2:	df 93       	push	r29
    24c4:	cd b7       	in	r28, 0x3d	; 61
    24c6:	de b7       	in	r29, 0x3e	; 62
	if (stack_empty)
    24c8:	80 91 d6 05 	lds	r24, 0x05D6	; 0x8005d6 <stack_empty>
    24cc:	88 23       	and	r24, r24
    24ce:	21 f0       	breq	.+8      	; 0x24d8 <stack_pop+0x18>
	{
		return 0x00;
    24d0:	80 e0       	ldi	r24, 0x00	; 0
    24d2:	90 e0       	ldi	r25, 0x00	; 0
    24d4:	dc 01       	movw	r26, r24
    24d6:	30 c0       	rjmp	.+96     	; 0x2538 <stack_pop+0x78>
	}
	else
	{
		if (sp < STACK_ADDRESS_WIDTH - 1)
    24d8:	80 91 d4 05 	lds	r24, 0x05D4	; 0x8005d4 <sp>
    24dc:	90 91 d5 05 	lds	r25, 0x05D5	; 0x8005d5 <sp+0x1>
    24e0:	83 36       	cpi	r24, 0x63	; 99
    24e2:	91 05       	cpc	r25, r1
    24e4:	b8 f4       	brcc	.+46     	; 0x2514 <stack_pop+0x54>
		{
			return stack[sp++];
    24e6:	80 91 d4 05 	lds	r24, 0x05D4	; 0x8005d4 <sp>
    24ea:	90 91 d5 05 	lds	r25, 0x05D5	; 0x8005d5 <sp+0x1>
    24ee:	9c 01       	movw	r18, r24
    24f0:	2f 5f       	subi	r18, 0xFF	; 255
    24f2:	3f 4f       	sbci	r19, 0xFF	; 255
    24f4:	30 93 d5 05 	sts	0x05D5, r19	; 0x8005d5 <sp+0x1>
    24f8:	20 93 d4 05 	sts	0x05D4, r18	; 0x8005d4 <sp>
    24fc:	88 0f       	add	r24, r24
    24fe:	99 1f       	adc	r25, r25
    2500:	88 0f       	add	r24, r24
    2502:	99 1f       	adc	r25, r25
    2504:	8c 5b       	subi	r24, 0xBC	; 188
    2506:	9b 4f       	sbci	r25, 0xFB	; 251
    2508:	fc 01       	movw	r30, r24
    250a:	80 81       	ld	r24, Z
    250c:	91 81       	ldd	r25, Z+1	; 0x01
    250e:	a2 81       	ldd	r26, Z+2	; 0x02
    2510:	b3 81       	ldd	r27, Z+3	; 0x03
    2512:	12 c0       	rjmp	.+36     	; 0x2538 <stack_pop+0x78>
		}
		else
		{
			stack_empty = true;
    2514:	81 e0       	ldi	r24, 0x01	; 1
    2516:	80 93 d6 05 	sts	0x05D6, r24	; 0x8005d6 <stack_empty>
			return stack[sp];
    251a:	80 91 d4 05 	lds	r24, 0x05D4	; 0x8005d4 <sp>
    251e:	90 91 d5 05 	lds	r25, 0x05D5	; 0x8005d5 <sp+0x1>
    2522:	88 0f       	add	r24, r24
    2524:	99 1f       	adc	r25, r25
    2526:	88 0f       	add	r24, r24
    2528:	99 1f       	adc	r25, r25
    252a:	8c 5b       	subi	r24, 0xBC	; 188
    252c:	9b 4f       	sbci	r25, 0xFB	; 251
    252e:	fc 01       	movw	r30, r24
    2530:	80 81       	ld	r24, Z
    2532:	91 81       	ldd	r25, Z+1	; 0x01
    2534:	a2 81       	ldd	r26, Z+2	; 0x02
    2536:	b3 81       	ldd	r27, Z+3	; 0x03
		}
	}
}
    2538:	bc 01       	movw	r22, r24
    253a:	cd 01       	movw	r24, r26
    253c:	df 91       	pop	r29
    253e:	cf 91       	pop	r28
    2540:	08 95       	ret

00002542 <__subsf3>:
    2542:	50 58       	subi	r21, 0x80	; 128

00002544 <__addsf3>:
    2544:	bb 27       	eor	r27, r27
    2546:	aa 27       	eor	r26, r26
    2548:	0e 94 b9 12 	call	0x2572	; 0x2572 <__addsf3x>
    254c:	0c 94 ae 13 	jmp	0x275c	; 0x275c <__fp_round>
    2550:	0e 94 a0 13 	call	0x2740	; 0x2740 <__fp_pscA>
    2554:	38 f0       	brcs	.+14     	; 0x2564 <__addsf3+0x20>
    2556:	0e 94 a7 13 	call	0x274e	; 0x274e <__fp_pscB>
    255a:	20 f0       	brcs	.+8      	; 0x2564 <__addsf3+0x20>
    255c:	39 f4       	brne	.+14     	; 0x256c <__addsf3+0x28>
    255e:	9f 3f       	cpi	r25, 0xFF	; 255
    2560:	19 f4       	brne	.+6      	; 0x2568 <__addsf3+0x24>
    2562:	26 f4       	brtc	.+8      	; 0x256c <__addsf3+0x28>
    2564:	0c 94 8d 13 	jmp	0x271a	; 0x271a <__fp_nan>
    2568:	0e f4       	brtc	.+2      	; 0x256c <__addsf3+0x28>
    256a:	e0 95       	com	r30
    256c:	e7 fb       	bst	r30, 7
    256e:	0c 94 87 13 	jmp	0x270e	; 0x270e <__fp_inf>

00002572 <__addsf3x>:
    2572:	e9 2f       	mov	r30, r25
    2574:	0e 94 bf 13 	call	0x277e	; 0x277e <__fp_split3>
    2578:	58 f3       	brcs	.-42     	; 0x2550 <__addsf3+0xc>
    257a:	ba 17       	cp	r27, r26
    257c:	62 07       	cpc	r22, r18
    257e:	73 07       	cpc	r23, r19
    2580:	84 07       	cpc	r24, r20
    2582:	95 07       	cpc	r25, r21
    2584:	20 f0       	brcs	.+8      	; 0x258e <__addsf3x+0x1c>
    2586:	79 f4       	brne	.+30     	; 0x25a6 <__addsf3x+0x34>
    2588:	a6 f5       	brtc	.+104    	; 0x25f2 <__addsf3x+0x80>
    258a:	0c 94 e1 13 	jmp	0x27c2	; 0x27c2 <__fp_zero>
    258e:	0e f4       	brtc	.+2      	; 0x2592 <__addsf3x+0x20>
    2590:	e0 95       	com	r30
    2592:	0b 2e       	mov	r0, r27
    2594:	ba 2f       	mov	r27, r26
    2596:	a0 2d       	mov	r26, r0
    2598:	0b 01       	movw	r0, r22
    259a:	b9 01       	movw	r22, r18
    259c:	90 01       	movw	r18, r0
    259e:	0c 01       	movw	r0, r24
    25a0:	ca 01       	movw	r24, r20
    25a2:	a0 01       	movw	r20, r0
    25a4:	11 24       	eor	r1, r1
    25a6:	ff 27       	eor	r31, r31
    25a8:	59 1b       	sub	r21, r25
    25aa:	99 f0       	breq	.+38     	; 0x25d2 <__addsf3x+0x60>
    25ac:	59 3f       	cpi	r21, 0xF9	; 249
    25ae:	50 f4       	brcc	.+20     	; 0x25c4 <__addsf3x+0x52>
    25b0:	50 3e       	cpi	r21, 0xE0	; 224
    25b2:	68 f1       	brcs	.+90     	; 0x260e <__addsf3x+0x9c>
    25b4:	1a 16       	cp	r1, r26
    25b6:	f0 40       	sbci	r31, 0x00	; 0
    25b8:	a2 2f       	mov	r26, r18
    25ba:	23 2f       	mov	r18, r19
    25bc:	34 2f       	mov	r19, r20
    25be:	44 27       	eor	r20, r20
    25c0:	58 5f       	subi	r21, 0xF8	; 248
    25c2:	f3 cf       	rjmp	.-26     	; 0x25aa <__addsf3x+0x38>
    25c4:	46 95       	lsr	r20
    25c6:	37 95       	ror	r19
    25c8:	27 95       	ror	r18
    25ca:	a7 95       	ror	r26
    25cc:	f0 40       	sbci	r31, 0x00	; 0
    25ce:	53 95       	inc	r21
    25d0:	c9 f7       	brne	.-14     	; 0x25c4 <__addsf3x+0x52>
    25d2:	7e f4       	brtc	.+30     	; 0x25f2 <__addsf3x+0x80>
    25d4:	1f 16       	cp	r1, r31
    25d6:	ba 0b       	sbc	r27, r26
    25d8:	62 0b       	sbc	r22, r18
    25da:	73 0b       	sbc	r23, r19
    25dc:	84 0b       	sbc	r24, r20
    25de:	ba f0       	brmi	.+46     	; 0x260e <__addsf3x+0x9c>
    25e0:	91 50       	subi	r25, 0x01	; 1
    25e2:	a1 f0       	breq	.+40     	; 0x260c <__addsf3x+0x9a>
    25e4:	ff 0f       	add	r31, r31
    25e6:	bb 1f       	adc	r27, r27
    25e8:	66 1f       	adc	r22, r22
    25ea:	77 1f       	adc	r23, r23
    25ec:	88 1f       	adc	r24, r24
    25ee:	c2 f7       	brpl	.-16     	; 0x25e0 <__addsf3x+0x6e>
    25f0:	0e c0       	rjmp	.+28     	; 0x260e <__addsf3x+0x9c>
    25f2:	ba 0f       	add	r27, r26
    25f4:	62 1f       	adc	r22, r18
    25f6:	73 1f       	adc	r23, r19
    25f8:	84 1f       	adc	r24, r20
    25fa:	48 f4       	brcc	.+18     	; 0x260e <__addsf3x+0x9c>
    25fc:	87 95       	ror	r24
    25fe:	77 95       	ror	r23
    2600:	67 95       	ror	r22
    2602:	b7 95       	ror	r27
    2604:	f7 95       	ror	r31
    2606:	9e 3f       	cpi	r25, 0xFE	; 254
    2608:	08 f0       	brcs	.+2      	; 0x260c <__addsf3x+0x9a>
    260a:	b0 cf       	rjmp	.-160    	; 0x256c <__addsf3+0x28>
    260c:	93 95       	inc	r25
    260e:	88 0f       	add	r24, r24
    2610:	08 f0       	brcs	.+2      	; 0x2614 <__addsf3x+0xa2>
    2612:	99 27       	eor	r25, r25
    2614:	ee 0f       	add	r30, r30
    2616:	97 95       	ror	r25
    2618:	87 95       	ror	r24
    261a:	08 95       	ret

0000261c <__fixsfdi>:
    261c:	be e3       	ldi	r27, 0x3E	; 62
    261e:	04 d0       	rcall	.+8      	; 0x2628 <__fixunssfdi+0x2>
    2620:	08 f4       	brcc	.+2      	; 0x2624 <__fixsfdi+0x8>
    2622:	90 e8       	ldi	r25, 0x80	; 128
    2624:	08 95       	ret

00002626 <__fixunssfdi>:
    2626:	bf e3       	ldi	r27, 0x3F	; 63
    2628:	22 27       	eor	r18, r18
    262a:	33 27       	eor	r19, r19
    262c:	a9 01       	movw	r20, r18
    262e:	0e 94 c7 13 	call	0x278e	; 0x278e <__fp_splitA>
    2632:	60 f1       	brcs	.+88     	; 0x268c <__fixunssfdi+0x66>
    2634:	9f 57       	subi	r25, 0x7F	; 127
    2636:	48 f1       	brcs	.+82     	; 0x268a <__fixunssfdi+0x64>
    2638:	b9 17       	cp	r27, r25
    263a:	40 f1       	brcs	.+80     	; 0x268c <__fixunssfdi+0x66>
    263c:	bf e3       	ldi	r27, 0x3F	; 63
    263e:	b9 1b       	sub	r27, r25
    2640:	99 27       	eor	r25, r25
    2642:	b8 50       	subi	r27, 0x08	; 8
    2644:	3a f4       	brpl	.+14     	; 0x2654 <__fixunssfdi+0x2e>
    2646:	66 0f       	add	r22, r22
    2648:	77 1f       	adc	r23, r23
    264a:	88 1f       	adc	r24, r24
    264c:	99 1f       	adc	r25, r25
    264e:	b3 95       	inc	r27
    2650:	d2 f3       	brmi	.-12     	; 0x2646 <__fixunssfdi+0x20>
    2652:	16 c0       	rjmp	.+44     	; 0x2680 <__fixunssfdi+0x5a>
    2654:	b8 50       	subi	r27, 0x08	; 8
    2656:	4a f0       	brmi	.+18     	; 0x266a <__fixunssfdi+0x44>
    2658:	23 2f       	mov	r18, r19
    265a:	34 2f       	mov	r19, r20
    265c:	45 2f       	mov	r20, r21
    265e:	56 2f       	mov	r21, r22
    2660:	67 2f       	mov	r22, r23
    2662:	78 2f       	mov	r23, r24
    2664:	88 27       	eor	r24, r24
    2666:	b8 50       	subi	r27, 0x08	; 8
    2668:	ba f7       	brpl	.-18     	; 0x2658 <__fixunssfdi+0x32>
    266a:	b8 5f       	subi	r27, 0xF8	; 248
    266c:	49 f0       	breq	.+18     	; 0x2680 <__fixunssfdi+0x5a>
    266e:	86 95       	lsr	r24
    2670:	77 95       	ror	r23
    2672:	67 95       	ror	r22
    2674:	57 95       	ror	r21
    2676:	47 95       	ror	r20
    2678:	37 95       	ror	r19
    267a:	27 95       	ror	r18
    267c:	ba 95       	dec	r27
    267e:	b9 f7       	brne	.-18     	; 0x266e <__fixunssfdi+0x48>
    2680:	16 f4       	brtc	.+4      	; 0x2686 <__fixunssfdi+0x60>
    2682:	0e 94 90 13 	call	0x2720	; 0x2720 <__fp_negdi>
    2686:	88 94       	clc
    2688:	08 95       	ret
    268a:	88 94       	clc
    268c:	60 e0       	ldi	r22, 0x00	; 0
    268e:	70 e0       	ldi	r23, 0x00	; 0
    2690:	cb 01       	movw	r24, r22
    2692:	08 95       	ret

00002694 <__floatunsisf>:
    2694:	e8 94       	clt
    2696:	09 c0       	rjmp	.+18     	; 0x26aa <__floatsisf+0x12>

00002698 <__floatsisf>:
    2698:	97 fb       	bst	r25, 7
    269a:	3e f4       	brtc	.+14     	; 0x26aa <__floatsisf+0x12>
    269c:	90 95       	com	r25
    269e:	80 95       	com	r24
    26a0:	70 95       	com	r23
    26a2:	61 95       	neg	r22
    26a4:	7f 4f       	sbci	r23, 0xFF	; 255
    26a6:	8f 4f       	sbci	r24, 0xFF	; 255
    26a8:	9f 4f       	sbci	r25, 0xFF	; 255
    26aa:	99 23       	and	r25, r25
    26ac:	a9 f0       	breq	.+42     	; 0x26d8 <__floatsisf+0x40>
    26ae:	f9 2f       	mov	r31, r25
    26b0:	96 e9       	ldi	r25, 0x96	; 150
    26b2:	bb 27       	eor	r27, r27
    26b4:	93 95       	inc	r25
    26b6:	f6 95       	lsr	r31
    26b8:	87 95       	ror	r24
    26ba:	77 95       	ror	r23
    26bc:	67 95       	ror	r22
    26be:	b7 95       	ror	r27
    26c0:	f1 11       	cpse	r31, r1
    26c2:	f8 cf       	rjmp	.-16     	; 0x26b4 <__floatsisf+0x1c>
    26c4:	fa f4       	brpl	.+62     	; 0x2704 <__floatsisf+0x6c>
    26c6:	bb 0f       	add	r27, r27
    26c8:	11 f4       	brne	.+4      	; 0x26ce <__floatsisf+0x36>
    26ca:	60 ff       	sbrs	r22, 0
    26cc:	1b c0       	rjmp	.+54     	; 0x2704 <__floatsisf+0x6c>
    26ce:	6f 5f       	subi	r22, 0xFF	; 255
    26d0:	7f 4f       	sbci	r23, 0xFF	; 255
    26d2:	8f 4f       	sbci	r24, 0xFF	; 255
    26d4:	9f 4f       	sbci	r25, 0xFF	; 255
    26d6:	16 c0       	rjmp	.+44     	; 0x2704 <__floatsisf+0x6c>
    26d8:	88 23       	and	r24, r24
    26da:	11 f0       	breq	.+4      	; 0x26e0 <__floatsisf+0x48>
    26dc:	96 e9       	ldi	r25, 0x96	; 150
    26de:	11 c0       	rjmp	.+34     	; 0x2702 <__floatsisf+0x6a>
    26e0:	77 23       	and	r23, r23
    26e2:	21 f0       	breq	.+8      	; 0x26ec <__floatsisf+0x54>
    26e4:	9e e8       	ldi	r25, 0x8E	; 142
    26e6:	87 2f       	mov	r24, r23
    26e8:	76 2f       	mov	r23, r22
    26ea:	05 c0       	rjmp	.+10     	; 0x26f6 <__floatsisf+0x5e>
    26ec:	66 23       	and	r22, r22
    26ee:	71 f0       	breq	.+28     	; 0x270c <__floatsisf+0x74>
    26f0:	96 e8       	ldi	r25, 0x86	; 134
    26f2:	86 2f       	mov	r24, r22
    26f4:	70 e0       	ldi	r23, 0x00	; 0
    26f6:	60 e0       	ldi	r22, 0x00	; 0
    26f8:	2a f0       	brmi	.+10     	; 0x2704 <__floatsisf+0x6c>
    26fa:	9a 95       	dec	r25
    26fc:	66 0f       	add	r22, r22
    26fe:	77 1f       	adc	r23, r23
    2700:	88 1f       	adc	r24, r24
    2702:	da f7       	brpl	.-10     	; 0x26fa <__floatsisf+0x62>
    2704:	88 0f       	add	r24, r24
    2706:	96 95       	lsr	r25
    2708:	87 95       	ror	r24
    270a:	97 f9       	bld	r25, 7
    270c:	08 95       	ret

0000270e <__fp_inf>:
    270e:	97 f9       	bld	r25, 7
    2710:	9f 67       	ori	r25, 0x7F	; 127
    2712:	80 e8       	ldi	r24, 0x80	; 128
    2714:	70 e0       	ldi	r23, 0x00	; 0
    2716:	60 e0       	ldi	r22, 0x00	; 0
    2718:	08 95       	ret

0000271a <__fp_nan>:
    271a:	9f ef       	ldi	r25, 0xFF	; 255
    271c:	80 ec       	ldi	r24, 0xC0	; 192
    271e:	08 95       	ret

00002720 <__fp_negdi>:
    2720:	90 95       	com	r25
    2722:	80 95       	com	r24
    2724:	70 95       	com	r23
    2726:	60 95       	com	r22
    2728:	50 95       	com	r21
    272a:	40 95       	com	r20
    272c:	30 95       	com	r19
    272e:	21 95       	neg	r18
    2730:	3f 4f       	sbci	r19, 0xFF	; 255
    2732:	4f 4f       	sbci	r20, 0xFF	; 255
    2734:	5f 4f       	sbci	r21, 0xFF	; 255
    2736:	6f 4f       	sbci	r22, 0xFF	; 255
    2738:	7f 4f       	sbci	r23, 0xFF	; 255
    273a:	8f 4f       	sbci	r24, 0xFF	; 255
    273c:	9f 4f       	sbci	r25, 0xFF	; 255
    273e:	08 95       	ret

00002740 <__fp_pscA>:
    2740:	00 24       	eor	r0, r0
    2742:	0a 94       	dec	r0
    2744:	16 16       	cp	r1, r22
    2746:	17 06       	cpc	r1, r23
    2748:	18 06       	cpc	r1, r24
    274a:	09 06       	cpc	r0, r25
    274c:	08 95       	ret

0000274e <__fp_pscB>:
    274e:	00 24       	eor	r0, r0
    2750:	0a 94       	dec	r0
    2752:	12 16       	cp	r1, r18
    2754:	13 06       	cpc	r1, r19
    2756:	14 06       	cpc	r1, r20
    2758:	05 06       	cpc	r0, r21
    275a:	08 95       	ret

0000275c <__fp_round>:
    275c:	09 2e       	mov	r0, r25
    275e:	03 94       	inc	r0
    2760:	00 0c       	add	r0, r0
    2762:	11 f4       	brne	.+4      	; 0x2768 <__fp_round+0xc>
    2764:	88 23       	and	r24, r24
    2766:	52 f0       	brmi	.+20     	; 0x277c <__fp_round+0x20>
    2768:	bb 0f       	add	r27, r27
    276a:	40 f4       	brcc	.+16     	; 0x277c <__fp_round+0x20>
    276c:	bf 2b       	or	r27, r31
    276e:	11 f4       	brne	.+4      	; 0x2774 <__fp_round+0x18>
    2770:	60 ff       	sbrs	r22, 0
    2772:	04 c0       	rjmp	.+8      	; 0x277c <__fp_round+0x20>
    2774:	6f 5f       	subi	r22, 0xFF	; 255
    2776:	7f 4f       	sbci	r23, 0xFF	; 255
    2778:	8f 4f       	sbci	r24, 0xFF	; 255
    277a:	9f 4f       	sbci	r25, 0xFF	; 255
    277c:	08 95       	ret

0000277e <__fp_split3>:
    277e:	57 fd       	sbrc	r21, 7
    2780:	90 58       	subi	r25, 0x80	; 128
    2782:	44 0f       	add	r20, r20
    2784:	55 1f       	adc	r21, r21
    2786:	59 f0       	breq	.+22     	; 0x279e <__fp_splitA+0x10>
    2788:	5f 3f       	cpi	r21, 0xFF	; 255
    278a:	71 f0       	breq	.+28     	; 0x27a8 <__fp_splitA+0x1a>
    278c:	47 95       	ror	r20

0000278e <__fp_splitA>:
    278e:	88 0f       	add	r24, r24
    2790:	97 fb       	bst	r25, 7
    2792:	99 1f       	adc	r25, r25
    2794:	61 f0       	breq	.+24     	; 0x27ae <__fp_splitA+0x20>
    2796:	9f 3f       	cpi	r25, 0xFF	; 255
    2798:	79 f0       	breq	.+30     	; 0x27b8 <__fp_splitA+0x2a>
    279a:	87 95       	ror	r24
    279c:	08 95       	ret
    279e:	12 16       	cp	r1, r18
    27a0:	13 06       	cpc	r1, r19
    27a2:	14 06       	cpc	r1, r20
    27a4:	55 1f       	adc	r21, r21
    27a6:	f2 cf       	rjmp	.-28     	; 0x278c <__fp_split3+0xe>
    27a8:	46 95       	lsr	r20
    27aa:	f1 df       	rcall	.-30     	; 0x278e <__fp_splitA>
    27ac:	08 c0       	rjmp	.+16     	; 0x27be <__fp_splitA+0x30>
    27ae:	16 16       	cp	r1, r22
    27b0:	17 06       	cpc	r1, r23
    27b2:	18 06       	cpc	r1, r24
    27b4:	99 1f       	adc	r25, r25
    27b6:	f1 cf       	rjmp	.-30     	; 0x279a <__fp_splitA+0xc>
    27b8:	86 95       	lsr	r24
    27ba:	71 05       	cpc	r23, r1
    27bc:	61 05       	cpc	r22, r1
    27be:	08 94       	sec
    27c0:	08 95       	ret

000027c2 <__fp_zero>:
    27c2:	e8 94       	clt

000027c4 <__fp_szero>:
    27c4:	bb 27       	eor	r27, r27
    27c6:	66 27       	eor	r22, r22
    27c8:	77 27       	eor	r23, r23
    27ca:	cb 01       	movw	r24, r22
    27cc:	97 f9       	bld	r25, 7
    27ce:	08 95       	ret

000027d0 <__tablejump2__>:
    27d0:	ee 0f       	add	r30, r30
    27d2:	ff 1f       	adc	r31, r31
    27d4:	05 90       	lpm	r0, Z+
    27d6:	f4 91       	lpm	r31, Z
    27d8:	e0 2d       	mov	r30, r0
    27da:	09 94       	ijmp

000027dc <__ashldi3>:
    27dc:	0f 93       	push	r16
    27de:	08 30       	cpi	r16, 0x08	; 8
    27e0:	90 f0       	brcs	.+36     	; 0x2806 <__ashldi3+0x2a>
    27e2:	98 2f       	mov	r25, r24
    27e4:	87 2f       	mov	r24, r23
    27e6:	76 2f       	mov	r23, r22
    27e8:	65 2f       	mov	r22, r21
    27ea:	54 2f       	mov	r21, r20
    27ec:	43 2f       	mov	r20, r19
    27ee:	32 2f       	mov	r19, r18
    27f0:	22 27       	eor	r18, r18
    27f2:	08 50       	subi	r16, 0x08	; 8
    27f4:	f4 cf       	rjmp	.-24     	; 0x27de <__ashldi3+0x2>
    27f6:	22 0f       	add	r18, r18
    27f8:	33 1f       	adc	r19, r19
    27fa:	44 1f       	adc	r20, r20
    27fc:	55 1f       	adc	r21, r21
    27fe:	66 1f       	adc	r22, r22
    2800:	77 1f       	adc	r23, r23
    2802:	88 1f       	adc	r24, r24
    2804:	99 1f       	adc	r25, r25
    2806:	0a 95       	dec	r16
    2808:	b2 f7       	brpl	.-20     	; 0x27f6 <__ashldi3+0x1a>
    280a:	0f 91       	pop	r16
    280c:	08 95       	ret

0000280e <__ashrdi3>:
    280e:	97 fb       	bst	r25, 7
    2810:	10 f8       	bld	r1, 0

00002812 <__lshrdi3>:
    2812:	16 94       	lsr	r1
    2814:	00 08       	sbc	r0, r0
    2816:	0f 93       	push	r16
    2818:	08 30       	cpi	r16, 0x08	; 8
    281a:	98 f0       	brcs	.+38     	; 0x2842 <__lshrdi3+0x30>
    281c:	08 50       	subi	r16, 0x08	; 8
    281e:	23 2f       	mov	r18, r19
    2820:	34 2f       	mov	r19, r20
    2822:	45 2f       	mov	r20, r21
    2824:	56 2f       	mov	r21, r22
    2826:	67 2f       	mov	r22, r23
    2828:	78 2f       	mov	r23, r24
    282a:	89 2f       	mov	r24, r25
    282c:	90 2d       	mov	r25, r0
    282e:	f4 cf       	rjmp	.-24     	; 0x2818 <__lshrdi3+0x6>
    2830:	05 94       	asr	r0
    2832:	97 95       	ror	r25
    2834:	87 95       	ror	r24
    2836:	77 95       	ror	r23
    2838:	67 95       	ror	r22
    283a:	57 95       	ror	r21
    283c:	47 95       	ror	r20
    283e:	37 95       	ror	r19
    2840:	27 95       	ror	r18
    2842:	0a 95       	dec	r16
    2844:	aa f7       	brpl	.-22     	; 0x2830 <__lshrdi3+0x1e>
    2846:	0f 91       	pop	r16
    2848:	08 95       	ret

0000284a <_exit>:
    284a:	f8 94       	cli

0000284c <__stop_program>:
    284c:	ff cf       	rjmp	.-2      	; 0x284c <__stop_program>
